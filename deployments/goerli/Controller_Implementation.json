{
  "address": "0x80f5D1C65dF0e252A29f37806800553caa53fE12",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rangeId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_utilizationRatio",
          "type": "uint256"
        }
      ],
      "name": "calculateYearlyPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "checkLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "lowerTick",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "upperTick",
                  "type": "int24"
                }
              ],
              "internalType": "struct DataType.LPT[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.Position[]",
          "name": "_positions",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isLiquidationCall",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapAnyway",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quoterMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isQuoteZero",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount1",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataType.TradeOption",
          "name": "_tradeOption",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.ClosePositionOption",
          "name": "_closePositionOptions",
          "type": "tuple"
        }
      ],
      "name": "closePosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "requiredAmounts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "swapAmounts",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_subVaultIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isLiquidationCall",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapAnyway",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quoterMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isQuoteZero",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount1",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataType.TradeOption",
          "name": "_tradeOption",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.ClosePositionOption",
          "name": "_closePositionOptions",
          "type": "tuple"
        }
      ],
      "name": "closeSubVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "requiredAmounts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "swapAmounts",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isLiquidationCall",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapAnyway",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quoterMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isQuoteZero",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount1",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataType.TradeOption",
          "name": "_tradeOption",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.ClosePositionOption",
          "name": "_closePositionOptions",
          "type": "tuple"
        }
      ],
      "name": "closeVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "requiredAmounts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "swapAmounts",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContext",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "lowerTick",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "upperTick",
                  "type": "int24"
                }
              ],
              "internalType": "struct DataType.LPT[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.Position[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getPositionCalculatorParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "marginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginAmount1",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "asset0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "lowerTick",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "upperTick",
                  "type": "int24"
                }
              ],
              "internalType": "struct DataType.LPT[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PositionCalculator.PositionCalculatorParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_rangeId",
          "type": "bytes32"
        }
      ],
      "name": "getRange",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int24",
              "name": "lowerTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "upperTick",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "borrowedLiquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "premiumGrowthForBorrower",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumGrowthForLender",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee0Growth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee1Growth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastTouchedTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.PerpStatus",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSqrtIndexPrice",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSqrtPrice",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subVaultId",
          "type": "uint256"
        }
      ],
      "name": "getSubVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "enum BaseToken.InterestType",
                  "name": "interestType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "assetAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "debtAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAssetGrowth",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastDebtGrowth",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BaseToken.AccountState",
              "name": "balance0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum BaseToken.InterestType",
                  "name": "interestType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "assetAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "debtAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastAssetGrowth",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastDebtGrowth",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BaseToken.AccountState",
              "name": "balance1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "bytes32",
                  "name": "rangeId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidityAmount",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "premiumGrowthLast",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "fee0Last",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "fee1Last",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataType.LPTState[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.SubVault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalCompoundDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCompoundBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalNormalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalNormalBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetScaler",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtScaler",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtGrowth",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseToken.TokenState",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalCompoundDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCompoundBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalNormalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalNormalBorrowed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetScaler",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtScaler",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetGrowth",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtGrowth",
              "type": "uint256"
            }
          ],
          "internalType": "struct BaseToken.TokenState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "marginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginAmount1",
              "type": "int256"
            },
            {
              "internalType": "uint256[]",
              "name": "subVaults",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct DataType.Vault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "_sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "name": "getVaultStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "positionValue",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginValue",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "minCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "assetValue",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "debtValue",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "premiumValue",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct DataType.SubVaultValue",
                  "name": "values",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "assetAmount0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "assetAmount1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "debtAmount0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "debtAmount1",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataType.SubVaultAmount",
                  "name": "amount",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "int256",
                      "name": "assetFee0",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "assetFee1",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "debtFee0",
                      "type": "int256"
                    },
                    {
                      "internalType": "int256",
                      "name": "debtFee1",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct DataType.SubVaultInterest",
                  "name": "interest",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "receivedTradeAmount0",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "receivedTradeAmount1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "receivedPremium",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "paidPremium",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct DataType.SubVaultPremium",
                  "name": "premium",
                  "type": "tuple"
                }
              ],
              "internalType": "struct DataType.SubVaultStatus[]",
              "name": "subVaults",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.VaultStatus",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint24",
              "name": "feeTier",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isMarginZero",
              "type": "bool"
            }
          ],
          "internalType": "struct DataType.InitializationParams",
          "name": "_initializationParams",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chainlinkPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultNFT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "irmParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kinkRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slope2",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTouchedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "swapRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.LiquidationOption",
          "name": "_liquidationOption",
          "type": "tuple"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "asset1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "lowerTick",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "upperTick",
                  "type": "int24"
                }
              ],
              "internalType": "struct DataType.LPT[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isLiquidationCall",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapAnyway",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quoterMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isQuoteZero",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount1",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataType.TradeOption",
          "name": "_tradeOption",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.OpenPositionOption",
          "name": "_openPositionOptions",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "requiredAmounts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "swapAmounts",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOperator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "uniswapV3MintCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kinkRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope2",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestCalculator.IRMParams",
          "name": "_irmParams",
          "type": "tuple"
        }
      ],
      "name": "updateIRMParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum DataType.PositionUpdateType",
              "name": "positionUpdateType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "zeroForOne",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "int24",
              "name": "lowerTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "upperTick",
              "type": "int24"
            },
            {
              "internalType": "uint256",
              "name": "param0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "param1",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.PositionUpdate[]",
          "name": "positionUpdates",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isLiquidationCall",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "swapAnyway",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quoterMode",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isQuoteZero",
              "type": "bool"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "targetMarginAmount1",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct DataType.TradeOption",
          "name": "_tradeOption",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lowerSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperSqrtPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.OpenPositionOption",
          "name": "_openPositionOptions",
          "type": "tuple"
        }
      ],
      "name": "updatePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "requiredAmounts",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount1",
              "type": "int256"
            }
          ],
          "internalType": "struct DataType.TokenAmounts",
          "name": "swapAmounts",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kinkRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope2",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestCalculator.IRMParams",
          "name": "_irmParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kinkRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope2",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestCalculator.IRMParams",
          "name": "_premiumParams",
          "type": "tuple"
        }
      ],
      "name": "updateYearlyPremiumParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "name": "withdrawProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ypParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kinkRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope2",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestCalculator.IRMParams",
          "name": "premiumParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "kinkRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slope2",
              "type": "uint256"
            }
          ],
          "internalType": "struct InterestCalculator.IRMParams",
          "name": "irmParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x752c8afb59763bb23222c01e4f30f2a6131a0a69b48a8532fbd422119c3e9a72",
  "receipt": {
    "to": null,
    "from": "0x1c745d31A084a14Ba30E7c9F4B14EA762d44f194",
    "contractAddress": "0x80f5D1C65dF0e252A29f37806800553caa53fE12",
    "transactionIndex": 32,
    "gasUsed": "5124679",
    "logsBloom": "0x
    "blockHash": "0x341081b8c843f532e791bca9fad0445e1be385f7c7905cc9f66dbe10ec5728ae",
    "transactionHash": "0x752c8afb59763bb23222c01e4f30f2a6131a0a69b48a8532fbd422119c3e9a72",
    "logs": [],
    "blockNumber": 7950235,
    "cumulativeGasUsed": "12965429",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8f28b90d15194a148a6918b13f9f7738",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rangeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_utilizationRatio\",\"type\":\"uint256\"}],\"name\":\"calculateYearlyPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"checkLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct DataType.LPT[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.Position[]\",\"name\":\"_positions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLiquidationCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAnyway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoterMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isQuoteZero\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct DataType.TradeOption\",\"name\":\"_tradeOption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.ClosePositionOption\",\"name\":\"_closePositionOptions\",\"type\":\"tuple\"}],\"name\":\"closePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"requiredAmounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"swapAmounts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_subVaultIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLiquidationCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAnyway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoterMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isQuoteZero\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct DataType.TradeOption\",\"name\":\"_tradeOption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.ClosePositionOption\",\"name\":\"_closePositionOptions\",\"type\":\"tuple\"}],\"name\":\"closeSubVault\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"requiredAmounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"swapAmounts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLiquidationCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAnyway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoterMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isQuoteZero\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct DataType.TradeOption\",\"name\":\"_tradeOption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.ClosePositionOption\",\"name\":\"_closePositionOptions\",\"type\":\"tuple\"}],\"name\":\"closeVault\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"requiredAmounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"swapAmounts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContext\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct DataType.LPT[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getPositionCalculatorParams\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"marginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginAmount1\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"asset0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct DataType.LPT[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PositionCalculator.PositionCalculatorParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_rangeId\",\"type\":\"bytes32\"}],\"name\":\"getRange\",\"outputs\":[{\"components\":[{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"borrowedLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"premiumGrowthForBorrower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumGrowthForLender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee0Growth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1Growth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTouchedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.PerpStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSqrtIndexPrice\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSqrtPrice\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subVaultId\",\"type\":\"uint256\"}],\"name\":\"getSubVault\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum BaseToken.InterestType\",\"name\":\"interestType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAssetGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDebtGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseToken.AccountState\",\"name\":\"balance0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum BaseToken.InterestType\",\"name\":\"interestType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAssetGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDebtGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseToken.AccountState\",\"name\":\"balance1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"rangeId\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"liquidityAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"premiumGrowthLast\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee0Last\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee1Last\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.LPTState[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.SubVault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCompoundDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCompoundBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNormalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNormalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetScaler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtScaler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseToken.TokenState\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCompoundDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCompoundBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNormalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNormalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetScaler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtScaler\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetGrowth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtGrowth\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseToken.TokenState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"marginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginAmount1\",\"type\":\"int256\"},{\"internalType\":\"uint256[]\",\"name\":\"subVaults\",\"type\":\"uint256[]\"}],\"internalType\":\"struct DataType.Vault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"getVaultStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"positionValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minCollateral\",\"type\":\"int256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtValue\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"premiumValue\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.SubVaultValue\",\"name\":\"values\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount1\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.SubVaultAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"assetFee0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"assetFee1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"debtFee0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"debtFee1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.SubVaultInterest\",\"name\":\"interest\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"receivedTradeAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedTradeAmount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedPremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidPremium\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.SubVaultPremium\",\"name\":\"premium\",\"type\":\"tuple\"}],\"internalType\":\"struct DataType.SubVaultStatus[]\",\"name\":\"subVaults\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.VaultStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"feeTier\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMarginZero\",\"type\":\"bool\"}],\"internalType\":\"struct DataType.InitializationParams\",\"name\":\"_initializationParams\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultNFT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"irmParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTouchedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.LiquidationOption\",\"name\":\"_liquidationOption\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"asset1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct DataType.LPT[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLiquidationCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAnyway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoterMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isQuoteZero\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct DataType.TradeOption\",\"name\":\"_tradeOption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.OpenPositionOption\",\"name\":\"_openPositionOptions\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"requiredAmounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"swapAmounts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3MintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope2\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestCalculator.IRMParams\",\"name\":\"_irmParams\",\"type\":\"tuple\"}],\"name\":\"updateIRMParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum DataType.PositionUpdateType\",\"name\":\"positionUpdateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"param0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.PositionUpdate[]\",\"name\":\"positionUpdates\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLiquidationCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapAnyway\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quoterMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isQuoteZero\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"targetMarginAmount1\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct DataType.TradeOption\",\"name\":\"_tradeOption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lowerSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.OpenPositionOption\",\"name\":\"_openPositionOptions\",\"type\":\"tuple\"}],\"name\":\"updatePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"requiredAmounts\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"internalType\":\"struct DataType.TokenAmounts\",\"name\":\"swapAmounts\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope2\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestCalculator.IRMParams\",\"name\":\"_irmParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope2\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestCalculator.IRMParams\",\"name\":\"_premiumParams\",\"type\":\"tuple\"}],\"name\":\"updateYearlyPremiumParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ypParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope2\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestCalculator.IRMParams\",\"name\":\"premiumParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kinkRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slope2\",\"type\":\"uint256\"}],\"internalType\":\"struct InterestCalculator.IRMParams\",\"name\":\"irmParams\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateYearlyPremium(bytes32,uint256)\":{\"params\":{\"_rangeId\":\"The id of the range\",\"_utilizationRatio\":\"Utilization ratio of LPT\"}},\"checkLiquidatable(uint256)\":{\"params\":{\"_vaultId\":\"vault id\"},\"returns\":{\"_0\":\"isLiquidatable true if the vault is liquidatable, false if the vault is safe.\"}},\"closePosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[])[],(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_closePositionOptions\":\"Option parameters to close position\",\"_positions\":\"Positions to close\",\"_tradeOption\":\"Trade parameters\",\"_vaultId\":\"The id of the vault\"}},\"closeSubVault(uint256,uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_closePositionOptions\":\"Option parameters to close position\",\"_subVaultIndex\":\"The index of the sub-vault\",\"_tradeOption\":\"Trade parameters\",\"_vaultId\":\"The id of the vault\"}},\"closeVault(uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_closePositionOptions\":\"Option parameters to close position\",\"_tradeOption\":\"Trade parameters\",\"_vaultId\":\"The id of the vault\"}},\"getRange(bytes32)\":{\"params\":{\"_rangeId\":\"The id of the LPT\"}},\"getSubVault(uint256)\":{\"params\":{\"_subVaultId\":\"The id of the sub-vault\"}},\"getVault(uint256)\":{\"params\":{\"_vaultId\":\"The id of the vault\"}},\"getVaultStatus(uint256,uint160)\":{\"params\":{\"_vaultId\":\"The id of the vault\"}},\"liquidate(uint256,(uint256,uint256))\":{\"params\":{\"_liquidationOption\":\"option parameters for liquidation call\",\"_vaultId\":\"The id of the vault\"}},\"openPosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[]),(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256))\":{\"params\":{\"_openPositionOptions\":\"Option parameters to open position\",\"_position\":\"Position to open\",\"_tradeOption\":\"Trade parameters\",\"_vaultId\":\"The id of the vault. 0 means that it creates new vault.\"}},\"setOperator(address)\":{\"details\":\"Only operator can call this function.\",\"params\":{\"_newOperator\":\"The address of new operator\"}},\"uniswapV3MintCallback(uint256,uint256,bytes)\":{\"details\":\"Callback for Uniswap V3 pool.\"},\"updateIRMParams((uint256,uint256,uint256,uint256))\":{\"details\":\"Only operator can call this function.\",\"params\":{\"_irmParams\":\"New interest rate model parameter\"}},\"updateYearlyPremiumParams((uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))\":{\"details\":\"Only operator can call this function.\",\"params\":{\"_irmParams\":\"New interest rate model parameter\",\"_premiumParams\":\"New interest rate model parameter for variance calculation\"}},\"withdrawProtocolFee(uint256,uint256)\":{\"details\":\"Only operator can call this function.\",\"params\":{\"_amount0\":\"amount of token0 to withdraw\",\"_amount1\":\"amount of token1 to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateYearlyPremium(bytes32,uint256)\":{\"notice\":\"Returns yearly premium to borrow Liquidity Provider Token (LPT). The function can return yearly premium with specific utilization ratio.\"},\"checkLiquidatable(uint256)\":{\"notice\":\"Returns the flag whether a vault can be liquidated or not.\"},\"closePosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[])[],(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Closes position partially.\"},\"closeSubVault(uint256,uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Closes all positions in sub-vault.\"},\"closeVault(uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Closes all positions in a vault.\"},\"getRange(bytes32)\":{\"notice\":\"Returns a Liquidity Provider Token (LPT) data\"},\"getSqrtPrice()\":{\"notice\":\"Gets square root of current underlying token price by quote token.\"},\"getSubVault(uint256)\":{\"notice\":\"Returns a sub-vault data\"},\"getTokenState()\":{\"notice\":\"Returns the status of supplied tokens.\"},\"getVault(uint256)\":{\"notice\":\"Returns a vault data\"},\"getVaultStatus(uint256,uint160)\":{\"notice\":\"Returns values and token amounts of the vault.\"},\"liquidate(uint256,(uint256,uint256))\":{\"notice\":\"Liquidates a vault.\"},\"openPosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[]),(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256))\":{\"notice\":\"Opens new position.\"},\"setOperator(address)\":{\"notice\":\"Sets new operator\"},\"updateIRMParams((uint256,uint256,uint256,uint256))\":{\"notice\":\"Updates interest rate model parameter.\"},\"updateYearlyPremiumParams((uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))\":{\"notice\":\"Updates interest rate model parameters for premium calculation.\"},\"withdrawProtocolFee(uint256,uint256)\":{\"notice\":\"Withdraws accumulated protocol fee.\"}},\"notice\":\"Error Codes P1: caller must be vault owner P2: vault does not exists P3: caller must be operator P4: cannot create vault with 0 amount\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363638343035343734353837\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"lib/chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x5cf082133e64f5f90f446c011681ea7ab719e2992c7247074b943771c176494a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#mint\\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\\ninterface IUniswapV3MintCallback {\\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\\n    function uniswapV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x27a9725b8f831a92d16380860c3d348a0b926a7f01b34a54ea6eea78cbdbcd6a\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/PositionKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary PositionKey {\\n    /// @dev Returns the key of the position in the core library\\n    function compute(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\\n    }\\n}\\n\",\"keccak256\":\"0x1ef2fea641b75575e8e7621b90b23a8144fd22cb7013d82a592a72ab2af9527f\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"src/Controller.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport {Initializable} from \\\"lib/openzeppelin-contracts/contracts/proxy/Initializable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport {TransferHelper} from \\\"lib/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/callback/IUniswapV3MintCallback.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport {IVaultNFT} from \\\"./interfaces/IVaultNFT.sol\\\";\\nimport {BaseToken} from \\\"./libraries/BaseToken.sol\\\";\\nimport \\\"./libraries/DataType.sol\\\";\\nimport \\\"./libraries/VaultLib.sol\\\";\\nimport \\\"./libraries/PredyMath.sol\\\";\\nimport \\\"./libraries/PositionUpdater.sol\\\";\\nimport \\\"./libraries/InterestCalculator.sol\\\";\\nimport \\\"./libraries/PositionLib.sol\\\";\\nimport \\\"./libraries/logic/LiquidationLogic.sol\\\";\\nimport \\\"./libraries/logic/UpdatePositionLogic.sol\\\";\\nimport \\\"./libraries/Constants.sol\\\";\\n\\n/**\\n * Error Codes\\n * P1: caller must be vault owner\\n * P2: vault does not exists\\n * P3: caller must be operator\\n * P4: cannot create vault with 0 amount\\n */\\ncontract Controller is Initializable, IUniswapV3MintCallback {\\n    using BaseToken for BaseToken.TokenState;\\n    using SignedSafeMath for int256;\\n    using VaultLib for DataType.Vault;\\n\\n    uint256 public lastTouchedTimestamp;\\n\\n    mapping(bytes32 => DataType.PerpStatus) internal ranges;\\n\\n    mapping(uint256 => DataType.Vault) internal vaults;\\n    mapping(uint256 => DataType.SubVault) internal subVaults;\\n\\n    DataType.Context internal context;\\n    InterestCalculator.IRMParams public irmParams;\\n    InterestCalculator.YearlyPremiumParams public ypParams;\\n\\n    address public operator;\\n\\n    address private vaultNFT;\\n\\n    event OperatorUpdated(address operator);\\n    event VaultCreated(uint256 vaultId, address owner);\\n\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"P3\\\");\\n        _;\\n    }\\n\\n    modifier checkVaultExists(uint256 _vaultId) {\\n        require(_vaultId < IVaultNFT(vaultNFT).nextId(), \\\"P2\\\");\\n        _;\\n    }\\n\\n    modifier checkDeadline(uint256 deadline) {\\n        require(block.timestamp <= deadline, \\\"CH1\\\");\\n        _;\\n    }\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Callback for Uniswap V3 pool.\\n     */\\n    function uniswapV3MintCallback(\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == context.uniswapPool);\\n        if (amount0 > 0) TransferHelper.safeTransfer(context.token0, msg.sender, amount0);\\n        if (amount1 > 0) TransferHelper.safeTransfer(context.token1, msg.sender, amount1);\\n    }\\n\\n    function initialize(\\n        DataType.InitializationParams memory _initializationParams,\\n        address _factory,\\n        address _swapRouter,\\n        address _chainlinkPriceFeed,\\n        address _vaultNFT\\n    ) public initializer {\\n        require(_vaultNFT != address(0));\\n        context.feeTier = _initializationParams.feeTier;\\n        context.token0 = _initializationParams.token0;\\n        context.token1 = _initializationParams.token1;\\n        context.isMarginZero = _initializationParams.isMarginZero;\\n        context.swapRouter = _swapRouter;\\n        context.chainlinkPriceFeed = _chainlinkPriceFeed;\\n\\n        PoolAddress.PoolKey memory poolKey = PoolAddress.PoolKey({\\n            token0: context.token0,\\n            token1: context.token1,\\n            fee: context.feeTier\\n        });\\n\\n        context.uniswapPool = PoolAddress.computeAddress(_factory, poolKey);\\n\\n        vaultNFT = _vaultNFT;\\n\\n        context.nextSubVaultId = 1;\\n\\n        context.tokenState0.initialize();\\n        context.tokenState1.initialize();\\n\\n        lastTouchedTimestamp = block.timestamp;\\n\\n        operator = msg.sender;\\n\\n        ERC20(context.token0).approve(address(_swapRouter), type(uint256).max);\\n        ERC20(context.token1).approve(address(_swapRouter), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Sets new operator\\n     * @dev Only operator can call this function.\\n     * @param _newOperator The address of new operator\\n     */\\n    function setOperator(address _newOperator) external onlyOperator {\\n        require(_newOperator != address(0));\\n        operator = _newOperator;\\n\\n        emit OperatorUpdated(_newOperator);\\n    }\\n\\n    /**\\n     * @notice Updates interest rate model parameter.\\n     * @dev Only operator can call this function.\\n     * @param _irmParams New interest rate model parameter\\n     */\\n    function updateIRMParams(InterestCalculator.IRMParams memory _irmParams) external onlyOperator {\\n        irmParams = _irmParams;\\n    }\\n\\n    /**\\n     * @notice Updates interest rate model parameters for premium calculation.\\n     * @dev Only operator can call this function.\\n     * @param _irmParams New interest rate model parameter\\n     * @param _premiumParams New interest rate model parameter for variance calculation\\n     */\\n    function updateYearlyPremiumParams(\\n        InterestCalculator.IRMParams memory _irmParams,\\n        InterestCalculator.IRMParams memory _premiumParams\\n    ) external onlyOperator {\\n        ypParams.irmParams = _irmParams;\\n        ypParams.premiumParams = _premiumParams;\\n    }\\n\\n    /**\\n     * @notice Withdraws accumulated protocol fee.\\n     * @dev Only operator can call this function.\\n     * @param _amount0 amount of token0 to withdraw\\n     * @param _amount1 amount of token1 to withdraw\\n     */\\n    function withdrawProtocolFee(uint256 _amount0, uint256 _amount1) external onlyOperator {\\n        require(context.accumuratedProtocolFee0 >= _amount0 && context.accumuratedProtocolFee1 >= _amount1, \\\"P8\\\");\\n\\n        context.accumuratedProtocolFee0 -= _amount0;\\n        context.accumuratedProtocolFee1 -= _amount1;\\n\\n        if (_amount0 > 0) {\\n            TransferHelper.safeTransfer(context.token0, msg.sender, _amount0);\\n        }\\n\\n        if (_amount1 > 0) {\\n            TransferHelper.safeTransfer(context.token1, msg.sender, _amount1);\\n        }\\n    }\\n\\n    // User API\\n\\n    /**\\n     * @notice Opens new position.\\n     * @param _vaultId The id of the vault. 0 means that it creates new vault.\\n     * @param _position Position to open\\n     * @param _tradeOption Trade parameters\\n     * @param _openPositionOptions Option parameters to open position\\n     */\\n    function openPosition(\\n        uint256 _vaultId,\\n        DataType.Position memory _position,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.OpenPositionOption memory _openPositionOptions\\n    )\\n        external\\n        returns (\\n            uint256 vaultId,\\n            DataType.TokenAmounts memory requiredAmounts,\\n            DataType.TokenAmounts memory swapAmounts\\n        )\\n    {\\n        DataType.PositionUpdate[] memory positionUpdates = PositionLib.getPositionUpdatesToOpen(\\n            _position,\\n            _tradeOption.isQuoteZero,\\n            getSqrtPrice(),\\n            _openPositionOptions.swapRatio\\n        );\\n\\n        (vaultId, requiredAmounts, swapAmounts) = updatePosition(\\n            _vaultId,\\n            positionUpdates,\\n            _tradeOption,\\n            _openPositionOptions\\n        );\\n    }\\n\\n    function updatePosition(\\n        uint256 _vaultId,\\n        DataType.PositionUpdate[] memory positionUpdates,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.OpenPositionOption memory _openPositionOptions\\n    )\\n        public\\n        checkDeadline(_openPositionOptions.deadline)\\n        returns (\\n            uint256 vaultId,\\n            DataType.TokenAmounts memory requiredAmounts,\\n            DataType.TokenAmounts memory swapAmounts\\n        )\\n    {\\n        applyInterest();\\n\\n        (vaultId, requiredAmounts, swapAmounts) = _updatePosition(_vaultId, positionUpdates, _tradeOption);\\n\\n        _checkPrice(_openPositionOptions.lowerSqrtPrice, _openPositionOptions.upperSqrtPrice);\\n    }\\n\\n    /**\\n     * @notice Closes all positions in a vault.\\n     * @param _vaultId The id of the vault\\n     * @param _tradeOption Trade parameters\\n     * @param _closePositionOptions Option parameters to close position\\n     */\\n    function closeVault(\\n        uint256 _vaultId,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.ClosePositionOption memory _closePositionOptions\\n    ) external returns (DataType.TokenAmounts memory requiredAmounts, DataType.TokenAmounts memory swapAmounts) {\\n        applyInterest();\\n\\n        return closePosition(_vaultId, _getPosition(_vaultId), _tradeOption, _closePositionOptions);\\n    }\\n\\n    /**\\n     * @notice Closes all positions in sub-vault.\\n     * @param _vaultId The id of the vault\\n     * @param _subVaultIndex The index of the sub-vault\\n     * @param _tradeOption Trade parameters\\n     * @param _closePositionOptions Option parameters to close position\\n     */\\n    function closeSubVault(\\n        uint256 _vaultId,\\n        uint256 _subVaultIndex,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.ClosePositionOption memory _closePositionOptions\\n    ) external returns (DataType.TokenAmounts memory requiredAmounts, DataType.TokenAmounts memory swapAmounts) {\\n        applyInterest();\\n\\n        DataType.Position[] memory positions = new DataType.Position[](1);\\n\\n        positions[0] = _getPositionOfSubVault(_vaultId, _subVaultIndex);\\n\\n        return closePosition(_vaultId, positions, _tradeOption, _closePositionOptions);\\n    }\\n\\n    /**\\n     * @notice Closes position partially.\\n     * @param _vaultId The id of the vault\\n     * @param _positions Positions to close\\n     * @param _tradeOption Trade parameters\\n     * @param _closePositionOptions Option parameters to close position\\n     */\\n    function closePosition(\\n        uint256 _vaultId,\\n        DataType.Position[] memory _positions,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.ClosePositionOption memory _closePositionOptions\\n    )\\n        public\\n        checkDeadline(_closePositionOptions.deadline)\\n        returns (DataType.TokenAmounts memory requiredAmounts, DataType.TokenAmounts memory swapAmounts)\\n    {\\n        DataType.PositionUpdate[] memory positionUpdates = PositionLib.getPositionUpdatesToClose(\\n            _positions,\\n            _tradeOption.isQuoteZero,\\n            _closePositionOptions.swapRatio,\\n            _closePositionOptions.closeRatio,\\n            getSqrtPrice()\\n        );\\n\\n        (, requiredAmounts, swapAmounts) = _updatePosition(_vaultId, positionUpdates, _tradeOption);\\n\\n        _checkPrice(_closePositionOptions.lowerSqrtPrice, _closePositionOptions.upperSqrtPrice);\\n    }\\n\\n    /**\\n     * @notice Liquidates a vault.\\n     * @param _vaultId The id of the vault\\n     * @param _liquidationOption option parameters for liquidation call\\n     */\\n    function liquidate(uint256 _vaultId, DataType.LiquidationOption memory _liquidationOption) external {\\n        applyInterest();\\n\\n        DataType.PositionUpdate[] memory positionUpdates = PositionLib.getPositionUpdatesToClose(\\n            getPosition(_vaultId),\\n            context.isMarginZero,\\n            _liquidationOption.swapRatio,\\n            _liquidationOption.closeRatio,\\n            getSqrtPrice()\\n        );\\n\\n        _liquidate(_vaultId, positionUpdates);\\n    }\\n\\n    /**\\n     * @notice Update position in a vault.\\n     * @param _vaultId The id of the vault. 0 means that it creates new vault.\\n     * @param _positionUpdates Operation list to update position\\n     * @param _tradeOption trade parameters\\n     */\\n    function _updatePosition(\\n        uint256 _vaultId,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        DataType.TradeOption memory _tradeOption\\n    )\\n        internal\\n        checkVaultExists(_vaultId)\\n        returns (\\n            uint256 vaultId,\\n            DataType.TokenAmounts memory requiredAmounts,\\n            DataType.TokenAmounts memory swapAmounts\\n        )\\n    {\\n        applyPerpFee(_vaultId, _positionUpdates);\\n\\n        DataType.Vault storage vault;\\n        (vaultId, vault) = createOrGetVault(_vaultId, _tradeOption.quoterMode);\\n\\n        DataType.PositionUpdateResult memory positionUpdateResult = UpdatePositionLogic.updatePosition(\\n            vault,\\n            subVaults,\\n            context,\\n            ranges,\\n            _positionUpdates,\\n            _tradeOption\\n        );\\n\\n        requiredAmounts = positionUpdateResult.requiredAmounts;\\n        swapAmounts = positionUpdateResult.swapAmounts;\\n\\n        if (_vaultId == 0) {\\n            // non 0 amount of tokens required to create new vault.\\n            require(requiredAmounts.amount0 > 0 || requiredAmounts.amount1 > 0, \\\"P4\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Anyone can liquidates the vault if its vault value is less than Min. Deposit.\\n     * @param _vaultId The id of the vault\\n     * @param _positionUpdates Operation list to update position\\n     */\\n    function _liquidate(uint256 _vaultId, DataType.PositionUpdate[] memory _positionUpdates)\\n        internal\\n        checkVaultExists(_vaultId)\\n    {\\n        applyPerpFee(_vaultId, _positionUpdates);\\n\\n        LiquidationLogic.execLiquidation(vaults[_vaultId], subVaults, _positionUpdates, context, ranges);\\n    }\\n\\n    // Getter Functions\\n\\n    function getContext()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            context.isMarginZero,\\n            context.nextSubVaultId,\\n            context.uniswapPool,\\n            context.accumuratedProtocolFee0,\\n            context.accumuratedProtocolFee1\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns a Liquidity Provider Token (LPT) data\\n     * @param _rangeId The id of the LPT\\n     */\\n    function getRange(bytes32 _rangeId) external view returns (DataType.PerpStatus memory) {\\n        return ranges[_rangeId];\\n    }\\n\\n    /**\\n     * @notice Returns the status of supplied tokens.\\n     */\\n    function getTokenState() external view returns (BaseToken.TokenState memory, BaseToken.TokenState memory) {\\n        return (context.tokenState0, context.tokenState1);\\n    }\\n\\n    /**\\n     * @notice Returns the flag whether a vault can be liquidated or not.\\n     * @param _vaultId vault id\\n     * @return isLiquidatable true if the vault is liquidatable, false if the vault is safe.\\n     */\\n    function checkLiquidatable(uint256 _vaultId) external returns (bool) {\\n        applyInterest();\\n\\n        applyPerpFee(_vaultId);\\n\\n        return !LiquidationLogic.isVaultSafe(vaults[_vaultId], subVaults, context, ranges);\\n    }\\n\\n    /**\\n     * @notice Returns values and token amounts of the vault.\\n     * @param _vaultId The id of the vault\\n     */\\n    function getVaultStatus(uint256 _vaultId, uint160 _sqrtPriceX96) external returns (DataType.VaultStatus memory) {\\n        applyInterest();\\n\\n        applyPerpFee(_vaultId);\\n\\n        return vaults[_vaultId].getVaultStatus(subVaults, ranges, context, _sqrtPriceX96);\\n    }\\n\\n    function getVaultValue(uint256 _vaultId) external view returns (int256) {\\n        return LiquidationLogic.getVaultValue(vaults[_vaultId], subVaults, context, ranges);\\n    }\\n\\n    /**\\n     * @notice Returns a vault data\\n     * @param _vaultId The id of the vault\\n     */\\n    function getVault(uint256 _vaultId) external view returns (DataType.Vault memory) {\\n        return vaults[_vaultId];\\n    }\\n\\n    /**\\n     * @notice Returns a sub-vault data\\n     * @param _subVaultId The id of the sub-vault\\n     */\\n    function getSubVault(uint256 _subVaultId) external view returns (DataType.SubVault memory) {\\n        return subVaults[_subVaultId];\\n    }\\n\\n    /**\\n     * @notice Returns yearly premium to borrow Liquidity Provider Token (LPT).\\n     * The function can return yearly premium with specific utilization ratio.\\n     * @param _rangeId The id of the range\\n     * @param _utilizationRatio Utilization ratio of LPT\\n     */\\n    function calculateYearlyPremium(bytes32 _rangeId, uint256 _utilizationRatio) external view returns (uint256) {\\n        if (ranges[_rangeId].lastTouchedTimestamp == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            InterestCalculator.calculateYearlyPremium(\\n                ypParams,\\n                context,\\n                ranges[_rangeId],\\n                getSqrtPrice(),\\n                _utilizationRatio\\n            );\\n    }\\n\\n    // Private Functions\\n\\n    function createOrGetVault(uint256 _vaultId, bool _quoterMode)\\n        internal\\n        returns (uint256 vaultId, DataType.Vault storage)\\n    {\\n        if (_vaultId == 0) {\\n            vaultId = IVaultNFT(vaultNFT).mintNFT(msg.sender);\\n\\n            vaults[vaultId].vaultId = vaultId;\\n\\n            emit VaultCreated(vaultId, msg.sender);\\n        } else {\\n            vaultId = _vaultId;\\n\\n            require(IVaultNFT(vaultNFT).ownerOf(vaultId) == msg.sender || _quoterMode, \\\"P1\\\");\\n        }\\n\\n        return (vaultId, vaults[vaultId]);\\n    }\\n\\n    /**\\n     * @notice apply interest, premium and trade fee for ranges that the vault has.\\n     */\\n    function applyPerpFee(uint256 _vaultId) internal {\\n        applyPerpFee(_vaultId, new DataType.PositionUpdate[](0));\\n    }\\n\\n    /**\\n     * @notice apply interest, premium and trade fee for ranges that the vault and positionUpdates have.\\n     */\\n    function applyPerpFee(uint256 _vaultId, DataType.PositionUpdate[] memory _positionUpdates) internal {\\n        DataType.Vault memory vault = vaults[_vaultId];\\n\\n        InterestCalculator.updatePremiumGrowthForVault(\\n            vault,\\n            subVaults,\\n            ranges,\\n            context,\\n            _positionUpdates,\\n            ypParams,\\n            getSqrtPrice()\\n        );\\n\\n        PositionUpdater.updateFeeGrowth(context, vault, subVaults, ranges, _positionUpdates);\\n    }\\n\\n    function applyInterest() internal {\\n        lastTouchedTimestamp = InterestCalculator.applyInterest(context, irmParams, lastTouchedTimestamp);\\n    }\\n\\n    function _checkPrice(uint256 _lowerSqrtPrice, uint256 _upperSqrtPrice) internal view {\\n        uint256 sqrtPrice = getSqrtPrice();\\n\\n        require(_lowerSqrtPrice <= sqrtPrice && sqrtPrice <= _upperSqrtPrice, \\\"CH2\\\");\\n    }\\n\\n    /**\\n     * Gets square root of current underlying token price by quote token.\\n     */\\n    function getSqrtPrice() public view returns (uint160 sqrtPriceX96) {\\n        return UniHelper.getSqrtPrice(context.uniswapPool);\\n    }\\n\\n    function getSqrtIndexPrice() external view returns (uint160) {\\n        return LiquidationLogic.getSqrtIndexPrice(context);\\n    }\\n\\n    function getPosition(uint256 _vaultId) public view returns (DataType.Position[] memory) {\\n        return _getPosition(_vaultId);\\n    }\\n\\n    function _getPosition(uint256 _vaultId) internal view returns (DataType.Position[] memory) {\\n        DataType.Vault memory vault = vaults[_vaultId];\\n\\n        return vault.getPositions(subVaults, ranges, context);\\n    }\\n\\n    function getPositionCalculatorParams(uint256 _vaultId)\\n        public\\n        view\\n        returns (PositionCalculator.PositionCalculatorParams memory)\\n    {\\n        DataType.Vault memory vault = vaults[_vaultId];\\n\\n        return vault.getPositionCalculatorParams(subVaults, ranges, context);\\n    }\\n\\n    function _getPositionOfSubVault(uint256 _vaultId, uint256 _subVaultIndex)\\n        internal\\n        view\\n        returns (DataType.Position memory)\\n    {\\n        DataType.Vault memory vault = vaults[_vaultId];\\n\\n        return\\n            VaultLib.getPositionOfSubVault(_subVaultIndex, subVaults[vault.subVaults[_subVaultIndex]], ranges, context);\\n    }\\n}\\n\",\"keccak256\":\"0x5602acc0fa47c1b9f1a3c6dd5154f56778f899c07fdb017d984bce91959812c2\",\"license\":\"agpl-3.0\"},\"src/interfaces/IVaultNFT.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVaultNFT is IERC721 {\\n    function nextId() external returns (uint256);\\n\\n    function mintNFT(address _recipient) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x531f2fb76b25e0a66e0a986f306d3cc9ad1840010d2467eada33b1a91c5645b1\",\"license\":\"agpl-3.0\"},\"src/libraries/BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary BaseToken {\\n    using SafeMath for uint256;\\n\\n    enum InterestType {\\n        EMPTY,\\n        COMPOUND,\\n        NORMAL\\n    }\\n\\n    struct TokenState {\\n        uint256 totalCompoundDeposited;\\n        uint256 totalCompoundBorrowed;\\n        uint256 totalNormalDeposited;\\n        uint256 totalNormalBorrowed;\\n        uint256 assetScaler;\\n        uint256 debtScaler;\\n        uint256 assetGrowth;\\n        uint256 debtGrowth;\\n    }\\n\\n    struct AccountState {\\n        InterestType interestType;\\n        uint256 assetAmount;\\n        uint256 debtAmount;\\n        uint256 lastAssetGrowth;\\n        uint256 lastDebtGrowth;\\n    }\\n\\n    function initialize(TokenState storage tokenState) internal {\\n        tokenState.assetScaler = Constants.ONE;\\n        tokenState.debtScaler = Constants.ONE;\\n    }\\n\\n    function addAsset(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount,\\n        bool _isCompound\\n    ) internal returns (uint256 mintAmount) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        if (_isCompound) {\\n            require(accountState.interestType != InterestType.NORMAL, \\\"B1\\\");\\n            mintAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.assetScaler);\\n\\n            accountState.assetAmount = accountState.assetAmount.add(mintAmount);\\n            tokenState.totalCompoundDeposited = tokenState.totalCompoundDeposited.add(mintAmount);\\n\\n            accountState.interestType = InterestType.COMPOUND;\\n        } else {\\n            require(accountState.interestType != InterestType.COMPOUND, \\\"B2\\\");\\n\\n            accountState.lastAssetGrowth = tokenState.assetGrowth;\\n\\n            accountState.assetAmount += _amount;\\n            tokenState.totalNormalDeposited += _amount;\\n\\n            accountState.interestType = InterestType.NORMAL;\\n        }\\n    }\\n\\n    function addDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount,\\n        bool _isCompound\\n    ) internal returns (uint256 mintAmount) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        require(getAvailableCollateralValue(tokenState) >= _amount, \\\"B0\\\");\\n\\n        if (_isCompound) {\\n            require(accountState.interestType != InterestType.NORMAL, \\\"B1\\\");\\n            mintAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.debtScaler);\\n\\n            accountState.debtAmount = accountState.debtAmount.add(mintAmount);\\n            tokenState.totalCompoundBorrowed = tokenState.totalCompoundBorrowed.add(mintAmount);\\n\\n            accountState.interestType = InterestType.COMPOUND;\\n        } else {\\n            require(accountState.interestType != InterestType.COMPOUND, \\\"B2\\\");\\n\\n            accountState.lastDebtGrowth = tokenState.debtGrowth;\\n\\n            accountState.debtAmount += _amount;\\n            tokenState.totalNormalBorrowed += _amount;\\n\\n            accountState.interestType = InterestType.NORMAL;\\n        }\\n    }\\n\\n    function removeAsset(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            uint256 burnAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.assetScaler);\\n\\n            if (accountState.assetAmount < burnAmount) {\\n                finalBurnAmount = accountState.assetAmount;\\n                accountState.assetAmount = 0;\\n            } else {\\n                finalBurnAmount = burnAmount;\\n                accountState.assetAmount = accountState.assetAmount.sub(burnAmount);\\n            }\\n\\n            tokenState.totalCompoundDeposited = tokenState.totalCompoundDeposited.sub(finalBurnAmount);\\n\\n            finalBurnAmount = PredyMath.mulDiv(finalBurnAmount, tokenState.assetScaler, Constants.ONE);\\n        } else {\\n            if (accountState.assetAmount < _amount) {\\n                finalBurnAmount = accountState.assetAmount;\\n                accountState.assetAmount = 0;\\n            } else {\\n                finalBurnAmount = _amount;\\n                accountState.assetAmount = accountState.assetAmount.sub(_amount);\\n            }\\n\\n            tokenState.totalNormalDeposited = tokenState.totalNormalDeposited.sub(finalBurnAmount);\\n        }\\n    }\\n\\n    function removeDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            uint256 burnAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.debtScaler);\\n\\n            if (accountState.debtAmount < burnAmount) {\\n                finalBurnAmount = accountState.debtAmount;\\n                accountState.debtAmount = 0;\\n            } else {\\n                finalBurnAmount = burnAmount;\\n                accountState.debtAmount = accountState.debtAmount.sub(burnAmount);\\n            }\\n\\n            tokenState.totalCompoundBorrowed = tokenState.totalCompoundBorrowed.sub(finalBurnAmount);\\n\\n            finalBurnAmount = PredyMath.mulDiv(finalBurnAmount, tokenState.debtScaler, Constants.ONE);\\n        } else {\\n            if (accountState.debtAmount < _amount) {\\n                finalBurnAmount = accountState.debtAmount;\\n                accountState.debtAmount = 0;\\n            } else {\\n                finalBurnAmount = _amount;\\n                accountState.debtAmount = accountState.debtAmount.sub(_amount);\\n            }\\n\\n            tokenState.totalNormalBorrowed = tokenState.totalNormalBorrowed.sub(finalBurnAmount);\\n        }\\n    }\\n\\n    function refreshFee(TokenState memory tokenState, AccountState storage accountState) internal {\\n        accountState.lastAssetGrowth = tokenState.assetGrowth;\\n        accountState.lastDebtGrowth = tokenState.debtGrowth;\\n    }\\n\\n    function getAssetFee(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType != InterestType.NORMAL) {\\n            return 0;\\n        }\\n\\n        return\\n            PredyMath.mulDiv(\\n                tokenState.assetGrowth.sub(accountState.lastAssetGrowth),\\n                accountState.assetAmount,\\n                Constants.ONE\\n            );\\n    }\\n\\n    function getDebtFee(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType != InterestType.NORMAL) {\\n            return 0;\\n        }\\n\\n        return\\n            PredyMath.mulDiv(\\n                tokenState.debtGrowth.sub(accountState.lastDebtGrowth),\\n                accountState.debtAmount,\\n                Constants.ONE\\n            );\\n    }\\n\\n    // get collateral value\\n    function getAssetValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            return PredyMath.mulDiv(accountState.assetAmount, tokenState.assetScaler, Constants.ONE);\\n        } else {\\n            return accountState.assetAmount;\\n        }\\n    }\\n\\n    // get debt value\\n    function getDebtValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            return PredyMath.mulDiv(accountState.debtAmount, tokenState.debtScaler, Constants.ONE);\\n        } else {\\n            return accountState.debtAmount;\\n        }\\n    }\\n\\n    // update scaler\\n    function updateScaler(TokenState storage tokenState, uint256 _interestRate) internal returns (uint256) {\\n        if (tokenState.totalCompoundDeposited == 0 && tokenState.totalNormalDeposited == 0) {\\n            return 0;\\n        }\\n\\n        uint256 protocolFee = PredyMath.mulDiv(\\n            PredyMath.mulDiv(_interestRate, getTotalDebtValue(tokenState), Constants.ONE),\\n            Constants.RESERVE_FACTOR,\\n            Constants.ONE\\n        );\\n\\n        // supply interest rate is InterestRate * Utilization * (1 - ReserveFactor)\\n        uint256 supplyInterestRate = PredyMath.mulDiv(\\n            PredyMath.mulDiv(_interestRate, getTotalDebtValue(tokenState), getTotalCollateralValue(tokenState)),\\n            Constants.ONE - Constants.RESERVE_FACTOR,\\n            Constants.ONE\\n        );\\n\\n        // round up\\n        tokenState.debtScaler = PredyMath.mulDivUp(\\n            tokenState.debtScaler,\\n            (Constants.ONE.add(_interestRate)),\\n            Constants.ONE\\n        );\\n        tokenState.debtGrowth = tokenState.debtGrowth.add(_interestRate);\\n        tokenState.assetScaler = PredyMath.mulDiv(\\n            tokenState.assetScaler,\\n            Constants.ONE + supplyInterestRate,\\n            Constants.ONE\\n        );\\n        tokenState.assetGrowth = tokenState.assetGrowth.add(supplyInterestRate);\\n\\n        return protocolFee;\\n    }\\n\\n    function getTotalCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return\\n            PredyMath.mulDiv(tokenState.totalCompoundDeposited, tokenState.assetScaler, Constants.ONE) +\\n            tokenState.totalNormalDeposited;\\n    }\\n\\n    function getTotalDebtValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return\\n            PredyMath.mulDiv(tokenState.totalCompoundBorrowed, tokenState.debtScaler, Constants.ONE) +\\n            tokenState.totalNormalBorrowed;\\n    }\\n\\n    function getAvailableCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return getTotalCollateralValue(tokenState).sub(getTotalDebtValue(tokenState));\\n    }\\n\\n    function getUtilizationRatio(TokenState memory tokenState) internal pure returns (uint256) {\\n        if (tokenState.totalCompoundDeposited == 0 && tokenState.totalNormalBorrowed == 0) {\\n            return Constants.ONE;\\n        }\\n\\n        return PredyMath.mulDiv(getTotalDebtValue(tokenState), Constants.ONE, getTotalCollateralValue(tokenState));\\n    }\\n}\\n\",\"keccak256\":\"0xc098b2d2f7117a6d7ef864f1a3c45549cb18808c57d6ff39f2b3d94e24fbdeba\",\"license\":\"UNLICENSED\"},\"src/libraries/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nlibrary Constants {\\n    uint256 internal constant ONE = 1e18;\\n\\n    // Reserve factor is 10%\\n    uint256 internal constant RESERVE_FACTOR = 10 * 1e16;\\n\\n    // Reserve factor of LPToken is 5%\\n    uint256 internal constant LPT_RESERVE_FACTOR = 5 * 1e16;\\n\\n    // Margin option\\n    int256 internal constant MARGIN_STAY = -1;\\n    int256 internal constant MARGIN_USE = -2;\\n\\n    uint256 internal constant MAX_MARGIN_AMOUNT = 1e32;\\n    int256 internal constant MIN_MARGIN_AMOUNT = 1e6;\\n\\n    uint256 internal constant MIN_SQRT_PRICE = 79228162514264337593;\\n    uint256 internal constant MAX_SQRT_PRICE = 79228162514264337593543950336000000000;\\n\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n\\n    // 2%\\n    uint256 internal constant BASE_MIN_COLLATERAL_WITH_DEBT = 20000;\\n    // 0.00005\\n    uint256 internal constant MIN_COLLATERAL_WITH_DEBT_SLOPE = 50;\\n    // 3% scaled by 1e6\\n    uint256 internal constant BASE_LIQ_SLIPPAGE_SQRT_TOLERANCE = 15000;\\n    // 0.000022\\n    uint256 internal constant LIQ_SLIPPAGE_SQRT_SLOPE = 22;\\n}\\n\",\"keccak256\":\"0xee837fa18da0e045c59fc0d6a5f997a629d533efb349a984c9eec034ce7b5dc6\",\"license\":\"agpl-3.0\"},\"src/libraries/DataType.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\n\\nlibrary DataType {\\n    // Storage Data Type\\n    struct PerpStatus {\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 borrowedLiquidity;\\n        uint256 premiumGrowthForBorrower;\\n        uint256 premiumGrowthForLender;\\n        uint256 fee0Growth;\\n        uint256 fee1Growth;\\n        uint256 lastTouchedTimestamp;\\n    }\\n\\n    struct LPTState {\\n        bool isCollateral;\\n        bytes32 rangeId;\\n        uint128 liquidityAmount;\\n        uint256 premiumGrowthLast;\\n        uint256 fee0Last;\\n        uint256 fee1Last;\\n    }\\n\\n    struct SubVault {\\n        uint256 id;\\n        BaseToken.AccountState balance0;\\n        BaseToken.AccountState balance1;\\n        LPTState[] lpts;\\n    }\\n\\n    struct Vault {\\n        uint256 vaultId;\\n        int256 marginAmount0;\\n        int256 marginAmount1;\\n        uint256[] subVaults;\\n    }\\n\\n    struct Context {\\n        address token0;\\n        address token1;\\n        uint24 feeTier;\\n        address swapRouter;\\n        address uniswapPool;\\n        address chainlinkPriceFeed;\\n        bool isMarginZero;\\n        uint256 nextSubVaultId;\\n        BaseToken.TokenState tokenState0;\\n        BaseToken.TokenState tokenState1;\\n        uint256 accumuratedProtocolFee0;\\n        uint256 accumuratedProtocolFee1;\\n    }\\n\\n    // Parameters\\n\\n    struct InitializationParams {\\n        uint24 feeTier;\\n        address token0;\\n        address token1;\\n        bool isMarginZero;\\n    }\\n\\n    struct LPT {\\n        bool isCollateral;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n    }\\n\\n    struct Position {\\n        uint256 subVaultIndex;\\n        uint256 asset0;\\n        uint256 asset1;\\n        uint256 debt0;\\n        uint256 debt1;\\n        LPT[] lpts;\\n    }\\n\\n    enum PositionUpdateType {\\n        NOOP,\\n        DEPOSIT_TOKEN,\\n        WITHDRAW_TOKEN,\\n        BORROW_TOKEN,\\n        REPAY_TOKEN,\\n        DEPOSIT_LPT,\\n        WITHDRAW_LPT,\\n        BORROW_LPT,\\n        REPAY_LPT,\\n        SWAP_EXACT_IN,\\n        SWAP_EXACT_OUT\\n    }\\n\\n    struct PositionUpdate {\\n        PositionUpdateType positionUpdateType;\\n        uint256 subVaultIndex;\\n        bool zeroForOne;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 param0;\\n        uint256 param1;\\n    }\\n\\n    struct TradeOption {\\n        bool isLiquidationCall;\\n        bool swapAnyway;\\n        bool quoterMode;\\n        bool isQuoteZero;\\n        int256 targetMarginAmount0;\\n        int256 targetMarginAmount1;\\n        bytes metadata;\\n    }\\n\\n    struct OpenPositionOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint256 swapRatio;\\n        uint256 deadline;\\n    }\\n\\n    struct ClosePositionOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint256 swapRatio;\\n        uint256 closeRatio;\\n        uint256 deadline;\\n    }\\n\\n    struct LiquidationOption {\\n        uint256 swapRatio;\\n        uint256 closeRatio;\\n    }\\n\\n    struct SubVaultValue {\\n        uint256 assetValue;\\n        uint256 debtValue;\\n        int256 premiumValue;\\n    }\\n\\n    struct SubVaultAmount {\\n        uint256 assetAmount0;\\n        uint256 assetAmount1;\\n        uint256 debtAmount0;\\n        uint256 debtAmount1;\\n    }\\n\\n    struct SubVaultInterest {\\n        int256 assetFee0;\\n        int256 assetFee1;\\n        int256 debtFee0;\\n        int256 debtFee1;\\n    }\\n\\n    struct SubVaultPremium {\\n        uint256 receivedTradeAmount0;\\n        uint256 receivedTradeAmount1;\\n        uint256 receivedPremium;\\n        uint256 paidPremium;\\n    }\\n\\n    struct SubVaultStatus {\\n        SubVaultValue values;\\n        SubVaultAmount amount;\\n        SubVaultInterest interest;\\n        SubVaultPremium premium;\\n    }\\n\\n    struct VaultStatus {\\n        int256 positionValue;\\n        int256 marginValue;\\n        int256 minCollateral;\\n        SubVaultStatus[] subVaults;\\n    }\\n\\n    struct TokenAmounts {\\n        int256 amount0;\\n        int256 amount1;\\n    }\\n\\n    struct PositionUpdateResult {\\n        TokenAmounts requiredAmounts;\\n        TokenAmounts feeAmounts;\\n        TokenAmounts positionAmounts;\\n        TokenAmounts swapAmounts;\\n    }\\n}\\n\",\"keccak256\":\"0xcbee45b1e763189c2be6c63535d407d5ccdd6e65ca5ee9f1108cb04c897decc4\",\"license\":\"UNLICENSED\"},\"src/libraries/InterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\n\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./PriceHelper.sol\\\";\\nimport \\\"./LPTStateLib.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title InterestCalculator library\\n * @notice Implements the base logic calculating interest rate and premium.\\n */\\nlibrary InterestCalculator {\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using BaseToken for BaseToken.TokenState;\\n\\n    event InterestScalerUpdated(uint256 assetGrowth0, uint256 debtGrowth0, uint256 assetGrowth1, uint256 debtGrowth1);\\n    event PremiumGrowthUpdated(\\n        int24 lowerTick,\\n        int24 upperTick,\\n        uint256 premiumGrowthForBorrower,\\n        uint256 premiumGrowthForLender\\n    );\\n\\n    struct TickSnapshot {\\n        uint256 lastSecondsPerLiquidityInside;\\n        uint256 lastSecondsPerLiquidity;\\n    }\\n\\n    struct TickInfo {\\n        uint256 feeGrowthOutside0X128;\\n        uint256 feeGrowthOutside1X128;\\n    }\\n\\n    struct YearlyPremiumParams {\\n        IRMParams premiumParams;\\n        IRMParams irmParams;\\n        mapping(bytes32 => TickSnapshot) snapshots;\\n    }\\n\\n    struct IRMParams {\\n        uint256 baseRate;\\n        uint256 kinkRate;\\n        uint256 slope1;\\n        uint256 slope2;\\n    }\\n\\n    // update premium growth\\n    function updatePremiumGrowthForVault(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context storage _context,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        YearlyPremiumParams storage _dpmParams,\\n        uint160 _sqrtPrice\\n    ) external {\\n        // calculate fee for ranges that the vault has.\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault memory subVault = _subVaults[_vault.subVaults[i]];\\n\\n            for (uint256 j = 0; j < subVault.lpts.length; j++) {\\n                InterestCalculator.updatePremiumGrowth(\\n                    _dpmParams,\\n                    _context,\\n                    _ranges[subVault.lpts[j].rangeId],\\n                    _sqrtPrice\\n                );\\n            }\\n        }\\n\\n        // calculate fee for ranges that positionUpdates have.\\n        for (uint256 i = 0; i < _positionUpdates.length; i++) {\\n            bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdates[i].lowerTick, _positionUpdates[i].upperTick);\\n\\n            // if range is not initialized, skip calculation.\\n            if (_ranges[rangeId].lastTouchedTimestamp == 0) {\\n                continue;\\n            }\\n\\n            InterestCalculator.updatePremiumGrowth(_dpmParams, _context, _ranges[rangeId], _sqrtPrice);\\n        }\\n    }\\n\\n    // update scaler for reserves\\n    function applyInterest(\\n        DataType.Context storage _context,\\n        IRMParams memory _irmParams,\\n        uint256 lastTouchedTimestamp\\n    ) external returns (uint256) {\\n        if (block.timestamp <= lastTouchedTimestamp) {\\n            return lastTouchedTimestamp;\\n        }\\n\\n        // calculate interest for tokens\\n        uint256 interest0 = PredyMath.mulDiv(\\n            block.timestamp - lastTouchedTimestamp,\\n            calculateInterestRate(_irmParams, BaseToken.getUtilizationRatio(_context.tokenState0)),\\n            365 days\\n        );\\n\\n        uint256 interest1 = PredyMath.mulDiv(\\n            block.timestamp - lastTouchedTimestamp,\\n            calculateInterestRate(_irmParams, BaseToken.getUtilizationRatio(_context.tokenState1)),\\n            365 days\\n        );\\n\\n        _context.accumuratedProtocolFee0 = _context.accumuratedProtocolFee0.add(\\n            _context.tokenState0.updateScaler(interest0)\\n        );\\n        _context.accumuratedProtocolFee1 = _context.accumuratedProtocolFee1.add(\\n            _context.tokenState1.updateScaler(interest1)\\n        );\\n\\n        emit InterestScalerUpdated(\\n            _context.tokenState0.assetGrowth,\\n            _context.tokenState0.debtGrowth,\\n            _context.tokenState1.assetGrowth,\\n            _context.tokenState1.debtGrowth\\n        );\\n\\n        return block.timestamp;\\n    }\\n\\n    function updatePremiumGrowth(\\n        YearlyPremiumParams storage _params,\\n        DataType.Context storage _context,\\n        DataType.PerpStatus storage _perpState,\\n        uint160 _sqrtPrice\\n    ) internal {\\n        if (block.timestamp <= _perpState.lastTouchedTimestamp) {\\n            return;\\n        }\\n\\n        if (_perpState.borrowedLiquidity > 0) {\\n            uint256 perpUr = LPTStateLib.getPerpUR(address(this), _context.uniswapPool, _perpState);\\n\\n            uint256 premium = ((block.timestamp - _perpState.lastTouchedTimestamp) *\\n                calculateYearlyPremium(_params, _context, _perpState, _sqrtPrice, perpUr)) / 365 days;\\n\\n            _perpState.premiumGrowthForBorrower = _perpState.premiumGrowthForBorrower.add(premium);\\n\\n            uint256 protocolFeePerLiquidity = PredyMath.mulDiv(premium, Constants.LPT_RESERVE_FACTOR, Constants.ONE);\\n\\n            _perpState.premiumGrowthForLender = _perpState.premiumGrowthForLender.add(\\n                PredyMath.mulDiv(\\n                    premium.sub(protocolFeePerLiquidity),\\n                    _perpState.borrowedLiquidity,\\n                    LPTStateLib.getTotalLiquidityAmount(address(this), _context.uniswapPool, _perpState)\\n                )\\n            );\\n\\n            // accumurate protocol fee\\n            {\\n                uint256 protocolFee = PredyMath.mulDiv(\\n                    protocolFeePerLiquidity,\\n                    _perpState.borrowedLiquidity,\\n                    Constants.ONE\\n                );\\n\\n                if (_context.isMarginZero) {\\n                    _context.accumuratedProtocolFee0 = _context.accumuratedProtocolFee0.add(protocolFee);\\n                } else {\\n                    _context.accumuratedProtocolFee1 = _context.accumuratedProtocolFee1.add(protocolFee);\\n                }\\n            }\\n        }\\n\\n        takeSnapshot(_params, IUniswapV3Pool(_context.uniswapPool), _perpState.lowerTick, _perpState.upperTick);\\n\\n        _perpState.lastTouchedTimestamp = block.timestamp;\\n\\n        emit PremiumGrowthUpdated(\\n            _perpState.lowerTick,\\n            _perpState.upperTick,\\n            _perpState.premiumGrowthForBorrower,\\n            _perpState.premiumGrowthForLender\\n        );\\n    }\\n\\n    function calculateYearlyPremium(\\n        YearlyPremiumParams storage _params,\\n        DataType.Context memory _context,\\n        DataType.PerpStatus storage _perpState,\\n        uint160 _sqrtPrice,\\n        uint256 _perpUr\\n    ) internal view returns (uint256) {\\n        return\\n            calculateValueByStableToken(\\n                _context.isMarginZero,\\n                calculateRangeVariance(_params, IUniswapV3Pool(_context.uniswapPool), _perpState, _perpUr),\\n                calculateInterestRate(_params.irmParams, _perpUr),\\n                _sqrtPrice,\\n                _perpState.lowerTick,\\n                _perpState.upperTick\\n            );\\n    }\\n\\n    function calculateValueByStableToken(\\n        bool _isMarginZero,\\n        uint256 _variance,\\n        uint256 _interestRate,\\n        uint160 _sqrtPrice,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) internal pure returns (uint256 value) {\\n        (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            _sqrtPrice,\\n            TickMath.getSqrtRatioAtTick(_lowerTick),\\n            TickMath.getSqrtRatioAtTick(_upperTick),\\n            1e18\\n        );\\n\\n        value = uint256(PriceHelper.getValue(_isMarginZero, _sqrtPrice, int256(amount0), int256(amount1)));\\n\\n        // value (usd/liquidity)\\n        value = value.mul(_interestRate).div(1e18);\\n\\n        // premium = (value of virtual liquidity) * variance / L\\n        // where `(value of virtual liquidity) = 2 * L * sqrt{price}` and `L = 1e18`.\\n        // value per 1 underlying token is `2 * sqrt{price/1e18}`\\n        // so value for `L=1e18` is `2 * sqrt{price/1e18} * L`\\n        // then\\n        // `(value of virtual liquidity) = 2 * sqrt{price/1e18}*1e18 = 2 * sqrt{price * 1e18 / PRICE_SCALER}`\\n        // Since variance is multiplied by 2 in advance, final formula is below.\\n\\n        uint256 price = PriceHelper.decodeSqrtPriceX96(_isMarginZero, _sqrtPrice);\\n\\n        value = value.add((PredyMath.sqrt(price.mul(1e18 / PriceHelper.PRICE_SCALER)).mul(_variance)).div(1e18));\\n    }\\n\\n    function calculateRangeVariance(\\n        YearlyPremiumParams storage _params,\\n        IUniswapV3Pool uniPool,\\n        DataType.PerpStatus memory _perpState,\\n        uint256 _utilizationRatio\\n    ) internal view returns (uint256) {\\n        uint256 activeRatio = getRangeActiveRatio(_params, uniPool, _perpState.lowerTick, _perpState.upperTick);\\n\\n        return calculateInterestRate(_params.premiumParams, _utilizationRatio).mul(activeRatio) / Constants.ONE;\\n    }\\n\\n    function getRangeActiveRatio(\\n        YearlyPremiumParams storage _params,\\n        IUniswapV3Pool _uniPool,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) internal view returns (uint256) {\\n        (uint256 secondsPerLiquidityInside, uint256 secondsPerLiquidity) = getSecondsPerLiquidity(\\n            _uniPool,\\n            _lowerTick,\\n            _upperTick\\n        );\\n\\n        bytes32 key = keccak256(abi.encodePacked(_lowerTick, _upperTick));\\n\\n        if (\\n            secondsPerLiquidityInside <= _params.snapshots[key].lastSecondsPerLiquidityInside ||\\n            secondsPerLiquidity <= _params.snapshots[key].lastSecondsPerLiquidity\\n        ) {\\n            return 0;\\n        }\\n\\n        return\\n            (secondsPerLiquidityInside - _params.snapshots[key].lastSecondsPerLiquidityInside).mul(Constants.ONE) /\\n            (secondsPerLiquidity - _params.snapshots[key].lastSecondsPerLiquidity);\\n    }\\n\\n    function takeSnapshot(\\n        YearlyPremiumParams storage _params,\\n        IUniswapV3Pool _uniPool,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) internal {\\n        (uint256 secondsPerLiquidityInside, uint256 secondsPerLiquidity) = getSecondsPerLiquidity(\\n            _uniPool,\\n            _lowerTick,\\n            _upperTick\\n        );\\n\\n        bytes32 key = keccak256(abi.encodePacked(_lowerTick, _upperTick));\\n\\n        _params.snapshots[key].lastSecondsPerLiquidityInside = secondsPerLiquidityInside;\\n        _params.snapshots[key].lastSecondsPerLiquidity = secondsPerLiquidity;\\n    }\\n\\n    function getSecondsPerLiquidity(\\n        IUniswapV3Pool uniPool,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) internal view returns (uint256 secondsPerLiquidityInside, uint256 secondsPerLiquidity) {\\n        uint32[] memory secondsAgos = new uint32[](1);\\n\\n        (, uint160[] memory secondsPerLiquidityCumulativeX128s) = uniPool.observe(secondsAgos);\\n\\n        secondsPerLiquidity = secondsPerLiquidityCumulativeX128s[0];\\n\\n        (, secondsPerLiquidityInside, ) = uniPool.snapshotCumulativesInside(_lowerTick, _upperTick);\\n    }\\n\\n    function calculateInterestRate(IRMParams memory _irmParams, uint256 _utilizationRatio)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 ir = _irmParams.baseRate;\\n\\n        if (_utilizationRatio <= _irmParams.kinkRate) {\\n            ir += (_utilizationRatio * _irmParams.slope1) / Constants.ONE;\\n        } else {\\n            ir += (_irmParams.kinkRate * _irmParams.slope1) / Constants.ONE;\\n            ir += (_irmParams.slope2 * (_utilizationRatio - _irmParams.kinkRate)) / Constants.ONE;\\n        }\\n\\n        return ir;\\n    }\\n}\\n\",\"keccak256\":\"0x265710cfa264028dc09ea18f07a3d4328ef65e11a9866f7a7b0451fc709b676a\",\"license\":\"UNLICENSED\"},\"src/libraries/LPTStateLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/v3-periphery/contracts/libraries/PositionKey.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary LPTStateLib {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice register new LPT\\n     */\\n    function registerNewLPTState(\\n        DataType.PerpStatus storage _range,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) internal {\\n        _range.lowerTick = _lowerTick;\\n        _range.upperTick = _upperTick;\\n        _range.lastTouchedTimestamp = block.timestamp;\\n    }\\n\\n    function getRangeKey(int24 _lower, int24 _upper) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_lower, _upper));\\n    }\\n\\n    function getPerpStatus(\\n        address _controllerAddress,\\n        address _uniswapPool,\\n        DataType.PerpStatus memory _perpState\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            getTotalLiquidityAmount(_controllerAddress, _uniswapPool, _perpState),\\n            _perpState.borrowedLiquidity,\\n            getPerpUR(_controllerAddress, _uniswapPool, _perpState)\\n        );\\n    }\\n\\n    function getPerpUR(\\n        address _controllerAddress,\\n        address _uniswapPool,\\n        DataType.PerpStatus memory _perpState\\n    ) internal view returns (uint256) {\\n        return\\n            PredyMath.mulDiv(\\n                _perpState.borrowedLiquidity,\\n                1e18,\\n                getTotalLiquidityAmount(_controllerAddress, _uniswapPool, _perpState)\\n            );\\n    }\\n\\n    function getAvailableLiquidityAmount(\\n        address _controllerAddress,\\n        address _uniswapPool,\\n        DataType.PerpStatus memory _perpState\\n    ) internal view returns (uint256) {\\n        bytes32 positionKey = PositionKey.compute(_controllerAddress, _perpState.lowerTick, _perpState.upperTick);\\n\\n        (uint128 liquidity, , , , ) = IUniswapV3Pool(_uniswapPool).positions(positionKey);\\n\\n        return liquidity;\\n    }\\n\\n    function getTotalLiquidityAmount(\\n        address _controllerAddress,\\n        address _uniswapPool,\\n        DataType.PerpStatus memory _perpState\\n    ) internal view returns (uint256) {\\n        return getAvailableLiquidityAmount(_controllerAddress, _uniswapPool, _perpState) + _perpState.borrowedLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0x46f2d0d3ee1aae012ccd0ec2939500f7cfb631515a9a79488db30423b31f7a5c\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./PriceHelper.sol\\\";\\n\\n/**\\n * @title PositionCalculator library\\n * @notice Implements the base logic calculating Min. Deposit and value of positions.\\n */\\nlibrary PositionCalculator {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n    // sqrt{1.18} = 1.08627804912\\n    uint160 internal constant UPPER_E8 = 108627805;\\n    // sqrt{1/1.18} = 0.92057461789\\n    uint160 internal constant LOWER_E8 = 92057462;\\n\\n    uint256 internal constant MAX_NUM_OF_LPTS = 16;\\n\\n    struct PositionCalculatorParams {\\n        int256 marginAmount0;\\n        int256 marginAmount1;\\n        uint256 asset0;\\n        uint256 asset1;\\n        uint256 debt0;\\n        uint256 debt1;\\n        DataType.LPT[] lpts;\\n    }\\n\\n    /**\\n     * @notice Calculates Min. Deposit for a vault.\\n     * MinDeposit = vaultPositionValue - minValue + Max{0.00006 * Sqrt{DebtValue}, 0.02} * DebtValue\\n     * @param _params position object\\n     * @param _sqrtPrice square root price to calculate\\n     * @param _isMarginZero whether the stable token is token0 or token1\\n     */\\n    function calculateMinDeposit(\\n        PositionCalculatorParams memory _params,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (int256 minDeposit) {\\n        require(\\n            Constants.MIN_SQRT_PRICE <= _sqrtPrice && _sqrtPrice <= Constants.MAX_SQRT_PRICE,\\n            \\\"Out of sqrtprice range\\\"\\n        );\\n\\n        require(_params.lpts.length <= MAX_NUM_OF_LPTS, \\\"Exceeds max num of LPTs\\\");\\n\\n        int256 vaultPositionValue = calculateValue(_params, _sqrtPrice, _isMarginZero);\\n\\n        int256 minValue = calculateMinValue(_params, _sqrtPrice, _isMarginZero);\\n\\n        (, , uint256 debtValue) = calculateCollateralAndDebtValue(_params, _sqrtPrice, _isMarginZero, false);\\n\\n        minDeposit = int256(calculateRequiredCollateralWithDebt(debtValue).mul(debtValue).div(1e6))\\n            .add(vaultPositionValue)\\n            .sub(minValue);\\n\\n        if (minDeposit < Constants.MIN_MARGIN_AMOUNT && debtValue > 0) {\\n            minDeposit = Constants.MIN_MARGIN_AMOUNT;\\n        }\\n    }\\n\\n    function calculateRequiredCollateralWithDebt(uint256 _debtValue) internal pure returns (uint256) {\\n        return\\n            PredyMath.max(\\n                Constants.MIN_COLLATERAL_WITH_DEBT_SLOPE.mul(PredyMath.sqrt(_debtValue * 1e6)).div(1e6),\\n                Constants.BASE_MIN_COLLATERAL_WITH_DEBT\\n            );\\n    }\\n\\n    /**\\n     * @notice Calculates square root of min price (a * b)^(1/4)\\n     * P_{min}^(1/2) = (a * b)^(1/4)\\n     */\\n    function calculateMinSqrtPrice(int24 _lowerTick, int24 _upperTick) internal pure returns (uint160) {\\n        return uint160(TickMath.getSqrtRatioAtTick((_lowerTick + _upperTick) / 2));\\n    }\\n\\n    /**\\n     * @notice Calculates minValue.\\n     * MinValue is minimal value of following values.\\n     * 1. value of at P*1.18\\n     * 2. value of at P/1.18\\n     * 3. values of at P_{min} of LPTs\\n     */\\n    function calculateMinValue(\\n        PositionCalculatorParams memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (int256 minValue) {\\n        minValue = type(int256).max;\\n        uint256 sqrtPriceLower = uint256(LOWER_E8).mul(_sqrtPrice) / 1e8;\\n        uint256 sqrtPriceUpper = uint256(UPPER_E8).mul(_sqrtPrice) / 1e8;\\n\\n        require(sqrtPriceLower < type(uint160).max);\\n        require(sqrtPriceUpper < type(uint160).max);\\n\\n        require(TickMath.MIN_SQRT_RATIO < _sqrtPrice && _sqrtPrice < TickMath.MAX_SQRT_RATIO, \\\"Out of sqrtprice range\\\");\\n\\n        if (sqrtPriceLower < TickMath.MIN_SQRT_RATIO) {\\n            sqrtPriceLower = TickMath.MIN_SQRT_RATIO;\\n        }\\n\\n        if (sqrtPriceUpper > TickMath.MAX_SQRT_RATIO) {\\n            sqrtPriceUpper = TickMath.MAX_SQRT_RATIO;\\n        }\\n\\n        {\\n            // 1. check value of at P*1.18\\n            int256 value = calculateValue(_position, uint160(sqrtPriceUpper), _isMarginZero);\\n            if (minValue > value) {\\n                minValue = value;\\n            }\\n        }\\n\\n        {\\n            // 2. check value of at P/1.18\\n            int256 value = calculateValue(_position, uint160(sqrtPriceLower), _isMarginZero);\\n            if (minValue > value) {\\n                minValue = value;\\n            }\\n        }\\n\\n        // 3. check values of at P_{min} of LPTs\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n\\n            if (!lpt.isCollateral) {\\n                uint160 minSqrtPrice = calculateMinSqrtPrice(lpt.upperTick, lpt.lowerTick);\\n\\n                if (minSqrtPrice < sqrtPriceLower || sqrtPriceUpper < minSqrtPrice) {\\n                    continue;\\n                }\\n\\n                int256 value = calculateValue(_position, minSqrtPrice, _isMarginZero, true);\\n\\n                if (minValue > value) {\\n                    minValue = value;\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateValue(\\n        PositionCalculatorParams memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (int256 value) {\\n        return calculateValue(_position, _sqrtPrice, _isMarginZero, false);\\n    }\\n\\n    function calculateValue(\\n        PositionCalculatorParams memory _position,\\n        uint160 _sqrtPrice,\\n        bool isMarginZero,\\n        bool _isMinPrice\\n    ) internal pure returns (int256 value) {\\n        (int256 marginValue, uint256 assetValue, uint256 debtValue) = calculateCollateralAndDebtValue(\\n            _position,\\n            _sqrtPrice,\\n            isMarginZero,\\n            _isMinPrice\\n        );\\n\\n        return marginValue + int256(assetValue) - int256(debtValue);\\n    }\\n\\n    function calculateCollateralAndDebtValue(\\n        PositionCalculatorParams memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero,\\n        bool _isMinPrice\\n    )\\n        internal\\n        pure\\n        returns (\\n            int256 marginValue,\\n            uint256 assetValue,\\n            uint256 debtValue\\n        )\\n    {\\n        marginValue = PriceHelper.getValue(_isMarginZero, _sqrtPrice, _position.marginAmount0, _position.marginAmount1);\\n\\n        (\\n            uint256 assetAmount0,\\n            uint256 assetAmount1,\\n            uint256 debtAmount0,\\n            uint256 debtAmount1\\n        ) = calculateCollateralAndDebtAmount(_position, _sqrtPrice, _isMinPrice);\\n\\n        assetValue = uint256(\\n            PriceHelper.getValue(_isMarginZero, _sqrtPrice, int256(assetAmount0), int256(assetAmount1))\\n        );\\n\\n        debtValue = uint256(PriceHelper.getValue(_isMarginZero, _sqrtPrice, int256(debtAmount0), int256(debtAmount1)));\\n    }\\n\\n    function calculateCollateralAndDebtAmount(\\n        PositionCalculatorParams memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMinPrice\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 assetAmount0,\\n            uint256 assetAmount1,\\n            uint256 debtAmount0,\\n            uint256 debtAmount1\\n        )\\n    {\\n        assetAmount0 = _position.asset0;\\n        assetAmount1 = _position.asset1;\\n        debtAmount0 = _position.debt0;\\n        debtAmount1 = _position.debt1;\\n\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n\\n            uint160 sqrtLowerPrice = TickMath.getSqrtRatioAtTick(lpt.lowerTick);\\n            uint160 sqrtUpperPrice = TickMath.getSqrtRatioAtTick(lpt.upperTick);\\n\\n            if (_isMinPrice && !lpt.isCollateral && sqrtLowerPrice <= _sqrtPrice && _sqrtPrice <= sqrtUpperPrice) {\\n                debtAmount1 = debtAmount1.add(\\n                    (\\n                        uint256(lpt.liquidity).mul(\\n                            TickMath.getSqrtRatioAtTick(lpt.upperTick) - TickMath.getSqrtRatioAtTick(lpt.lowerTick)\\n                        )\\n                    ).div(Q96)\\n                );\\n                continue;\\n            }\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                sqrtLowerPrice,\\n                sqrtUpperPrice,\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                assetAmount0 = assetAmount0.add(amount0);\\n                assetAmount1 = assetAmount1.add(amount1);\\n            } else {\\n                debtAmount0 = debtAmount0.add(amount0);\\n                debtAmount1 = debtAmount1.add(amount1);\\n            }\\n        }\\n    }\\n\\n    function add(PositionCalculatorParams memory _params, DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (PositionCalculatorParams memory _newParams)\\n    {\\n        uint256 numLPTs = _params.lpts.length + _position.lpts.length;\\n\\n        DataType.LPT[] memory lpts = new DataType.LPT[](numLPTs);\\n\\n        _newParams = PositionCalculatorParams(\\n            _params.marginAmount0,\\n            _params.marginAmount1,\\n            _params.asset0,\\n            _params.asset1,\\n            _params.debt0,\\n            _params.debt1,\\n            lpts\\n        );\\n\\n        _newParams.asset0 = _newParams.asset0.add(_position.asset0);\\n        _newParams.asset1 = _newParams.asset1.add(_position.asset1);\\n        _newParams.debt0 = _newParams.debt0.add(_position.debt0);\\n        _newParams.debt1 = _newParams.debt1.add(_position.debt1);\\n\\n        uint256 k;\\n\\n        for (uint256 j = 0; j < _params.lpts.length; j++) {\\n            _newParams.lpts[k] = _params.lpts[j];\\n            k++;\\n        }\\n        for (uint256 j = 0; j < _position.lpts.length; j++) {\\n            _newParams.lpts[k] = _position.lpts[j];\\n            k++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x699ce95f60ab5340825b7b94adb80852b6a28df73ba867d12f5239d7b537c571\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary PositionLib {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n\\n    function getPositionUpdatesToOpen(\\n        DataType.Position memory _position,\\n        bool _isQuoteZero,\\n        uint160 _sqrtPrice,\\n        uint256 _swapRatio\\n    ) external pure returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        uint256 swapIndex;\\n\\n        (positionUpdates, swapIndex) = calculatePositionUpdatesToOpen(_position);\\n\\n        (int256 requiredAmount0, int256 requiredAmount1) = getRequiredTokenAmountsToOpen(_position, _sqrtPrice);\\n\\n        if (_swapRatio == 0) {\\n            return positionUpdates;\\n        }\\n\\n        if (_isQuoteZero) {\\n            if (requiredAmount1 > 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    true,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(requiredAmount1),\\n                    0\\n                );\\n            } else if (requiredAmount1 < 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(-requiredAmount1),\\n                    0\\n                );\\n            }\\n        } else {\\n            if (requiredAmount0 > 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(requiredAmount0),\\n                    0\\n                );\\n            } else if (requiredAmount0 < 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    true,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(-requiredAmount0),\\n                    0\\n                );\\n            }\\n        }\\n    }\\n\\n    function getPositionUpdatesToClose(\\n        DataType.Position[] memory _positions,\\n        bool _isQuoteZero,\\n        uint256 _swapRatio,\\n        uint256 _closeRatio,\\n        uint160 _sqrtPrice\\n    ) external pure returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        uint256 swapIndex;\\n\\n        (positionUpdates, swapIndex) = calculatePositionUpdatesToClose(_positions, _closeRatio);\\n\\n        (int256 requiredAmount0, int256 requiredAmount1) = getRequiredTokenAmountsToClose(_positions, _sqrtPrice);\\n\\n        if (_swapRatio == 0) {\\n            return positionUpdates;\\n        }\\n\\n        if (!_isQuoteZero && requiredAmount0 < 0) {\\n            positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                0,\\n                true,\\n                0,\\n                0,\\n                0,\\n                (uint256(-requiredAmount0) * _swapRatio) / 100,\\n                0\\n            );\\n        } else if (_isQuoteZero && requiredAmount1 < 0) {\\n            positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                0,\\n                false,\\n                0,\\n                0,\\n                0,\\n                (uint256(-requiredAmount1) * _swapRatio) / 100,\\n                0\\n            );\\n        }\\n    }\\n\\n    function concat(DataType.Position[] memory _positions, DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (DataType.Position memory)\\n    {\\n        DataType.Position[] memory positions = new DataType.Position[](_positions.length + 1);\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            positions[i] = _positions[i];\\n        }\\n\\n        positions[_positions.length] = _position;\\n\\n        return concat(positions);\\n    }\\n\\n    function concat(DataType.Position[] memory _positions) internal pure returns (DataType.Position memory _position) {\\n        uint256 numLPTs;\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            numLPTs += _positions[i].lpts.length;\\n        }\\n\\n        DataType.LPT[] memory lpts = new DataType.LPT[](numLPTs);\\n\\n        _position = DataType.Position(0, 0, 0, 0, 0, lpts);\\n\\n        uint256 k;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            _position.asset0 += _positions[i].asset0;\\n            _position.asset1 += _positions[i].asset1;\\n            _position.debt0 += _positions[i].debt0;\\n            _position.debt1 += _positions[i].debt1;\\n\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                _position.lpts[k] = _positions[i].lpts[j];\\n                k++;\\n            }\\n        }\\n    }\\n\\n    function emptyPosition() internal pure returns (DataType.Position memory) {\\n        DataType.LPT[] memory lpts = new DataType.LPT[](0);\\n        return DataType.Position(0, 0, 0, 0, 0, lpts);\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to open position.\\n     * @param _destPosition position to open\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmountsToOpen(DataType.Position memory _destPosition, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256, int256)\\n    {\\n        return getRequiredTokenAmounts(emptyPosition(), _destPosition, _sqrtPrice);\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to close position.\\n     * @param _srcPosition position to close\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmountsToClose(DataType.Position memory _srcPosition, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256, int256)\\n    {\\n        return getRequiredTokenAmounts(_srcPosition, emptyPosition(), _sqrtPrice);\\n    }\\n\\n    function getRequiredTokenAmountsToClose(DataType.Position[] memory _srcPositions, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256 requiredAmount0, int256 requiredAmount1)\\n    {\\n        for (uint256 i = 0; i < _srcPositions.length; i++) {\\n            (int256 a0, int256 a1) = getRequiredTokenAmounts(_srcPositions[i], emptyPosition(), _sqrtPrice);\\n            requiredAmount0 += a0;\\n            requiredAmount1 += a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to update position.\\n     * @param _srcPosition position to update\\n     * @param _destPosition desired position\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmounts(\\n        DataType.Position memory _srcPosition,\\n        DataType.Position memory _destPosition,\\n        uint160 _sqrtPrice\\n    ) internal pure returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        requiredAmount0 = requiredAmount0.sub(int256(_srcPosition.asset0));\\n        requiredAmount1 = requiredAmount1.sub(int256(_srcPosition.asset1));\\n        requiredAmount0 = requiredAmount0.add(int256(_srcPosition.debt0));\\n        requiredAmount1 = requiredAmount1.add(int256(_srcPosition.debt1));\\n\\n        requiredAmount0 = requiredAmount0.add(int256(_destPosition.asset0));\\n        requiredAmount1 = requiredAmount1.add(int256(_destPosition.asset1));\\n        requiredAmount0 = requiredAmount0.sub(int256(_destPosition.debt0));\\n        requiredAmount1 = requiredAmount1.sub(int256(_destPosition.debt1));\\n\\n        for (uint256 i = 0; i < _srcPosition.lpts.length; i++) {\\n            DataType.LPT memory lpt = _srcPosition.lpts[i];\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(lpt.lowerTick),\\n                TickMath.getSqrtRatioAtTick(lpt.upperTick),\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            } else {\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _destPosition.lpts.length; i++) {\\n            DataType.LPT memory lpt = _destPosition.lpts[i];\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(lpt.lowerTick),\\n                TickMath.getSqrtRatioAtTick(lpt.upperTick),\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            } else {\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            }\\n        }\\n    }\\n\\n    function calculateLengthOfPositionUpdates(DataType.Position[] memory _positions)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            length += calculateLengthOfPositionUpdates(_positions[i]);\\n        }\\n    }\\n\\n    function calculateLengthOfPositionUpdates(DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        length = _position.lpts.length;\\n\\n        if (_position.asset0 > 0 || _position.asset1 > 0) {\\n            length += 1;\\n        }\\n\\n        if (_position.debt0 > 0 || _position.debt1 > 0) {\\n            length += 1;\\n        }\\n    }\\n\\n    function calculatePositionUpdatesToOpen(DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (DataType.PositionUpdate[] memory positionUpdates, uint256 swapIndex)\\n    {\\n        positionUpdates = new DataType.PositionUpdate[](calculateLengthOfPositionUpdates(_position) + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n            if (!lpt.isCollateral) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.BORROW_LPT,\\n                    _position.subVaultIndex,\\n                    false,\\n                    lpt.liquidity,\\n                    lpt.lowerTick,\\n                    lpt.upperTick,\\n                    0,\\n                    0\\n                );\\n                index++;\\n            }\\n        }\\n\\n        if (_position.asset0 > 0 || _position.asset1 > 0) {\\n            positionUpdates[index] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.DEPOSIT_TOKEN,\\n                _position.subVaultIndex,\\n                false,\\n                0,\\n                0,\\n                0,\\n                _position.asset0,\\n                _position.asset1\\n            );\\n            index++;\\n        }\\n\\n        if (_position.debt0 > 0 || _position.debt1 > 0) {\\n            positionUpdates[index] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.BORROW_TOKEN,\\n                _position.subVaultIndex,\\n                false,\\n                0,\\n                0,\\n                0,\\n                _position.debt0,\\n                _position.debt1\\n            );\\n            index++;\\n        }\\n\\n        swapIndex = index;\\n        index++;\\n\\n        for (uint256 i; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n            if (lpt.isCollateral) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.DEPOSIT_LPT,\\n                    _position.subVaultIndex,\\n                    false,\\n                    lpt.liquidity,\\n                    lpt.lowerTick,\\n                    lpt.upperTick,\\n                    0,\\n                    0\\n                );\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function calculatePositionUpdatesToClose(DataType.Position[] memory _positions, uint256 _closeRatio)\\n        internal\\n        pure\\n        returns (DataType.PositionUpdate[] memory positionUpdates, uint256 swapIndex)\\n    {\\n        positionUpdates = new DataType.PositionUpdate[](calculateLengthOfPositionUpdates(_positions) + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                DataType.LPT memory lpt = _positions[i].lpts[j];\\n                if (lpt.isCollateral) {\\n                    positionUpdates[index] = DataType.PositionUpdate(\\n                        DataType.PositionUpdateType.WITHDRAW_LPT,\\n                        _positions[i].subVaultIndex,\\n                        false,\\n                        uint256(lpt.liquidity).mul(_closeRatio).div(1e4).toUint128(),\\n                        lpt.lowerTick,\\n                        lpt.upperTick,\\n                        0,\\n                        0\\n                    );\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        swapIndex = index;\\n        index++;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                DataType.LPT memory lpt = _positions[i].lpts[j];\\n                if (!lpt.isCollateral) {\\n                    positionUpdates[index] = DataType.PositionUpdate(\\n                        DataType.PositionUpdateType.REPAY_LPT,\\n                        _positions[i].subVaultIndex,\\n                        false,\\n                        uint256(lpt.liquidity).mul(_closeRatio).div(1e4).toUint128(),\\n                        lpt.lowerTick,\\n                        lpt.upperTick,\\n                        0,\\n                        0\\n                    );\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            if (_positions[i].asset0 > 0 || _positions[i].asset1 > 0) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.WITHDRAW_TOKEN,\\n                    _positions[i].subVaultIndex,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    _positions[i].asset0.mul(_closeRatio).div(1e4),\\n                    _positions[i].asset1.mul(_closeRatio).div(1e4)\\n                );\\n                index++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            if (_positions[i].debt0 > 0 || _positions[i].debt1 > 0) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.REPAY_TOKEN,\\n                    _positions[i].subVaultIndex,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    _positions[i].debt0.mul(_closeRatio).div(1e4),\\n                    _positions[i].debt1.mul(_closeRatio).div(1e4)\\n                );\\n                index++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d7e2763a764936194ac30806013675724107366b5bf2a65e8d4b56c69da7d56\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/PositionKey.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./VaultLib.sol\\\";\\nimport \\\"./InterestCalculator.sol\\\";\\nimport \\\"./LPTStateLib.sol\\\";\\nimport \\\"./UniHelper.sol\\\";\\n\\n/*\\n * Error Codes\\n * PU1: reduce only\\n * PU2: margin must not be negative\\n */\\nlibrary PositionUpdater {\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for uint128;\\n    using SafeCast for int256;\\n    using BaseToken for BaseToken.TokenState;\\n    using VaultLib for DataType.Vault;\\n    using VaultLib for DataType.SubVault;\\n    using LPTStateLib for DataType.PerpStatus;\\n\\n    event TokenDeposited(uint256 indexed subVaultId, uint256 amount0, uint256 amount1);\\n    event TokenWithdrawn(uint256 indexed subVaultId, uint256 amount0, uint256 amount1);\\n    event TokenBorrowed(uint256 indexed subVaultId, uint256 amount0, uint256 amount1);\\n    event TokenRepaid(uint256 indexed subVaultId, uint256 amount0, uint256 amount1);\\n    event LPTDeposited(\\n        uint256 indexed subVaultId,\\n        bytes32 rangeId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event LPTWithdrawn(\\n        uint256 indexed subVaultId,\\n        bytes32 rangeId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event LPTBorrowed(uint256 indexed subVaultId, bytes32 rangeId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    event LPTRepaid(uint256 indexed subVaultId, bytes32 rangeId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    event FeeUpdated(uint256 indexed subVaultId, int256 fee0, int256 fee1);\\n    event TokenSwap(\\n        uint256 indexed vaultId,\\n        uint256 subVaultId,\\n        bool zeroForOne,\\n        uint256 srcAmount,\\n        uint256 destAmount\\n    );\\n    event MarginUpdated(uint256 indexed vaultId, int256 marginAmount0, int256 marginAmount1);\\n    event PositionUpdated(uint256 vaultId, DataType.PositionUpdateResult positionUpdateResult, bytes metadata);\\n    event FeeGrowthUpdated(int24 lowerTick, int24 upperTick, uint256 fee0Growth, uint256 fee1Growth);\\n\\n    /**\\n     * @notice update position and return required token amounts.\\n     */\\n    function updatePosition(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context storage _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        DataType.TradeOption memory _tradeOption\\n    ) external returns (DataType.PositionUpdateResult memory result) {\\n        result.feeAmounts = collectFee(_context, _vault, _subVaults, _ranges);\\n        result.requiredAmounts.amount0 = result.feeAmounts.amount0;\\n        result.requiredAmounts.amount1 = result.feeAmounts.amount1;\\n\\n        for (uint256 i = 0; i < _positionUpdates.length; i++) {\\n            DataType.PositionUpdate memory positionUpdate = _positionUpdates[i];\\n\\n            // create new sub-vault if needed\\n            DataType.SubVault storage subVault = _vault.addSubVault(_subVaults, _context, positionUpdate.subVaultIndex);\\n\\n            if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.DEPOSIT_TOKEN) {\\n                require(!_tradeOption.isLiquidationCall, \\\"PU1\\\");\\n\\n                depositTokens(subVault, _context, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(int256(positionUpdate.param0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(int256(positionUpdate.param1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.WITHDRAW_TOKEN) {\\n                (uint256 amount0, uint256 amount1) = withdrawTokens(subVault, _context, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.sub(int256(amount0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.sub(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.BORROW_TOKEN) {\\n                require(!_tradeOption.isLiquidationCall, \\\"PU1\\\");\\n\\n                borrowTokens(subVault, _context, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.sub(int256(positionUpdate.param0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.sub(int256(positionUpdate.param1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.REPAY_TOKEN) {\\n                (uint256 amount0, uint256 amount1) = repayTokens(subVault, _context, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(int256(amount0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.DEPOSIT_LPT) {\\n                require(!_tradeOption.isLiquidationCall, \\\"PU1\\\");\\n\\n                (uint256 amount0, uint256 amount1) = depositLPT(subVault, _context, _ranges, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(int256(amount0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.WITHDRAW_LPT) {\\n                (uint256 amount0, uint256 amount1) = withdrawLPT(subVault, _context, _ranges, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.sub(int256(amount0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.sub(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.BORROW_LPT) {\\n                require(!_tradeOption.isLiquidationCall, \\\"PU1\\\");\\n\\n                (uint256 amount0, uint256 amount1) = borrowLPT(subVault, _context, _ranges, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.sub(int256(amount0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.sub(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.REPAY_LPT) {\\n                (uint256 amount0, uint256 amount1) = repayLPT(subVault, _context, _ranges, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(int256(amount0));\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_IN) {\\n                (int256 amount0, int256 amount1) = swapExactIn(_vault, _context, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(amount0);\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(amount1);\\n\\n                result.swapAmounts.amount0 = result.swapAmounts.amount0.add(amount0);\\n                result.swapAmounts.amount1 = result.swapAmounts.amount1.add(amount1);\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_OUT) {\\n                (int256 amount0, int256 amount1) = swapExactOut(_vault, _context, positionUpdate);\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(amount0);\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(amount1);\\n\\n                result.swapAmounts.amount0 = result.swapAmounts.amount0.add(amount0);\\n                result.swapAmounts.amount1 = result.swapAmounts.amount1.add(amount1);\\n            }\\n        }\\n\\n        if (_tradeOption.swapAnyway) {\\n            DataType.PositionUpdate memory positionUpdate = swapAnyway(\\n                result.requiredAmounts.amount0,\\n                result.requiredAmounts.amount1,\\n                _tradeOption.isQuoteZero,\\n                _context.feeTier\\n            );\\n            int256 amount0;\\n            int256 amount1;\\n\\n            if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_IN) {\\n                (amount0, amount1) = swapExactIn(_vault, _context, positionUpdate);\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_OUT) {\\n                (amount0, amount1) = swapExactOut(_vault, _context, positionUpdate);\\n            }\\n\\n            result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(amount0);\\n            result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(amount1);\\n\\n            result.swapAmounts.amount0 = result.swapAmounts.amount0.add(amount0);\\n            result.swapAmounts.amount1 = result.swapAmounts.amount1.add(amount1);\\n        }\\n\\n        {\\n            // calculate position amounts\\n            result.positionAmounts.amount0 = result.requiredAmounts.amount0.sub(result.swapAmounts.amount0).sub(\\n                result.feeAmounts.amount0\\n            );\\n            result.positionAmounts.amount1 = result.requiredAmounts.amount1.sub(result.swapAmounts.amount1).sub(\\n                result.feeAmounts.amount1\\n            );\\n        }\\n\\n        {\\n            // Deposits or withdraw margin\\n            // targetMarginAmount0 and targetMarginAmount1 determine the margin target.\\n            // -1 means that the margin is no changed.\\n            // -2 means that make requiredAmounts 0 by using margin amount.\\n            int256 deltaMarginAmount0;\\n            int256 deltaMarginAmount1;\\n\\n            if (_tradeOption.targetMarginAmount0 >= 0) {\\n                // update margin amount of token0 to target margin amount\\n                deltaMarginAmount0 = _tradeOption.targetMarginAmount0.sub(int256(_vault.marginAmount0));\\n\\n                _vault.marginAmount0 = _tradeOption.targetMarginAmount0;\\n\\n                result.requiredAmounts.amount0 = result.requiredAmounts.amount0.add(deltaMarginAmount0);\\n            } else if (_tradeOption.targetMarginAmount0 == Constants.MARGIN_USE) {\\n                // use margin of token0 to make required amount 0\\n                deltaMarginAmount0 = result.requiredAmounts.amount0.mul(-1);\\n\\n                _vault.marginAmount0 = _vault.marginAmount0.add(deltaMarginAmount0);\\n\\n                result.requiredAmounts.amount0 = 0;\\n            }\\n\\n            if (_tradeOption.targetMarginAmount1 >= 0) {\\n                // update margin amount of token1 to target margin amount\\n                deltaMarginAmount1 = _tradeOption.targetMarginAmount1.sub(int256(_vault.marginAmount1));\\n\\n                _vault.marginAmount1 = _tradeOption.targetMarginAmount1;\\n\\n                result.requiredAmounts.amount1 = result.requiredAmounts.amount1.add(deltaMarginAmount1);\\n            } else if (_tradeOption.targetMarginAmount1 == Constants.MARGIN_USE) {\\n                // use margin of token1 to make required amount 0\\n                deltaMarginAmount1 = result.requiredAmounts.amount1.mul(-1);\\n\\n                _vault.marginAmount1 = _vault.marginAmount1.add(deltaMarginAmount1);\\n\\n                result.requiredAmounts.amount1 = 0;\\n            }\\n\\n            // emit event if needed\\n            if (deltaMarginAmount0 != 0 || deltaMarginAmount1 != 0) {\\n                emit MarginUpdated(_vault.vaultId, deltaMarginAmount0, deltaMarginAmount1);\\n            }\\n        }\\n\\n        if (!_tradeOption.isLiquidationCall) {\\n            require(_vault.marginAmount0 >= 0 && _vault.marginAmount1 >= 0, \\\"PU2\\\");\\n        }\\n\\n        // remove empty sub-vaults\\n        if (_vault.subVaults.length > 0) {\\n            uint256 length = _vault.subVaults.length;\\n            for (uint256 i = 0; i < length; i++) {\\n                uint256 index = length - i - 1;\\n                DataType.SubVault memory subVault = _subVaults[_vault.subVaults[index]];\\n\\n                if (\\n                    subVault.balance0.assetAmount == 0 &&\\n                    subVault.balance0.debtAmount == 0 &&\\n                    subVault.balance1.assetAmount == 0 &&\\n                    subVault.balance1.debtAmount == 0 &&\\n                    subVault.lpts.length == 0\\n                ) {\\n                    _vault.removeSubVault(index);\\n                }\\n            }\\n        }\\n\\n        emit PositionUpdated(_vault.vaultId, result, _tradeOption.metadata);\\n    }\\n\\n    function swapAnyway(\\n        int256 requiredAmount0,\\n        int256 requiredAmount1,\\n        bool _isQuoteZero,\\n        uint24 _feeTier\\n    ) internal pure returns (DataType.PositionUpdate memory) {\\n        bool zeroForOne;\\n        bool isExactIn;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n\\n        if (_isQuoteZero) {\\n            if (requiredAmount1 > 0) {\\n                zeroForOne = true;\\n                isExactIn = false;\\n                amountOut = uint256(requiredAmount1);\\n            } else if (requiredAmount1 < 0) {\\n                zeroForOne = false;\\n                isExactIn = true;\\n                amountIn = uint256(-requiredAmount1);\\n            }\\n        } else {\\n            if (requiredAmount0 > 0) {\\n                zeroForOne = false;\\n                isExactIn = false;\\n                amountOut = uint256(requiredAmount0);\\n            } else if (requiredAmount0 < 0) {\\n                zeroForOne = true;\\n                isExactIn = true;\\n                amountIn = uint256(-requiredAmount0);\\n            }\\n        }\\n\\n        if (isExactIn && amountIn > 0) {\\n            return\\n                DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    zeroForOne,\\n                    _feeTier,\\n                    0,\\n                    0,\\n                    amountIn,\\n                    0\\n                );\\n        } else if (!isExactIn && amountOut > 0) {\\n            return\\n                DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    zeroForOne,\\n                    _feeTier,\\n                    0,\\n                    0,\\n                    amountOut,\\n                    0\\n                );\\n        } else {\\n            return DataType.PositionUpdate(DataType.PositionUpdateType.NOOP, 0, false, 0, 0, 0, 0, 0);\\n        }\\n    }\\n\\n    function depositTokens(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal {\\n        require(_positionUpdate.param0 > 0 || _positionUpdate.param1 > 0);\\n        _context.tokenState0.addAsset(_subVault.balance0, _positionUpdate.param0, _positionUpdate.zeroForOne);\\n        _context.tokenState1.addAsset(_subVault.balance1, _positionUpdate.param1, _positionUpdate.zeroForOne);\\n\\n        emit TokenDeposited(_subVault.id, _positionUpdate.param0, _positionUpdate.param1);\\n    }\\n\\n    function withdrawTokens(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 withdrawAmount0, uint256 withdrawAmount1) {\\n        require(_positionUpdate.param0 > 0 || _positionUpdate.param1 > 0);\\n\\n        withdrawAmount0 = _context.tokenState0.removeAsset(_subVault.balance0, _positionUpdate.param0);\\n        withdrawAmount1 = _context.tokenState1.removeAsset(_subVault.balance1, _positionUpdate.param1);\\n\\n        emit TokenWithdrawn(_subVault.id, withdrawAmount0, withdrawAmount1);\\n    }\\n\\n    function borrowTokens(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal {\\n        require(_positionUpdate.param0 > 0 || _positionUpdate.param1 > 0);\\n\\n        _context.tokenState0.addDebt(_subVault.balance0, _positionUpdate.param0, _positionUpdate.zeroForOne);\\n        _context.tokenState1.addDebt(_subVault.balance1, _positionUpdate.param1, _positionUpdate.zeroForOne);\\n\\n        emit TokenBorrowed(_subVault.id, _positionUpdate.param0, _positionUpdate.param1);\\n    }\\n\\n    function repayTokens(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        require(_positionUpdate.param0 > 0 || _positionUpdate.param1 > 0);\\n\\n        requiredAmount0 = _context.tokenState0.removeDebt(_subVault.balance0, _positionUpdate.param0);\\n        requiredAmount1 = _context.tokenState1.removeDebt(_subVault.balance1, _positionUpdate.param1);\\n\\n        emit TokenRepaid(_subVault.id, requiredAmount0, requiredAmount1);\\n    }\\n\\n    function depositLPT(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        (requiredAmount0, requiredAmount1) = IUniswapV3Pool(_context.uniswapPool).mint(\\n            address(this),\\n            _positionUpdate.lowerTick,\\n            _positionUpdate.upperTick,\\n            _positionUpdate.liquidity,\\n            \\\"\\\"\\n        );\\n\\n        if (_ranges[rangeId].lastTouchedTimestamp == 0) {\\n            _ranges[rangeId].registerNewLPTState(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n        }\\n\\n        _subVault.depositLPT(_ranges[rangeId], rangeId, _positionUpdate.liquidity);\\n\\n        emit LPTDeposited(_subVault.id, rangeId, _positionUpdate.liquidity, requiredAmount0, requiredAmount1);\\n    }\\n\\n    function withdrawLPT(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 withdrawnAmount0, uint256 withdrawnAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        uint128 liquidityAmount = _subVault.withdrawLPT(rangeId, _positionUpdate.liquidity);\\n\\n        (withdrawnAmount0, withdrawnAmount1) = decreaseLiquidityFromUni(_context, _ranges[rangeId], liquidityAmount);\\n\\n        emit LPTWithdrawn(_subVault.id, rangeId, liquidityAmount, withdrawnAmount0, withdrawnAmount1);\\n    }\\n\\n    function borrowLPT(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 borrowedAmount0, uint256 borrowedAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        (borrowedAmount0, borrowedAmount1) = decreaseLiquidityFromUni(\\n            _context,\\n            _ranges[rangeId],\\n            _positionUpdate.liquidity\\n        );\\n\\n        _ranges[rangeId].borrowedLiquidity = _ranges[rangeId]\\n            .borrowedLiquidity\\n            .add(_positionUpdate.liquidity)\\n            .toUint128();\\n\\n        _subVault.borrowLPT(_ranges[rangeId], rangeId, _positionUpdate.liquidity);\\n\\n        emit LPTBorrowed(_subVault.id, rangeId, _positionUpdate.liquidity, borrowedAmount0, borrowedAmount1);\\n    }\\n\\n    function repayLPT(\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        uint128 liquidity = _subVault.repayLPT(rangeId, _positionUpdate.liquidity);\\n\\n        (requiredAmount0, requiredAmount1) = IUniswapV3Pool(_context.uniswapPool).mint(\\n            address(this),\\n            _positionUpdate.lowerTick,\\n            _positionUpdate.upperTick,\\n            liquidity,\\n            \\\"\\\"\\n        );\\n\\n        _ranges[rangeId].borrowedLiquidity = _ranges[rangeId].borrowedLiquidity.toUint256().sub(liquidity).toUint128();\\n\\n        emit LPTRepaid(_subVault.id, rangeId, liquidity, requiredAmount0, requiredAmount1);\\n    }\\n\\n    function swapExactIn(\\n        DataType.Vault storage _vault,\\n        DataType.Context memory _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: _positionUpdate.zeroForOne ? _context.token0 : _context.token1,\\n            tokenOut: _positionUpdate.zeroForOne ? _context.token1 : _context.token0,\\n            fee: _context.feeTier,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: _positionUpdate.param0,\\n            amountOutMinimum: 0,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        uint256 amountOut = ISwapRouter(_context.swapRouter).exactInputSingle(params);\\n\\n        emit TokenSwap(\\n            _vault.vaultId,\\n            _vault.subVaults[_positionUpdate.subVaultIndex],\\n            _positionUpdate.zeroForOne,\\n            _positionUpdate.param0,\\n            amountOut\\n        );\\n\\n        if (_positionUpdate.zeroForOne) {\\n            return (int256(_positionUpdate.param0), -int256(amountOut));\\n        } else {\\n            return (-int256(amountOut), int256(_positionUpdate.param0));\\n        }\\n    }\\n\\n    function swapExactOut(\\n        DataType.Vault storage _vault,\\n        DataType.Context memory _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n            tokenIn: _positionUpdate.zeroForOne ? _context.token0 : _context.token1,\\n            tokenOut: _positionUpdate.zeroForOne ? _context.token1 : _context.token0,\\n            fee: _context.feeTier,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: _positionUpdate.param0,\\n            amountInMaximum: type(uint256).max,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        uint256 amountIn = ISwapRouter(_context.swapRouter).exactOutputSingle(params);\\n\\n        emit TokenSwap(\\n            _vault.vaultId,\\n            _vault.subVaults[_positionUpdate.subVaultIndex],\\n            _positionUpdate.zeroForOne,\\n            amountIn,\\n            _positionUpdate.param0\\n        );\\n\\n        if (_positionUpdate.zeroForOne) {\\n            return (int256(amountIn), -int256(_positionUpdate.param0));\\n        } else {\\n            return (-int256(_positionUpdate.param0), int256(amountIn));\\n        }\\n    }\\n\\n    /**\\n     * @notice Decreases liquidity from Uniswap pool.\\n     */\\n    function decreaseLiquidityFromUni(\\n        DataType.Context memory _context,\\n        DataType.PerpStatus storage _range,\\n        uint128 _liquidity\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        (amount0, amount1) = IUniswapV3Pool(_context.uniswapPool).burn(_range.lowerTick, _range.upperTick, _liquidity);\\n\\n        // collect burned token amounts\\n        IUniswapV3Pool(_context.uniswapPool).collect(\\n            address(this),\\n            _range.lowerTick,\\n            _range.upperTick,\\n            amount0.toUint128(),\\n            amount1.toUint128()\\n        );\\n    }\\n\\n    /**\\n     * @notice Collects trade fee and updates fee growth.\\n     */\\n    function updateFeeGrowth(\\n        DataType.Context memory _context,\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate[] memory _positionUpdates\\n    ) external {\\n        // calculate trade fee for ranges that the vault has\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault memory subVault = _subVaults[_vault.subVaults[i]];\\n\\n            for (uint256 j = 0; j < subVault.lpts.length; j++) {\\n                updateFeeGrowthForRange(_context, _ranges[subVault.lpts[j].rangeId]);\\n            }\\n        }\\n\\n        // calculate trade fee for ranges that trader would open\\n        for (uint256 i = 0; i < _positionUpdates.length; i++) {\\n            bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdates[i].lowerTick, _positionUpdates[i].upperTick);\\n\\n            updateFeeGrowthForRange(_context, _ranges[rangeId]);\\n        }\\n    }\\n\\n    function updateFeeGrowthForRange(DataType.Context memory _context, DataType.PerpStatus storage _range) internal {\\n        if (_range.lastTouchedTimestamp == 0) {\\n            return;\\n        }\\n\\n        uint256 totalLiquidity = LPTStateLib.getTotalLiquidityAmount(address(this), _context.uniswapPool, _range);\\n\\n        if (totalLiquidity == 0) {\\n            return;\\n        }\\n\\n        // burn 0 amount of LPT to collect trade fee from Uniswap pool.\\n        IUniswapV3Pool(_context.uniswapPool).burn(_range.lowerTick, _range.upperTick, 0);\\n\\n        // collect trade fee\\n        (uint256 collect0, uint256 collect1) = IUniswapV3Pool(_context.uniswapPool).collect(\\n            address(this),\\n            _range.lowerTick,\\n            _range.upperTick,\\n            type(uint128).max,\\n            type(uint128).max\\n        );\\n\\n        _range.fee0Growth = _range.fee0Growth.add(PredyMath.mulDiv(collect0, Constants.ONE, totalLiquidity));\\n        _range.fee1Growth = _range.fee1Growth.add(PredyMath.mulDiv(collect1, Constants.ONE, totalLiquidity));\\n\\n        emit FeeGrowthUpdated(_range.lowerTick, _range.upperTick, _range.fee0Growth, _range.fee1Growth);\\n    }\\n\\n    function collectFee(\\n        DataType.Context memory _context,\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) internal returns (DataType.TokenAmounts memory requiredAmounts) {\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault storage subVault = _subVaults[_vault.subVaults[i]];\\n\\n            (int256 requiredAmount0, int256 requiredAmount1) = collectFeeOfSubVault(_context, subVault, _ranges);\\n\\n            requiredAmounts.amount0 = requiredAmounts.amount0.add(requiredAmount0);\\n            requiredAmounts.amount1 = requiredAmounts.amount1.add(requiredAmount1);\\n        }\\n    }\\n\\n    function collectFeeOfSubVault(\\n        DataType.Context memory _context,\\n        DataType.SubVault storage _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) internal returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        int256 totalFee0;\\n        int256 totalFee1;\\n\\n        {\\n            (int256 fee0, int256 fee1) = VaultLib.getPremiumAndFeeOfSubVault(_subVault, _ranges, _context);\\n            (int256 assetFee0, int256 assetFee1, int256 debtFee0, int256 debtFee1) = VaultLib\\n                .getTokenInterestOfSubVault(_subVault, _context);\\n\\n            totalFee0 = fee0.add(assetFee0).sub(debtFee0);\\n            totalFee1 = fee1.add(assetFee1).sub(debtFee1);\\n        }\\n\\n        _context.tokenState0.refreshFee(_subVault.balance0);\\n        _context.tokenState1.refreshFee(_subVault.balance1);\\n\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            DataType.LPTState storage lpt = _subVault.lpts[i];\\n\\n            if (lpt.isCollateral) {\\n                lpt.premiumGrowthLast = _ranges[lpt.rangeId].premiumGrowthForLender;\\n                lpt.fee0Last = _ranges[lpt.rangeId].fee0Growth;\\n                lpt.fee1Last = _ranges[lpt.rangeId].fee1Growth;\\n            } else {\\n                lpt.premiumGrowthLast = _ranges[lpt.rangeId].premiumGrowthForBorrower;\\n            }\\n        }\\n\\n        requiredAmount0 = totalFee0.mul(-1);\\n        requiredAmount1 = totalFee1.mul(-1);\\n\\n        emit FeeUpdated(_subVault.id, totalFee0, totalFee1);\\n    }\\n}\\n\",\"keccak256\":\"0x5f10255b3f67d5c7dd3ee420c6e2b751698c0007d832a57fc1a4be5402fcb191\",\"license\":\"UNLICENSED\"},\"src/libraries/PredyMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\n\\nlibrary PredyMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    /**\\n     * @dev https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     */\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     */\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? b : a;\\n    }\\n\\n    function subReward(int256 a, uint256 b) internal pure returns (int256, uint256) {\\n        if (a >= int256(b)) {\\n            return (a - int256(b), b);\\n        } else if (a >= 0) {\\n            return (0, uint256(a));\\n        } else {\\n            return (a, 0);\\n        }\\n    }\\n\\n    function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        if (y < 0) {\\n            require((z = x - uint256(-y)) < x, \\\"LS\\\");\\n        } else {\\n            require((z = x + uint256(y)) >= x, \\\"LA\\\");\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xc458343dfda729c1e05f3594ee3a485088f4c254b21232b0e7ec44a406c22c97\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/PriceHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./UniHelper.sol\\\";\\n\\nlibrary PriceHelper {\\n    // assuming USDC\\n    uint256 internal constant MARGIN_SCALER = 1e6;\\n\\n    // assuming ETH, BTC\\n    uint256 internal constant UNDERLYING_SCALER = 1e18;\\n\\n    uint256 internal constant PRICE_SCALER = 1e2;\\n\\n    uint256 internal constant MAX_PRICE = PRICE_SCALER * 1e36;\\n\\n    /**\\n     * @notice Gets the square root of underlying index price.\\n     * If the chainlink price feed address is set, use Chainlink price, otherwise use Uniswap TWAP.\\n     * @param _context Predy pool's context object\\n     * @return price The square root of underlying index price.\\n     */\\n    function getSqrtIndexPrice(DataType.Context memory _context) internal view returns (uint160) {\\n        if (_context.chainlinkPriceFeed == address(0)) {\\n            return uint160(UniHelper.getSqrtTWAP(_context.uniswapPool));\\n        } else {\\n            return\\n                uint160(\\n                    encodeSqrtPriceX96(_context.isMarginZero, getChainlinkLatestAnswer(_context.chainlinkPriceFeed))\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets underlying price scaled by 1e18\\n     * @param _priceFeedAddress Chainlink's price feed address\\n     * @return price underlying price scaled by 1e18\\n     */\\n    function getChainlinkLatestAnswer(address _priceFeedAddress) internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeedAddress);\\n\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n        require(answer > 0, \\\"PH0\\\");\\n\\n        return (uint256(answer) * MARGIN_SCALER * PRICE_SCALER) / 1e8;\\n    }\\n\\n    /**\\n     * @notice Calculates sqrtPrice from the price.\\n     * @param _isMarginZero true if token0 is margin asset, false if token 1 is margin asset.\\n     * @param _price price scaled by (MARGIN_SCALER + PRICE_SCALER)\\n     * @return sqrtPriceX96 Uniswap pool's sqrt price.\\n     */\\n    function encodeSqrtPriceX96(bool _isMarginZero, uint256 _price) internal pure returns (uint256 sqrtPriceX96) {\\n        if (_isMarginZero) {\\n            _price = MAX_PRICE / _price;\\n\\n            return PredyMath.sqrt(FullMath.mulDiv(_price, uint256(2**(96 * 2)), UNDERLYING_SCALER));\\n        } else {\\n            return\\n                PredyMath.sqrt(\\n                    (FullMath.mulDiv(_price, uint256(2**96) * uint256(2**96), UNDERLYING_SCALER * PRICE_SCALER))\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates position value at sqrtPrice by margin token.\\n     * @param _isMarginZero true if token0 is margin asset, false if token 1 is margin asset.\\n     * @param _sqrtPriceX96 Uniswap pool's sqrt price.\\n     * @param _amount0 The amount of token0\\n     * @param _amount1 The amount of token1\\n     * @return value of token0 and token1 scaled by MARGIN_SCALER\\n     */\\n    function getValue(\\n        bool _isMarginZero,\\n        uint256 _sqrtPriceX96,\\n        int256 _amount0,\\n        int256 _amount1\\n    ) internal pure returns (int256) {\\n        uint256 price;\\n\\n        if (_isMarginZero) {\\n            price = FullMath.mulDiv(_sqrtPriceX96, _sqrtPriceX96, uint256(2**(96 * 2)) / UNDERLYING_SCALER);\\n\\n            if (price == 0) {\\n                price = 1;\\n            }\\n\\n            return _amount0 + (_amount1 * 1e18) / int256(price);\\n        } else {\\n            price = FullMath.mulDiv(_sqrtPriceX96, _sqrtPriceX96, uint256(2**96));\\n\\n            return (_amount0 * int256(price)) / int256(2**96) + _amount1;\\n        }\\n    }\\n\\n    /**\\n     * if isMarginZero is true, calculates token1 price by token0.\\n     * if isMarginZero is false, calculates token0 price by token1.\\n     * @dev underlying token's decimal must be 1e18.\\n     * @param _isMarginZero true if token0 is margin asset, false if token 1 is margin asset.\\n     * @param _sqrtPriceX96 Uniswap pool's sqrt price.\\n     * @return price The price scaled by (MARGIN_SCALER + PRICE_SCALER)\\n     */\\n    function decodeSqrtPriceX96(bool _isMarginZero, uint256 _sqrtPriceX96) internal pure returns (uint256 price) {\\n        if (_isMarginZero) {\\n            price = FullMath.mulDiv(_sqrtPriceX96, _sqrtPriceX96, uint256(2**(96 * 2)) / UNDERLYING_SCALER);\\n            if (price == 0) return MAX_PRICE;\\n            price = MAX_PRICE / price;\\n        } else {\\n            price =\\n                (FullMath.mulDiv(_sqrtPriceX96, _sqrtPriceX96, uint256(2**96)) * UNDERLYING_SCALER * PRICE_SCALER) /\\n                uint256(2**96);\\n        }\\n\\n        if (price > MAX_PRICE) price = MAX_PRICE;\\n        else if (price == 0) price = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x05bb22a3fd9bcb00694fc30388f2008fe02b4228445ed9971009bb0c657ebfd0\",\"license\":\"UNLICENSED\"},\"src/libraries/UniHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"../vendors/IUniswapV3PoolOracle.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary UniHelper {\\n    uint256 internal constant ORACLE_PERIOD = 30 minutes;\\n\\n    function getSqrtPrice(address _uniswapPool) internal view returns (uint160 sqrtPriceX96) {\\n        (sqrtPriceX96, , , , , , ) = IUniswapV3Pool(_uniswapPool).slot0();\\n    }\\n\\n    /**\\n     * Gets square root of time weighted average price.\\n     */\\n    function getSqrtTWAP(address _uniswapPool) internal view returns (uint160 sqrtTwapX96) {\\n        (sqrtTwapX96, ) = callUniswapObserve(IUniswapV3Pool(_uniswapPool), ORACLE_PERIOD);\\n    }\\n\\n    function callUniswapObserve(IUniswapV3Pool uniswapPool, uint256 ago) internal view returns (uint160, uint256) {\\n        uint32[] memory secondsAgos = new uint32[](2);\\n\\n        secondsAgos[0] = uint32(ago);\\n        secondsAgos[1] = 0;\\n\\n        (bool success, bytes memory data) = address(uniswapPool).staticcall(\\n            abi.encodeWithSelector(IUniswapV3PoolOracle.observe.selector, secondsAgos)\\n        );\\n\\n        if (!success) {\\n            if (keccak256(data) != keccak256(abi.encodeWithSignature(\\\"Error(string)\\\", \\\"OLD\\\"))) revertBytes(data);\\n\\n            (, , uint16 index, uint16 cardinality, , , ) = uniswapPool.slot0();\\n\\n            (uint32 oldestAvailableAge, , , bool initialized) = uniswapPool.observations((index + 1) % cardinality);\\n\\n            if (!initialized) (oldestAvailableAge, , , ) = uniswapPool.observations(0);\\n\\n            ago = block.timestamp - oldestAvailableAge;\\n            secondsAgos[0] = uint32(ago);\\n\\n            (success, data) = address(uniswapPool).staticcall(\\n                abi.encodeWithSelector(IUniswapV3PoolOracle.observe.selector, secondsAgos)\\n            );\\n            if (!success) revertBytes(data);\\n        }\\n\\n        int56[] memory tickCumulatives = abi.decode(data, (int56[]));\\n\\n        int24 tick = int24((tickCumulatives[1] - tickCumulatives[0]) / int56(int256(ago)));\\n\\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        return (sqrtPriceX96, ago);\\n    }\\n\\n    function revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n\\n        revert(\\\"e/empty-error\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfa0e8eabe596990605e12d9e9723b9677ba47444b2d223118b87856326bb3e37\",\"license\":\"UNLICENSED\"},\"src/libraries/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./PriceHelper.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./PositionCalculator.sol\\\";\\nimport \\\"./PositionLib.sol\\\";\\n\\n/**\\n * Error Codes\\n * V0: no permission\\n */\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n    using BaseToken for BaseToken.TokenState;\\n\\n    event SubVaultCreated(uint256 indexed vaultId, uint256 subVaultIndex, uint256 subVaultId);\\n    event SubVaultRemoved(uint256 indexed vaultId, uint256 subVaultIndex, uint256 subVaultId);\\n\\n    /**\\n     * @notice add sub-vault to the vault\\n     * @param _vault vault object\\n     * @param _subVaults sub-vaults map\\n     * @param _context context object\\n     * @param _subVaultIndex index of sub-vault in the vault to add\\n     */\\n    function addSubVault(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context storage _context,\\n        uint256 _subVaultIndex\\n    ) internal returns (DataType.SubVault storage) {\\n        if (_subVaultIndex == _vault.subVaults.length) {\\n            uint256 subVaultId = _context.nextSubVaultId;\\n\\n            _context.nextSubVaultId += 1;\\n\\n            _vault.subVaults.push(subVaultId);\\n\\n            emit SubVaultCreated(_vault.vaultId, _subVaultIndex, subVaultId);\\n\\n            _subVaults[subVaultId].id = subVaultId;\\n\\n            return _subVaults[subVaultId];\\n        } else if (_subVaultIndex < _vault.subVaults.length) {\\n            uint256 subVaultId = _vault.subVaults[_subVaultIndex];\\n\\n            return _subVaults[subVaultId];\\n        } else {\\n            revert(\\\"V0\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice remove sub-vault from the vault\\n     * @param _vault vault object\\n     * @param _subVaultIndex index of sub-vault in the vault to remove\\n     */\\n    function removeSubVault(DataType.Vault storage _vault, uint256 _subVaultIndex) internal {\\n        uint256 subVaultId = _vault.subVaults[_subVaultIndex];\\n\\n        _vault.subVaults[_subVaultIndex] = _vault.subVaults[_vault.subVaults.length - 1];\\n        _vault.subVaults.pop();\\n\\n        emit SubVaultRemoved(_vault.vaultId, _subVaultIndex, subVaultId);\\n    }\\n\\n    function depositLPT(\\n        DataType.SubVault storage _subVault,\\n        DataType.PerpStatus memory _range,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            DataType.LPTState storage lpt = _subVault.lpts[i];\\n\\n            if (lpt.rangeId == _rangeId && lpt.isCollateral) {\\n                lpt.premiumGrowthLast = _range.premiumGrowthForLender;\\n\\n                lpt.fee0Last = _range.fee0Growth;\\n                lpt.fee1Last = _range.fee1Growth;\\n\\n                lpt.liquidityAmount = lpt.liquidityAmount.add(_liquidityAmount).toUint128();\\n\\n                return;\\n            }\\n        }\\n\\n        _subVault.lpts.push(\\n            DataType.LPTState(\\n                true,\\n                _rangeId,\\n                _liquidityAmount,\\n                _range.premiumGrowthForLender,\\n                _range.fee0Growth,\\n                _range.fee1Growth\\n            )\\n        );\\n    }\\n\\n    function withdrawLPT(\\n        DataType.SubVault storage _subVault,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal returns (uint128 liquidityAmount) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            DataType.LPTState storage lpt = _subVault.lpts[i];\\n\\n            if (lpt.rangeId == _rangeId && lpt.isCollateral) {\\n                liquidityAmount = _liquidityAmount;\\n\\n                if (_liquidityAmount > lpt.liquidityAmount) {\\n                    liquidityAmount = lpt.liquidityAmount;\\n                }\\n\\n                lpt.liquidityAmount = lpt.liquidityAmount.sub(liquidityAmount).toUint128();\\n\\n                if (lpt.liquidityAmount == 0) {\\n                    _subVault.lpts[i] = _subVault.lpts[_subVault.lpts.length - 1];\\n                    _subVault.lpts.pop();\\n                }\\n\\n                return liquidityAmount;\\n            }\\n        }\\n    }\\n\\n    function borrowLPT(\\n        DataType.SubVault storage _subVault,\\n        DataType.PerpStatus memory _range,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            DataType.LPTState storage lpt = _subVault.lpts[i];\\n\\n            if (lpt.rangeId == _rangeId && !lpt.isCollateral) {\\n                lpt.premiumGrowthLast = _range.premiumGrowthForBorrower;\\n\\n                lpt.liquidityAmount = lpt.liquidityAmount.add(_liquidityAmount).toUint128();\\n\\n                return;\\n            }\\n        }\\n\\n        _subVault.lpts.push(\\n            DataType.LPTState(false, _rangeId, _liquidityAmount, _range.premiumGrowthForBorrower, 0, 0)\\n        );\\n    }\\n\\n    function repayLPT(\\n        DataType.SubVault storage _subVault,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal returns (uint128 liquidityAmount) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            DataType.LPTState storage lpt = _subVault.lpts[i];\\n\\n            if (lpt.rangeId == _rangeId && !lpt.isCollateral) {\\n                liquidityAmount = _liquidityAmount;\\n\\n                if (_liquidityAmount > lpt.liquidityAmount) {\\n                    liquidityAmount = lpt.liquidityAmount;\\n                }\\n\\n                lpt.liquidityAmount = lpt.liquidityAmount.sub(liquidityAmount).toUint128();\\n\\n                if (lpt.liquidityAmount == 0) {\\n                    _subVault.lpts[i] = _subVault.lpts[_subVault.lpts.length - 1];\\n                    _subVault.lpts.pop();\\n                }\\n\\n                return liquidityAmount;\\n            }\\n        }\\n    }\\n\\n    function updateEntryPrice(\\n        uint256 _entryPrice,\\n        uint256 _position,\\n        uint256 _tradePrice,\\n        uint256 _positionTrade\\n    ) internal pure returns (uint256 newEntryPrice) {\\n        newEntryPrice = (_entryPrice.mul(_position).add(_tradePrice.mul(_positionTrade))).div(\\n            _position.add(_positionTrade)\\n        );\\n    }\\n\\n    function calculateProfit(\\n        uint256 _entryPrice,\\n        uint256 _tradePrice,\\n        uint256 _positionTrade,\\n        uint256 _denominator\\n    ) internal pure returns (uint256 profit) {\\n        return _tradePrice.sub(_entryPrice).mul(_positionTrade).div(_denominator);\\n    }\\n\\n    function getVaultStatus(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) external view returns (DataType.VaultStatus memory) {\\n        DataType.SubVaultStatus[] memory subVaultsStatus = new DataType.SubVaultStatus[](_vault.subVaults.length);\\n\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVaultAmount memory statusAmount = getVaultStatusAmount(\\n                _subVaults[_vault.subVaults[i]],\\n                _ranges,\\n                _context,\\n                _sqrtPrice\\n            );\\n\\n            DataType.SubVaultPremium memory subVaultPremium = getVaultStatusPremium(\\n                _subVaults[_vault.subVaults[i]],\\n                _ranges\\n            );\\n\\n            DataType.SubVaultInterest memory statusInterest = getVaultStatusInterest(\\n                _subVaults[_vault.subVaults[i]],\\n                _context\\n            );\\n\\n            subVaultsStatus[i] = DataType.SubVaultStatus(\\n                getVaultStatusValue(statusAmount, statusInterest, subVaultPremium, _sqrtPrice, _context.isMarginZero),\\n                statusAmount,\\n                statusInterest,\\n                subVaultPremium\\n            );\\n        }\\n\\n        PositionCalculator.PositionCalculatorParams memory params = getPositionCalculatorParams(\\n            _vault,\\n            _subVaults,\\n            _ranges,\\n            _context\\n        );\\n\\n        (int256 marginValue, uint256 assetValue, uint256 debtValue) = PositionCalculator\\n            .calculateCollateralAndDebtValue(params, _sqrtPrice, _context.isMarginZero, false);\\n\\n        return\\n            DataType.VaultStatus(\\n                int256(assetValue).sub(int256(debtValue)),\\n                marginValue,\\n                PositionCalculator.calculateMinDeposit(params, _sqrtPrice, _context.isMarginZero),\\n                subVaultsStatus\\n            );\\n    }\\n\\n    function getMarginAmount(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (int256 marginAmount0, int256 marginAmount1) {\\n        (int256 fee0, int256 fee1) = getPremiumAndFee(_vault, _subVaults, _ranges, _context);\\n\\n        marginAmount0 = int256(_vault.marginAmount0) + fee0;\\n        marginAmount1 = int256(_vault.marginAmount1) + fee1;\\n    }\\n\\n    function getVaultValue(\\n        DataType.Context memory _context,\\n        PositionCalculator.PositionCalculatorParams memory _params,\\n        uint160 _sqrtPrice\\n    ) internal pure returns (int256) {\\n        return PositionCalculator.calculateValue(_params, _sqrtPrice, _context.isMarginZero, false);\\n    }\\n\\n    function getVaultStatusValue(\\n        DataType.SubVaultAmount memory statusAmount,\\n        DataType.SubVaultInterest memory statusInterest,\\n        DataType.SubVaultPremium memory statusPremium,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (DataType.SubVaultValue memory) {\\n        int256 fee0 = statusInterest.assetFee0.sub(statusInterest.debtFee0);\\n        int256 fee1 = statusInterest.assetFee1.sub(statusInterest.debtFee1);\\n\\n        fee0 = fee0.add(int256(statusPremium.receivedTradeAmount0));\\n        fee1 = fee1.add(int256(statusPremium.receivedTradeAmount1));\\n\\n        int256 premium = int256(statusPremium.receivedPremium).sub(int256(statusPremium.paidPremium));\\n\\n        return\\n            DataType.SubVaultValue(\\n                uint256(\\n                    PriceHelper.getValue(\\n                        _isMarginZero,\\n                        _sqrtPrice,\\n                        int256(statusAmount.assetAmount0),\\n                        int256(statusAmount.assetAmount1)\\n                    )\\n                ),\\n                uint256(\\n                    PriceHelper.getValue(\\n                        _isMarginZero,\\n                        _sqrtPrice,\\n                        int256(statusAmount.debtAmount0),\\n                        int256(statusAmount.debtAmount1)\\n                    )\\n                ),\\n                PriceHelper.getValue(_isMarginZero, _sqrtPrice, fee0, fee1).add(premium)\\n            );\\n    }\\n\\n    function getVaultStatusAmount(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) internal view returns (DataType.SubVaultAmount memory) {\\n        (uint256 assetAmount0, uint256 assetAmount1) = getAssetPositionAmounts(\\n            _subVault,\\n            _ranges,\\n            _context,\\n            _sqrtPrice\\n        );\\n        (uint256 debtAmount0, uint256 debtAmount1) = getDebtPositionAmounts(_subVault, _ranges, _context, _sqrtPrice);\\n\\n        return DataType.SubVaultAmount(assetAmount0, assetAmount1, debtAmount0, debtAmount1);\\n    }\\n\\n    function getVaultStatusPremium(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) internal view returns (DataType.SubVaultPremium memory) {\\n        (uint256 fee0, uint256 fee1) = getEarnedTradeFee(_subVault, _ranges);\\n\\n        return\\n            DataType.SubVaultPremium(\\n                fee0,\\n                fee1,\\n                getEarnedDailyPremium(_subVault, _ranges),\\n                getPaidDailyPremium(_subVault, _ranges)\\n            );\\n    }\\n\\n    function getVaultStatusInterest(DataType.SubVault memory _subVault, DataType.Context memory _context)\\n        internal\\n        pure\\n        returns (DataType.SubVaultInterest memory)\\n    {\\n        (int256 assetFee0, int256 assetFee1, int256 debtFee0, int256 debtFee1) = getTokenInterestOfSubVault(\\n            _subVault,\\n            _context\\n        );\\n\\n        return DataType.SubVaultInterest(assetFee0, assetFee1, debtFee0, debtFee1);\\n    }\\n\\n    /**\\n     * @notice latest asset amounts\\n     */\\n    function getAssetPositionAmounts(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) internal view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        totalAmount0 = totalAmount0.add(_context.tokenState0.getAssetValue(_subVault.balance0));\\n        totalAmount1 = totalAmount1.add(_context.tokenState1.getAssetValue(_subVault.balance1));\\n\\n        {\\n            (uint256 amount0, uint256 amount1) = getLPTPositionAmounts(_subVault, _ranges, _sqrtPrice, true);\\n\\n            totalAmount0 = totalAmount0.add(amount0);\\n            totalAmount1 = totalAmount1.add(amount1);\\n        }\\n    }\\n\\n    function getDebtPositionAmounts(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) internal view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        totalAmount0 = totalAmount0.add(_context.tokenState0.getDebtValue(_subVault.balance0));\\n        totalAmount1 = totalAmount1.add(_context.tokenState1.getDebtValue(_subVault.balance1));\\n\\n        {\\n            (uint256 amount0, uint256 amount1) = getLPTPositionAmounts(_subVault, _ranges, _sqrtPrice, false);\\n\\n            totalAmount0 = totalAmount0.add(amount0);\\n            totalAmount1 = totalAmount1.add(amount1);\\n        }\\n    }\\n\\n    function getLPTPositionAmounts(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        uint160 _sqrtPrice,\\n        bool _isCollateral\\n    ) internal view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            DataType.LPTState memory lpt = _subVault.lpts[i];\\n\\n            if (_isCollateral != lpt.isCollateral) {\\n                continue;\\n            }\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(_ranges[lpt.rangeId].lowerTick),\\n                TickMath.getSqrtRatioAtTick(_ranges[lpt.rangeId].upperTick),\\n                lpt.liquidityAmount\\n            );\\n\\n            totalAmount0 = totalAmount0.add(amount0);\\n            totalAmount1 = totalAmount1.add(amount1);\\n        }\\n    }\\n\\n    function getEarnedTradeFeeForRange(DataType.LPTState memory _lpt, DataType.PerpStatus memory _range)\\n        internal\\n        pure\\n        returns (uint256 totalAmount0, uint256 totalAmount1)\\n    {\\n        if (_lpt.isCollateral) {\\n            totalAmount0 = PredyMath.mulDiv(_range.fee0Growth.sub(_lpt.fee0Last), _lpt.liquidityAmount, Constants.ONE);\\n            totalAmount1 = PredyMath.mulDiv(_range.fee1Growth.sub(_lpt.fee1Last), _lpt.liquidityAmount, Constants.ONE);\\n        }\\n    }\\n\\n    function getEarnedTradeFee(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges\\n    ) public view returns (uint256 totalFeeAmount0, uint256 totalFeeAmount1) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n\\n            (uint256 tradeFee0, uint256 tradeFee1) = getEarnedTradeFeeForRange(_subVault.lpts[i], ranges[rangeId]);\\n\\n            totalFeeAmount0 = totalFeeAmount0.add(tradeFee0);\\n            totalFeeAmount1 = totalFeeAmount1.add(tradeFee1);\\n        }\\n    }\\n\\n    function getEarnedDailyPremium(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges\\n    ) public view returns (uint256 marginValue) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            DataType.PerpStatus memory perpStatus = ranges[rangeId];\\n\\n            if (!_subVault.lpts[i].isCollateral) {\\n                continue;\\n            }\\n\\n            marginValue = marginValue.add(\\n                PredyMath.mulDiv(\\n                    perpStatus.premiumGrowthForLender.sub(_subVault.lpts[i].premiumGrowthLast),\\n                    _subVault.lpts[i].liquidityAmount,\\n                    Constants.ONE\\n                )\\n            );\\n        }\\n    }\\n\\n    function getPaidDailyPremium(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges\\n    ) public view returns (uint256 marginValue) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            DataType.PerpStatus memory perpStatus = ranges[rangeId];\\n\\n            if (_subVault.lpts[i].isCollateral) {\\n                continue;\\n            }\\n\\n            marginValue = marginValue.add(\\n                PredyMath.mulDiv(\\n                    perpStatus.premiumGrowthForBorrower.sub(_subVault.lpts[i].premiumGrowthLast),\\n                    _subVault.lpts[i].liquidityAmount,\\n                    Constants.ONE\\n                )\\n            );\\n        }\\n    }\\n\\n    function getPremiumAndFee(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (int256 totalFee0, int256 totalFee1) {\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault memory subVault = _subVaults[_vault.subVaults[i]];\\n\\n            (int256 fee0, int256 fee1) = getPremiumAndFeeOfSubVault(subVault, _ranges, _context);\\n            (int256 assetFee0, int256 assetFee1, int256 debtFee0, int256 debtFee1) = getTokenInterestOfSubVault(\\n                subVault,\\n                _context\\n            );\\n\\n            totalFee0 = totalFee0.add(fee0.add(assetFee0).sub(debtFee0));\\n            totalFee1 = totalFee1.add(fee1.add(assetFee1).sub(debtFee1));\\n        }\\n    }\\n\\n    function getPremiumAndFeeOfSubVault(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (int256 totalFee0, int256 totalFee1) {\\n        (uint256 fee0, uint256 fee1) = getEarnedTradeFee(_subVault, _ranges);\\n\\n        totalFee0 = totalFee0.add(int256(fee0));\\n        totalFee1 = totalFee1.add(int256(fee1));\\n\\n        if (_context.isMarginZero) {\\n            totalFee0 = totalFee0.add(int256(getEarnedDailyPremium(_subVault, _ranges)));\\n            totalFee0 = totalFee0.sub(int256(getPaidDailyPremium(_subVault, _ranges)));\\n        } else {\\n            totalFee1 = totalFee1.add(int256(getEarnedDailyPremium(_subVault, _ranges)));\\n            totalFee1 = totalFee1.sub(int256(getPaidDailyPremium(_subVault, _ranges)));\\n        }\\n    }\\n\\n    function getTokenInterestOfSubVault(DataType.SubVault memory _subVault, DataType.Context memory _context)\\n        internal\\n        pure\\n        returns (\\n            int256 assetFee0,\\n            int256 assetFee1,\\n            int256 debtFee0,\\n            int256 debtFee1\\n        )\\n    {\\n        assetFee0 = int256(_context.tokenState0.getAssetFee(_subVault.balance0));\\n        assetFee1 = int256(_context.tokenState1.getAssetFee(_subVault.balance1));\\n        debtFee0 = int256(_context.tokenState0.getDebtFee(_subVault.balance0));\\n        debtFee1 = int256(_context.tokenState1.getDebtFee(_subVault.balance1));\\n    }\\n\\n    function getPositionOfSubVault(\\n        uint256 _subVaultIndex,\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (DataType.Position memory position) {\\n        DataType.LPT[] memory lpts = new DataType.LPT[](_subVault.lpts.length);\\n\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            DataType.PerpStatus memory range = _ranges[rangeId];\\n            lpts[i] = DataType.LPT(\\n                _subVault.lpts[i].isCollateral,\\n                _subVault.lpts[i].liquidityAmount,\\n                range.lowerTick,\\n                range.upperTick\\n            );\\n        }\\n\\n        position = DataType.Position(\\n            _subVaultIndex,\\n            _context.tokenState0.getAssetValue(_subVault.balance0),\\n            _context.tokenState1.getAssetValue(_subVault.balance1),\\n            _context.tokenState0.getDebtValue(_subVault.balance0),\\n            _context.tokenState1.getDebtValue(_subVault.balance1),\\n            lpts\\n        );\\n    }\\n\\n    function getPositions(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (DataType.Position[] memory positions) {\\n        positions = new DataType.Position[](_vault.subVaults.length);\\n\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            positions[i] = getPositionOfSubVault(i, _subVaults[_vault.subVaults[i]], _ranges, _context);\\n        }\\n    }\\n\\n    function getPosition(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (DataType.Position memory position) {\\n        return PositionLib.concat(VaultLib.getPositions(_vault, _subVaults, _ranges, _context));\\n    }\\n\\n    function getPositionCalculatorParams(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) public view returns (PositionCalculator.PositionCalculatorParams memory params) {\\n        {\\n            DataType.Position memory position = getPosition(_vault, _subVaults, _ranges, _context);\\n            params.asset0 = position.asset0;\\n            params.asset1 = position.asset1;\\n            params.debt0 = position.debt0;\\n            params.debt1 = position.debt1;\\n            params.lpts = position.lpts;\\n        }\\n\\n        (params.marginAmount0, params.marginAmount1) = getMarginAmount(_vault, _subVaults, _ranges, _context);\\n    }\\n}\\n\",\"keccak256\":\"0x6b1b47f7b338b48968ab94a4014d7883001aaa1fda6c6b567d06c14b8600a54a\",\"license\":\"UNLICENSED\"},\"src/libraries/logic/LiquidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport {TransferHelper} from \\\"lib/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../DataType.sol\\\";\\nimport \\\"../PositionLib.sol\\\";\\nimport \\\"../PositionCalculator.sol\\\";\\nimport \\\"../PositionUpdater.sol\\\";\\nimport \\\"../PriceHelper.sol\\\";\\n\\n/**\\n * @title LiquidationLogic library\\n * @notice Implements the base logic for all the actions related to liquidation call.\\n */\\nlibrary LiquidationLogic {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    event Liquidated(uint256 indexed vaultId, address liquidator, uint256 penaltyAmount);\\n\\n    /**\\n     * @notice Anyone can liquidates the vault if its vault value is less than Min. Deposit.\\n     * Up to 100% of debt is repaid.\\n     * @param _vault vault\\n     * @param _positionUpdates parameters to update position\\n     */\\n    function execLiquidation(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        DataType.Context storage _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) external {\\n        uint160 sqrtTwap = PriceHelper.getSqrtIndexPrice(_context);\\n\\n        PositionCalculator.PositionCalculatorParams memory _params = VaultLib.getPositionCalculatorParams(\\n            _vault,\\n            _subVaults,\\n            _ranges,\\n            _context\\n        );\\n\\n        // check that the vault is liquidatable\\n        require(!_isVaultSafe(_context, _params, sqrtTwap), \\\"L0\\\");\\n\\n        // calculate debt value to calculate penalty amount\\n        (, , uint256 debtValue) = PositionCalculator.calculateCollateralAndDebtValue(\\n            _params,\\n            sqrtTwap,\\n            _context.isMarginZero,\\n            false\\n        );\\n\\n        // close all positions in the vault\\n        (uint256 penaltyAmount, DataType.PositionUpdateResult memory positionUpdateResult) = reducePosition(\\n            _vault,\\n            _subVaults,\\n            _context,\\n            _ranges,\\n            _positionUpdates,\\n            // penalty amount is 0.5% of debt value\\n            debtValue / 200\\n        );\\n\\n        sendReward(_context, msg.sender, penaltyAmount);\\n\\n        {\\n            // reverts if price is out of slippage threshold\\n            uint256 sqrtPrice = UniHelper.getSqrtPrice(_context.uniswapPool);\\n\\n            uint256 liquidationSlippageSqrtTolerance = calculateLiquidationSlippageTolerance(debtValue);\\n\\n            require(\\n                uint256(sqrtTwap).mul(1e6 - liquidationSlippageSqrtTolerance).div(1e6) <= sqrtPrice &&\\n                    sqrtPrice <= uint256(sqrtTwap).mul(1e6 + liquidationSlippageSqrtTolerance).div(1e6),\\n                \\\"L4\\\"\\n            );\\n        }\\n\\n        emit Liquidated(_vault.vaultId, msg.sender, penaltyAmount);\\n    }\\n\\n    function calculateLiquidationSlippageTolerance(uint256 _debtValue) internal pure returns (uint256) {\\n        uint256 liquidationSlippageSqrtTolerance = PredyMath.max(\\n            (Constants.LIQ_SLIPPAGE_SQRT_SLOPE * PredyMath.sqrt(_debtValue * 1e6)) / 1e6,\\n            Constants.BASE_LIQ_SLIPPAGE_SQRT_TOLERANCE\\n        );\\n\\n        if (liquidationSlippageSqrtTolerance > 1e6) {\\n            return 1e6;\\n        }\\n\\n        return liquidationSlippageSqrtTolerance;\\n    }\\n\\n    /**\\n     * @notice Checks the vault is safe or not.\\n     * if the vault value is greater than Min. Deposit, then return true.\\n     * otherwise return false.\\n     */\\n    function isVaultSafe(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) public view returns (bool) {\\n        uint160 sqrtPrice = PriceHelper.getSqrtIndexPrice(_context);\\n\\n        PositionCalculator.PositionCalculatorParams memory _params = VaultLib.getPositionCalculatorParams(\\n            _vault,\\n            _subVaults,\\n            _ranges,\\n            _context\\n        );\\n\\n        return _isVaultSafe(_context, _params, sqrtPrice);\\n    }\\n\\n    function getVaultValue(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) external view returns (int256) {\\n        uint160 sqrtPrice = PriceHelper.getSqrtIndexPrice(_context);\\n\\n        PositionCalculator.PositionCalculatorParams memory _params = VaultLib.getPositionCalculatorParams(\\n            _vault,\\n            _subVaults,\\n            _ranges,\\n            _context\\n        );\\n\\n        return VaultLib.getVaultValue(_context, _params, sqrtPrice);\\n    }\\n\\n    function _isVaultSafe(\\n        DataType.Context memory _context,\\n        PositionCalculator.PositionCalculatorParams memory _params,\\n        uint160 sqrtPrice\\n    ) internal pure returns (bool) {\\n        // calculate Min. Deposit by using TWAP.\\n        int256 minDeposit = PositionCalculator.calculateMinDeposit(_params, sqrtPrice, _context.isMarginZero);\\n\\n        int256 vaultValue;\\n        int256 marginValue;\\n        {\\n            uint256 assetValue;\\n            uint256 debtValue;\\n\\n            (marginValue, assetValue, debtValue) = PositionCalculator.calculateCollateralAndDebtValue(\\n                _params,\\n                sqrtPrice,\\n                _context.isMarginZero,\\n                false\\n            );\\n\\n            vaultValue = marginValue.add(int256(assetValue)).sub(int256(debtValue));\\n\\n            if (debtValue == 0) {\\n                // if debt value is 0 then vault is safe.\\n                return true;\\n            }\\n        }\\n\\n        return minDeposit <= vaultValue && marginValue >= 0;\\n    }\\n\\n    function reducePosition(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context storage _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        uint256 _penaltyAmount\\n    ) public returns (uint256 penaltyAmount, DataType.PositionUpdateResult memory positionUpdateResult) {\\n        // reduce position\\n        positionUpdateResult = PositionUpdater.updatePosition(\\n            _vault,\\n            _subVaults,\\n            _context,\\n            _ranges,\\n            _positionUpdates,\\n            // reduce only\\n            DataType.TradeOption(true, true, false, _context.isMarginZero, -2, -2, bytes(\\\"\\\"))\\n        );\\n\\n        require(0 == positionUpdateResult.requiredAmounts.amount0, \\\"L2\\\");\\n        require(0 == positionUpdateResult.requiredAmounts.amount1, \\\"L3\\\");\\n\\n        {\\n            if (_context.isMarginZero) {\\n                (_vault.marginAmount0, penaltyAmount) = PredyMath.subReward(_vault.marginAmount0, _penaltyAmount);\\n            } else {\\n                (_vault.marginAmount1, penaltyAmount) = PredyMath.subReward(_vault.marginAmount1, _penaltyAmount);\\n            }\\n        }\\n    }\\n\\n    function sendReward(\\n        DataType.Context memory _context,\\n        address _liquidator,\\n        uint256 _reward\\n    ) internal {\\n        TransferHelper.safeTransfer(_context.isMarginZero ? _context.token0 : _context.token1, _liquidator, _reward);\\n    }\\n\\n    function getSqrtIndexPrice(DataType.Context memory _context) external view returns (uint160) {\\n        return PriceHelper.getSqrtIndexPrice(_context);\\n    }\\n}\\n\",\"keccak256\":\"0xf83d5aff382c3a4c35caac3bd81ee33e9f43e10f17ae02d93a1a8e48a3b1b69b\",\"license\":\"UNLICENSED\"},\"src/libraries/logic/UpdatePositionLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport {TransferHelper} from \\\"lib/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport {IVaultNFT} from \\\"../../interfaces/IVaultNFT.sol\\\";\\nimport \\\"./LiquidationLogic.sol\\\";\\nimport \\\"../DataType.sol\\\";\\nimport \\\"../PositionLib.sol\\\";\\nimport \\\"../PositionCalculator.sol\\\";\\nimport \\\"../PositionUpdater.sol\\\";\\nimport \\\"../PriceHelper.sol\\\";\\n\\n/**\\n * @title UpdatePositionLogic library\\n * @notice Implements the base logic for all the actions related to update position.\\n * Error Codes\\n * UPL0: vault must be safe\\n */\\nlibrary UpdatePositionLogic {\\n    using SafeMath for uint256;\\n\\n    function updatePosition(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context storage _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        DataType.TradeOption memory _tradeOption\\n    ) external returns (DataType.PositionUpdateResult memory positionUpdateResult) {\\n        require(!_tradeOption.isLiquidationCall);\\n\\n        // update position in the vault\\n        positionUpdateResult = PositionUpdater.updatePosition(\\n            _vault,\\n            _subVaults,\\n            _context,\\n            _ranges,\\n            _positionUpdates,\\n            _tradeOption\\n        );\\n\\n        if (_tradeOption.quoterMode) {\\n            revertRequiredAmounts(positionUpdateResult);\\n        }\\n\\n        // check the vault is safe\\n        require(LiquidationLogic.isVaultSafe(_vault, _subVaults, _context, _ranges), \\\"UPL0\\\");\\n\\n        if (positionUpdateResult.requiredAmounts.amount0 > 0) {\\n            TransferHelper.safeTransferFrom(\\n                _context.token0,\\n                msg.sender,\\n                address(this),\\n                uint256(positionUpdateResult.requiredAmounts.amount0)\\n            );\\n        } else if (positionUpdateResult.requiredAmounts.amount0 < 0) {\\n            TransferHelper.safeTransfer(\\n                _context.token0,\\n                msg.sender,\\n                uint256(-positionUpdateResult.requiredAmounts.amount0)\\n            );\\n        }\\n\\n        if (positionUpdateResult.requiredAmounts.amount1 > 0) {\\n            TransferHelper.safeTransferFrom(\\n                _context.token1,\\n                msg.sender,\\n                address(this),\\n                uint256(positionUpdateResult.requiredAmounts.amount1)\\n            );\\n        } else if (positionUpdateResult.requiredAmounts.amount1 < 0) {\\n            TransferHelper.safeTransfer(\\n                _context.token1,\\n                msg.sender,\\n                uint256(-positionUpdateResult.requiredAmounts.amount1)\\n            );\\n        }\\n    }\\n\\n    function revertRequiredAmounts(DataType.PositionUpdateResult memory positionUpdateResult) internal pure {\\n        int256 r0 = positionUpdateResult.requiredAmounts.amount0;\\n        int256 r1 = positionUpdateResult.requiredAmounts.amount1;\\n        int256 f0 = positionUpdateResult.feeAmounts.amount0;\\n        int256 f1 = positionUpdateResult.feeAmounts.amount1;\\n        int256 p0 = positionUpdateResult.positionAmounts.amount0;\\n        int256 p1 = positionUpdateResult.positionAmounts.amount1;\\n        int256 s0 = positionUpdateResult.swapAmounts.amount0;\\n        int256 s1 = positionUpdateResult.swapAmounts.amount1;\\n\\n        assembly {\\n            let ptr := mload(0x20)\\n            mstore(ptr, r0)\\n            mstore(add(ptr, 0x20), r1)\\n            mstore(add(ptr, 0x40), f0)\\n            mstore(add(ptr, 0x60), f1)\\n            mstore(add(ptr, 0x80), p0)\\n            mstore(add(ptr, 0xA0), p1)\\n            mstore(add(ptr, 0xC0), s0)\\n            mstore(add(ptr, 0xE0), s1)\\n            revert(ptr, 256)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23ad9d05fce4f70a148e16329e9e4d1549555fb44ee46fee88c60fa10e35c4c4\",\"license\":\"UNLICENSED\"},\"src/vendors/IUniswapV3PoolOracle.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV3PoolOracle {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory liquidityCumulatives);\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 liquidityCumulative,\\n            bool initialized\\n        );\\n\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xfea4874a356a0b0b1c6413d4773012cacea74858937ce44ca1b40314d042402e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806386e6862d11610104578063e77bbb9a116100a2578063ef56d73d11610071578063ef56d73d14610431578063f3c3cc8914610444578063f46a647714610457578063ffdea55f1461046a576101cf565b8063e77bbb9a146103c6578063eb02c301146103e8578063ebd2665f14610408578063ec52ad081461041e576101cf565b8063ba4247b0116100de578063ba4247b014610378578063c3d2ca2d14610380578063d1e6419714610393578063d3487997146103b3576101cf565b806386e6862d1461033d5780639403b63414610345578063b3ab15fb14610365576101cf565b806346ed2e2711610171578063671148591161014b57806367114859146102e457806368715773146102f75780636f85ba9c1461030a57806385951bfe1461032a576101cf565b806346ed2e271461029657806351be57d3146102b7578063570ca735146102cf576101cf565b806330050fbd116101ad57806330050fbd1461022b5780633743d1421461024b5780633c678e14146102605780633e12971514610276576101cf565b8063013216f5146101d4578063127f0f07146101fd578063275892a214610216575b600080fd5b6101e76101e23660046144b3565b61047d565b6040516101f491906154f2565b60405180910390f35b610205610510565b6040516101f4959493929190615331565b61021e61053e565b6040516101f49190615373565b61023e6102393660046144b3565b610544565b6040516101f491906155ea565b61025e6102593660046144cb565b6106de565b005b610268610791565b6040516101f49291906154d6565b6102896102843660046144b3565b6107ee565b6040516101f49190615326565b6102a96102a4366004614bb2565b6108a5565b6040516101f49291906156ab565b6102bf6108dd565b6040516101f49493929190615a7a565b6102d76108ec565b6040516101f4919061518b565b61025e6102f2366004614570565b6108fb565b61025e610305366004614555565b61095e565b61031d6103183660046144b3565b6109a8565b6040516101f4919061555a565b6102a9610338366004614cb0565b610ad2565b6102d7610b5b565b6103586103533660046144b3565b610b78565b6040516101f491906157ad565b61025e61037336600461426f565b610c0c565b6102d7610c9f565b61021e61038e3660046144b3565b610d2a565b6103a66103a1366004614c07565b610dcc565b6040516101f491906156e3565b61025e6103c1366004614c36565b610efe565b6103d96103d4366004614b52565b610f55565b6040516101f493929190615a59565b6103fb6103f63660046144b3565b611028565b6040516101f491906151b8565b610410611033565b6040516101f49291906156c6565b61021e61042c3660046144cb565b6110f4565b6103d961043f3660046148c6565b611265565b6102a9610452366004614a2d565b6112d2565b61025e6104653660046145a5565b6113df565b61025e610478366004614aef565b611782565b6104856139ab565b50600081815260026020818152604092839020835161010081018552815480850b850b850b825263010000008104850b850b850b93820193909352600160301b9092046001600160801b03169382019390935260018301546060820152908201546080820152600382015460a0820152600482015460c082015260059091015460e08201525b919050565b600954600a54600854601b54601c54600160a01b90940460ff169492936001600160a01b0390921692909190565b60015481565b61054c6139ff565b600082815260046020908152604091829020825160808101845281548152835160a081019094526001820180549194929385019291829060ff16600281111561059157fe5b600281111561059c57fe5b81526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001600682016040518060a00160405290816000820160009054906101000a900460ff1660028111156105fa57fe5b600281111561060557fe5b81526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b828210156106d05760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a0830152908352909201910161065a565b505050915250909392505050565b602a546001600160a01b031633146107115760405162461bcd60e51b8152600401610708906153d1565b60405180910390fd5b601b5482118015906107255750601c548111155b6107415760405162461bcd60e51b8152600401610708906153ed565b601b80548390039055601c80548290039055811561077057600554610770906001600160a01b03163384611852565b801561078d5760065461078d906001600160a01b03163383611852565b5050565b60408051608080820183526021548252602254602080840191909152602354838501526024546060808501919091528451928301855260255483526026549183019190915260275493820193909352602854928101929092529082565b60006107f86119a0565b61080182611a34565b600082815260036020526040908190209051630d5e377d60e11b815273__$a1fa80d38d689cae49e54718da49b6432c$__91631abc6efa9161084e919060049060059060029083016159ad565b60206040518083038186803b15801561086657600080fd5b505af415801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089e9190614497565b1592915050565b6108ad613a33565b6108b5613a33565b6108bd6119a0565b6108d1856108ca87611a74565b86866112d2565b91509150935093915050565b601d54601e54601f5460205484565b602a546001600160a01b031681565b602a546001600160a01b031633146109255760405162461bcd60e51b8152600401610708906153d1565b81516025556020808301516026556040808401516027556060938401516028558251602155908201516022558101516023550151602455565b602a546001600160a01b031633146109885760405162461bcd60e51b8152600401610708906153d1565b8051601d55602080820151601e556040820151601f556060909101519055565b6109b0613a4d565b60008281526003602081815260408084208151608081018352815481526001820154818501526002820154818401529381018054835181860281018601909452808452919360608601939290830182828015610a2b57602002820191906000526020600020905b815481526020019060010190808311610a17575b50505091909252505060405163149ccfa160e11b815291925073__$b4a4919001844372a79711112cfb20c2b9$__916329399f429150610a779084906004906002906005908301615811565b60006040518083038186803b158015610a8f57600080fd5b505af4158015610aa3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610acb9190810190614678565b9392505050565b610ada613a33565b610ae2613a33565b610aea6119a0565b604080516001808252818301909252600091816020015b610b09613a8a565b815260200190600190039081610b01579050509050610b288787611c5a565b81600081518110610b3557fe5b6020026020010181905250610b4c878287876112d2565b92509250505b94509492505050565b600854600090610b73906001600160a01b0316611fe8565b905090565b610b80613ac0565b6000828152600360208181526040928390208351608081018552815481526001820154818401526002820154818601529281018054855181850281018501909652808652939491936060860193830182828015610bfc57602002820191906000526020600020905b815481526020019060010190808311610be8575b5050505050815250509050919050565b602a546001600160a01b03163314610c365760405162461bcd60e51b8152600401610708906153d1565b6001600160a01b038116610c4957600080fd5b602a80546001600160a01b0319166001600160a01b0383161790556040517fb3b3f5f64ab192e4b5fefde1f51ce9733bbdcf831951543b325aebd49cc27ec490610c9490839061518b565b60405180910390a150565b6040516310fe062760e11b815260009073__$a1fa80d38d689cae49e54718da49b6432c$__906321fc0c4e90610cda90600590600401615442565b60206040518083038186803b158015610cf257600080fd5b505af4158015610d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b73919061428b565b600081815260036020526040808220905163b7f22f3960e01b815273__$a1fa80d38d689cae49e54718da49b6432c$__9163b7f22f3991610d76919060049060059060029083016159ad565b60206040518083038186803b158015610d8e57600080fd5b505af4158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc691906144ec565b92915050565b610dd4613ac0565b610ddc6119a0565b610de583611a34565b6000838152600360208181526040928390208351608081018552815481526001820154818401526002820154818601529281018054855181850281018501909652808652939491936060860193830182828015610e6157602002820191906000526020600020905b815481526020019060010190808311610e4d575b505050919092525050604051635d8d458360e11b815273__$b4a4919001844372a79711112cfb20c2b9$__9263bb1a8b069250610eaa916004906002906005908990840161589d565b60006040518083038186803b158015610ec257600080fd5b505af4158015610ed6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610acb9190810190614798565b6008546001600160a01b03163314610f1557600080fd5b8315610f3257600554610f32906001600160a01b03163386611852565b8215610f4f57600654610f4f906001600160a01b03163385611852565b50505050565b6000610f5f613a33565b610f67613a33565b600073__$7ffffda71c6e7abde662efb5427d8d1c5d$__6307927e4b888860600151610f91610b5b565b89604001516040518563ffffffff1660e01b8152600401610fb594939291906155b2565b60006040518083038186803b158015610fcd57600080fd5b505af4158015610fe1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110099190810190614367565b905061101788828888611265565b919a90995090975095505050505050565b6060610dc682611a74565b61103b613ae8565b611043613ae8565b5050604080516101008082018352600b548252600c54602080840191909152600d5483850152600e54606080850191909152600f5460808086019190915260105460a08087019190915260115460c08088019190915260125460e080890191909152885196870189526013548752601454958701959095526015549786019790975260165492850192909252601754908401526018549083015260195493820193909352601a549281019290925291565b60008281526002602052604081206005015461111257506000610dc6565b60408051610180810182526005546001600160a01b039081168252600654808216602080850191909152600160a01b9182900462ffffff16848601526007548316606080860191909152600854841660808087019190915260095494851660a0808801919091529390940460ff16151560c080870191909152600a5460e08088019190915287516101008082018a52600b548252600c5482870152600d54828b0152600e5482860152600f54828901526010548288015260115482850152601254828401528089019190915288519081018952601354815260145481860152601554818a015260165493810193909352601754958301959095526018549382019390935260195492810192909252601a5492820192909252610120830152601b54610140830152601c546101608301526000868152600290915291909120610acb9160219161125f610b5b565b86612068565b600061126f613a33565b611277613a33565b83606001518042111561129c5760405162461bcd60e51b815260040161070890615398565b6112a46119a0565b6112af88888861215e565b8751602089015193975091955093506112c791612311565b509450945094915050565b6112da613a33565b6112e2613a33565b8260800151804211156113075760405162461bcd60e51b815260040161070890615398565b600073__$7ffffda71c6e7abde662efb5427d8d1c5d$__6366d661788888606001518860400151896060015161133b610b5b565b6040518663ffffffff1660e01b815260040161135b959493929190615254565b60006040518083038186803b15801561137357600080fd5b505af4158015611387573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113af9190810190614367565b90506113bc88828861215e565b875160208901519297509095506113d4925090612311565b505094509492505050565b600054610100900460ff16806113f857506113f8612352565b80611406575060005460ff16155b6114415760405162461bcd60e51b815260040180806020018281038252602e815260200180615b36602e913960400191505060405180910390fd5b600054610100900460ff1615801561146c576000805460ff1961ff0019909116610100171660011790555b6001600160a01b03821661147f57600080fd5b8560000151600560010160146101000a81548162ffffff021916908362ffffff1602179055508560200151600560000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508560400151600560010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508560600151600560040160146101000a81548160ff02191690831515021790555083600560020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600560040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006040518060600160405280600560000160009054906101000a90046001600160a01b03166001600160a01b03168152602001600560010160009054906101000a90046001600160a01b03166001600160a01b03168152602001600560010160149054906101000a900462ffffff1662ffffff1681525090506115fa8682612363565b600880546001600160a01b03199081166001600160a01b0393841617909155602b80549091169185169190911790556001600a55611638600b612447565b6116426013612447565b42600155602a80546001600160a01b0319163317905560055460405163095ea7b360e01b81526001600160a01b03919091169063095ea7b39061168d9088906000199060040161519f565b602060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190614497565b5060065460405163095ea7b360e01b81526001600160a01b039091169063095ea7b3906117149088906000199060040161519f565b602060405180830381600087803b15801561172e57600080fd5b505af1158015611742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117669190614497565b5050801561177a576000805461ff00191690555b505050505050565b61178a6119a0565b600073__$7ffffda71c6e7abde662efb5427d8d1c5d$__6366d661786117af85611028565b60095485516020870151600160a01b90920460ff16916117cd610b5b565b6040518663ffffffff1660e01b81526004016117ed959493929190615254565b60006040518083038186803b15801561180557600080fd5b505af4158015611819573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118419190810190614367565b905061184d838261245f565b505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b602083106118ce5780518252601f1990920191602091820191016118af565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611930576040519150601f19603f3d011682016040523d82523d6000602084013e611935565b606091505b5091509150818015611963575080511580611963575080806020019051602081101561196057600080fd5b50515b611999576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b5050505050565b60015460405163725acfd160e01b815273__$d48eea142f8e4946a86e978d6ec5b9f014$__9163725acfd1916119df91600591601d9190600401615451565b60206040518083038186803b1580156119f757600080fd5b505af4158015611a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2f91906144ec565b600155565b60408051600080825260208201909252611a7191839190611a6b565b611a58613b2d565b815260200190600190039081611a505790505b50612589565b50565b606060006003600084815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015611b0357602002820191906000526020600020905b815481526020019060010190808311611aef575b50505091909252505060408051610180810182526005546001600160a01b03908116825260065480821660208085019190915262ffffff600160a01b9283900416848601526007548316606080860191909152600854841660808087019190915260095494851660a08088019190915260ff9490950493909316151560c080870191909152600a5460e08088019190915287516101008181018a52600b548252600c5482870152600d54828b0152600e5482860152600f548288015260105482890152601154828501526012548284015280890191909152885190810189526013548152601454948101949094526015549784019790975260165491830191909152601754928201929092526018549281019290925260195490820152601a5492810192909252610120810191909152601b54610140820152601c54610160820152919250610acb918391506004906002906126ce565b611c62613a8a565b60008381526003602081815260408084208151608081018352815481526001820154818501526002820154818401529381018054835181860281018601909452808452919360608601939290830182828015611cdd57602002820191906000526020600020905b815481526020019060010190808311611cc9575b5050505050815250509050611fe0836004600084606001518781518110611d0057fe5b6020026020010151815260200190815260200160002060405180608001604052908160008201548152602001600182016040518060a00160405290816000820160009054906101000a900460ff166002811115611d5957fe5b6002811115611d6457fe5b81526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001600682016040518060a00160405290816000820160009054906101000a900460ff166002811115611dc257fe5b6002811115611dcd57fe5b81526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b82821015611e985760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101611e22565b5050509152505060408051610180810182526005546001600160a01b03908116825260065480821660208085019190915262ffffff600160a01b9283900416848601526007548316606080860191909152600854841660808087019190915260095494851660a08088019190915260ff9490950493909316151560c080870191909152600a5460e08088019190915287516101008181018a52600b548252600c5482870152600d54828b0152600e5482860152600f548288015260105482890152601154828501526012548284015280890191909152885190810189526013548152601454948101949094526015549784019790975260165491830191909152601754928201929092526018549281019290925260195490820152601a5492810192909252610120810191909152601b54610140820152601c5461016082015260029061291e565b949350505050565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561202357600080fd5b505afa158015612037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205b9190614830565b5094979650505050505050565b60c08481015160808087015160408051610100810182528854600281810b810b810b835263010000008204810b810b810b6020840152600160301b9091046001600160801b031692820192909252600189015460608201529088015492810192909252600387015460a0830152600487015493820193909352600586015460e082015260009261215292916120ff918a9187612b71565b6040805160808101825260048b0154815260058b0154602082015260068b01549181019190915260078a0154606082015261213a9086612bef565b87548790600281810b9163010000009004900b612c64565b90505b95945050505050565b6000612168613a33565b612170613a33565b602b546040805163186e33a360e21b8152905188926001600160a01b0316916361b8ce8c9160048083019260209291908290030181600087803b1580156121b657600080fd5b505af11580156121ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ee91906144ec565b811061220c5760405162461bcd60e51b815260040161070890615426565b6122168787612589565b6000612226888760400151612d1e565b604051636413e81f60e11b8152919650915060009073__$68d6cdd7134515db34cd8ee009462a2aba$__9063c827d03e906122719085906004906005906002908f908f9085016158e9565b6101006040518083038186803b15801561228a57600080fd5b505af415801561229e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c2919061471e565b805160608201519096509450905088612305578451600012806122e9575060008560200151135b6123055760405162461bcd60e51b81526004016107089061537c565b50505093509350939050565b600061231b610b5b565b6001600160a01b031690508083111580156123365750818111155b61184d5760405162461bcd60e51b815260040161070890615409565b600061235d30612ec2565b15905090565b600081602001516001600160a01b031682600001516001600160a01b03161061238b57600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b670de0b6b3a764000060048201819055600590910155565b602b546040805163186e33a360e21b8152905184926001600160a01b0316916361b8ce8c9160048083019260209291908290030181600087803b1580156124a557600080fd5b505af11580156124b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dd91906144ec565b81106124fb5760405162461bcd60e51b815260040161070890615426565b6125058383612589565b6000838152600360205260409081902090516349b3bd7960e11b815273__$a1fa80d38d689cae49e54718da49b6432c$__916393677af29161255491906004908790600590600290840161597a565b60006040518083038186803b15801561256c57600080fd5b505af4158015612580573d6000803e3d6000fd5b50505050505050565b6000828152600360208181526040808420815160808101835281548152600182015481850152600282015481840152938101805483518186028101860190945280845291936060860193929083018282801561260457602002820191906000526020600020905b8154815260200190600101908083116125f0575b505050505081525050905073__$d48eea142f8e4946a86e978d6ec5b9f014$__63a5d330ad8260046002600587602161263b610b5b565b6040518863ffffffff1660e01b815260040161265d9796959493929190615841565b60006040518083038186803b15801561267557600080fd5b505af4158015612689573d6000803e3d6000fd5b5050604051637ce761e760e01b815273__$da03e66f624374a74ff67f4d42d7f52632$__9250637ce761e7915061255490600590859060049060029089908301615485565b60608460600151516001600160401b03811180156126eb57600080fd5b5060405190808252806020026020018201604052801561272557816020015b612712613a8a565b81526020019060019003908161270a5790505b50905060005b856060015151811015612915576128f6818660008960600151858151811061274f57fe5b6020026020010151815260200190815260200160002060405180608001604052908160008201548152602001600182016040518060a00160405290816000820160009054906101000a900460ff1660028111156127a857fe5b60028111156127b357fe5b81526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001600682016040518060a00160405290816000820160009054906101000a900460ff16600281111561281157fe5b600281111561281c57fe5b81526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152602001600b8201805480602002602001604051908101604052809291908181526020016000905b828210156128e75760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101612871565b5050505081525050868661291e565b82828151811061290257fe5b602090810291909101015260010161272b565b50949350505050565b612926613a8a565b60008460600151516001600160401b038111801561294357600080fd5b5060405190808252806020026020018201604052801561297d57816020015b61296a613b73565b8152602001906001900390816129625790505b50905060005b856060015151811015612ace576000866060015182815181106129a257fe5b60209081029190910181015181015160008181528883526040908190208151610100810183528154600281810b810b810b835263010000008204810b810b810b96830196909652600160301b90046001600160801b031681840152600182015460608083019190915294820154608080830191909152600383015460a0830152600483015460c083015260059092015460e08201528251918201909252928a0151805192945090929182919086908110612a5857fe5b6020026020010151600001511515815260200189606001518581518110612a7b57fe5b6020026020010151604001516001600160801b03168152602001826000015160020b8152602001826020015160020b815250848481518110612ab957fe5b60209081029190910101525050600101612983565b506040518060c00160405280878152602001612afc8760200151866101000151612ec890919063ffffffff16565b8152602001612b1d8760400151866101200151612ec890919063ffffffff16565b8152602001612b3e8760200151866101000151612f0c90919063ffffffff16565b8152602001612b5f8760400151866101200151612f0c90919063ffffffff16565b81526020019190915295945050505050565b600080612b88868686600001518760200151612f49565b9050670de0b6b3a7640000612bdd82612bd78960000160405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505087612bef565b90613011565b81612be457fe5b049695505050505050565b81516020830151600091908311612c1e57670de0b6b3a76400008460400151840281612c1757fe5b0401610acb565b670de0b6b3a7640000846040015185602001510281612c3957fe5b0481019050670de0b6b3a76400008460200151840385606001510281612c5b57fe5b04019392505050565b6000806000612c8d86612c768761306a565b612c7f8761306a565b670de0b6b3a764000061339c565b91509150612ca689876001600160a01b03168484613437565b9250612cc4670de0b6b3a7640000612cbe858a613011565b906134a6565b92506000612cdb8a886001600160a01b031661350d565b9050612d10612d09670de0b6b3a7640000612cbe8c612bd7612d0487662386f26fc10000613011565b6135d5565b8590613679565b9a9950505050505050505050565b60008083612dfb57602b546040516354ba0f2760e01b81526001600160a01b03909116906354ba0f2790612d5690339060040161518b565b602060405180830381600087803b158015612d7057600080fd5b505af1158015612d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da891906144ec565b60008181526003602052604090819020829055519092507fbf3e9c93de94306b70ac5b9411edf475545815333bf651b894b9eada6482c59490612dee9084903390615a42565b60405180910390a1612eac565b602b546040516331a9108f60e11b815285935033916001600160a01b031690636352211e90612e2e908690600401615373565b60206040518083038186803b158015612e4657600080fd5b505afa158015612e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7e919061428b565b6001600160a01b03161480612e905750825b612eac5760405162461bcd60e51b8152600401610708906153b5565b5060008181526003602052604090209250929050565b3b151590565b6000600182516002811115612ed957fe5b1415612f0157612efa82602001518460800151670de0b6b3a76400006136d3565b9050610dc6565b506020810151610dc6565b6000600182516002811115612f1d57fe5b1415612f3e57612efa82604001518460a00151670de0b6b3a76400006136d3565b506040810151610dc6565b6000806000612f598686866136f2565b9150915060008585604051602001612f7292919061516e565b60408051601f198184030181529181528151602092830120600081815260088c0190935291205490915083111580612fbd575060008181526008890160205260409020600101548211155b15612fce5760009350505050611fe0565b600081815260088901602052604090206001810154905490830390612ffd908503670de0b6b3a7640000613011565b8161300457fe5b0498975050505050505050565b60008261302057506000610dc6565b8282028284828161302d57fe5b0414610acb5760405162461bcd60e51b8152600401808060200182810382526021815260200180615b646021913960400191505060405180910390fd5b60008060008360020b12613081578260020b613089565b8260020b6000035b9050620d89e88111156130c7576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b6000600182166130db57600160801b6130ed565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613121576ffff97272373d413259a46990580e213a0260801c5b6004821615613140576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561315f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561317e576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561319d576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156131bc576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156131db576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156131fb576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561321b576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561323b576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561325b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161561327b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b61200082161561329b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156132bb576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156132db576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156132fc576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561331c576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561333b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615613358576b048a170391f7dc42444e8fa20260801c5b60008460020b131561337357806000198161336f57fe5b0490505b64010000000081061561338757600161338a565b60005b60ff16602082901c0192505050919050565b600080836001600160a01b0316856001600160a01b031611156133bd579293925b846001600160a01b0316866001600160a01b0316116133e8576133e1858585613854565b9150610b52565b836001600160a01b0316866001600160a01b031610156134215761340d868585613854565b915061341a8587856138bd565b9050610b52565b61342c8585856138bd565b905094509492505050565b60008085156134835761345a8580670de0b6b3a7640000600160c01b5b046138fc565b905080613465575060015b8083670de0b6b3a7640000028161347857fe5b058401915050611fe0565b6134928586600160601b6138fc565b600160601b9085020583019150611fe09050565b60008082116134fc576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161350557fe5b049392505050565b6000821561356c5761352d8280670de0b6b3a7640000600160c01b613454565b90508061354b57506f4b3b4ca85a86c47a098a224000000000610dc6565b806f4b3b4ca85a86c47a098a2240000000008161356457fe5b049050613598565b600160601b6064670de0b6b3a764000061358b8586600160601b6138fc565b02028161359457fe5b0490505b6f4b3b4ca85a86c47a098a2240000000008111156135c757506f4b3b4ca85a86c47a098a224000000000610dc6565b80610dc65750600192915050565b60b581600160881b81106135ee5760409190911b9060801c5b6901000000000000000000811061360a5760209190911b9060401c5b6501000000000081106136225760109190911b9060201c5b630100000081106136385760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b600082820183811015610acb576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b8282028115158415858304851417166136eb57600080fd5b0492915050565b6040805160018082528183019092526000918291829160208083019080368337505060405163883bdbfd60e01b81529192506000916001600160a01b038916915063883bdbfd906137479085906004016152dc565b60006040518083038186803b15801561375f57600080fd5b505afa158015613773573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261379b91908101906142a7565b915050806000815181106137ab57fe5b60200260200101516001600160a01b03169250866001600160a01b031663a38807f287876040518363ffffffff1660e01b81526004016137ec92919061535f565b60606040518083038186803b15801561380457600080fd5b505afa158015613818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383c9190614504565b506001600160a01b0316989397509295505050505050565b6000826001600160a01b0316846001600160a01b03161115613874579192915b836001600160a01b03166138ad606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b03166138fc565b816138b457fe5b04949350505050565b6000826001600160a01b0316846001600160a01b031611156138dd579192915b611fe0826001600160801b03168585036001600160a01b0316600160601b5b6000808060001985870986860292508281109083900303905080613932576000841161392757600080fd5b508290049050610acb565b80841161393e57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604051806101000160405280600060020b8152602001600060020b815260200160006001600160801b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806080016040528060008152602001613a19613b9a565b8152602001613a26613b9a565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6040518060800160405280600081526020016000815260200160008152602001606081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160a081019091528060008152602001600081526020016000815260200160008152602001600081525090565b803561050b81615ae1565b600082601f830112613be5578081fd5b81356020613bfa613bf583615ab8565b615a95565b82815281810190858301608080860288018501891015613c18578687fd5b865b86811015613ca95781838b031215613c30578788fd5b604080518381018181106001600160401b0382111715613c4c57fe5b82528435613c5981615af6565b815284880135613c6881615b20565b8189015284820135613c7981615b11565b8083830152506060915081850135613c9081615b11565b9181019190915285529385019391810191600101613c1a565b509198975050505050505050565b600082601f830112613cc7578081fd5b81516020613cd7613bf583615ab8565b82815281810190858301608080860288018501891015613cf5578687fd5b865b86811015613ca95781838b031215613d0d578788fd5b604080518381018181106001600160401b0382111715613d2957fe5b82528451613d3681615af6565b815284880151613d4581615b20565b8189015284820151613d5681615b11565b8083830152506060915081850151613d6d81615b11565b9181019190915285529385019391810191600101613cf7565b600082601f830112613d96578081fd5b81516020613da6613bf583615ab8565b828152818101908583016101e080860288018501891015613dc5578687fd5b865b86811015613ca957828a0382811215613dde578889fd5b60408051608081016001600160401b038282108183111715613dfc57fe5b8184526060851215613e0c578c8dfd5b60e0830194508185108186111715613e2057fe5b50838352865181528987015160a08301528683015160c08301528152613e498d60608801614102565b89820152613e5a8d60e08801614102565b82820152613e6c8d6101608801614102565b6060820152875250509385019391810191600101613dc7565b600082601f830112613e95578081fd5b81516020613ea5613bf583615ab8565b8281528181019085830183850287018401881015613ec1578586fd5b855b85811015613ee8578151613ed681615ae1565b84529284019290840190600101613ec3565b5090979650505050505050565b803561050b81615af6565b805161050b81615af6565b600082601f830112613f1b578081fd5b81356001600160401b03811115613f2e57fe5b613f41601f8201601f1916602001615a95565b818152846020838601011115613f55578283fd5b816020850160208301379081016020019190915292915050565b803561050b81615b04565b805161050b81615b04565b803561050b81615b11565b805161050b81615b11565b8051600681900b811461050b57600080fd5b600060a08284031215613fbe578081fd5b60405160a081018181106001600160401b0382111715613fda57fe5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b600060808284031215614026578081fd5b604051608081018181106001600160401b038211171561404257fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600060c08284031215614084578081fd5b60405160c081016001600160401b0382821081831117156140a157fe5b81604052829350843583526020850135602084015260408501356040840152606085013560608401526080850135608084015260a08501359150808211156140e857600080fd5b506140f585828601613bd5565b60a0830152505092915050565b600060808284031215614113578081fd5b604051608081018181106001600160401b038211171561412f57fe5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600060408284031215614171578081fd5b604051604081018181106001600160401b038211171561418d57fe5b604052825181526020928301519281019290925250919050565b600060e082840312156141b8578081fd5b6141c260e0615a95565b90506141cd82613ef5565b81526141db60208301613ef5565b60208201526141ec60408301613ef5565b60408201526141fd60608301613ef5565b60608201526080820135608082015260a082013560a082015260c08201356001600160401b0381111561422f57600080fd5b61423b84828501613f0b565b60c08301525092915050565b803561050b81615b20565b805161050b81615b20565b805161ffff8116811461050b57600080fd5b600060208284031215614280578081fd5b8135610acb81615ae1565b60006020828403121561429c578081fd5b8151610acb81615ae1565b600080604083850312156142b9578081fd5b82516001600160401b03808211156142cf578283fd5b818501915085601f8301126142e2578283fd5b815160206142f2613bf583615ab8565b82815281810190858301838502870184018b101561430e578788fd5b8796505b848710156143375761432381613f9b565b835260019690960195918301918301614312565b5091880151919650909350505080821115614350578283fd5b5061435d85828601613e85565b9150509250929050565b60006020808385031215614379578182fd5b82516001600160401b038082111561438f578384fd5b818501915085601f8301126143a2578384fd5b81516143b0613bf582615ab8565b81815284810190848601610100808502870188018b10156143cf578889fd5b8896505b848710156144885780828c0312156143e9578889fd5b6040805182810181811089821117156143fe57fe5b825261440984613f7a565b8152898401518a82015261441e828501613f00565b8282015260609150614431828501614252565b8282015260809150614444828501613f90565b8282015260a09150614457828501613f90565b9181019190915260c0838101519082015260e0808401519082015284526001969096019592870192908101906143d3565b50909998505050505050505050565b6000602082840312156144a8578081fd5b8151610acb81615af6565b6000602082840312156144c4578081fd5b5035919050565b600080604083850312156144dd578182fd5b50508035926020909101359150565b6000602082840312156144fd578081fd5b5051919050565b600080600060608486031215614518578081fd5b61452184613f9b565b9250602084015161453181615ae1565b604085015190925063ffffffff8116811461454a578182fd5b809150509250925092565b600060808284031215614566578081fd5b610acb8383614015565b6000806101008385031215614583578182fd5b61458d8484614015565b915061459c8460808501614015565b90509250929050565b60008060008060008587036101008112156145be578384fd5b60808112156145cb578384fd5b50604051608081018181106001600160401b03821117156145e857fe5b604052863562ffffff811681146145fd578485fd5b8152602087013561460d81615ae1565b602082015261461e60408801613bca565b604082015261462f60608801613ef5565b6060820152945061464260808701613bca565b935061465060a08701613bca565b925061465e60c08701613bca565b915061466c60e08701613bca565b90509295509295909350565b600060208284031215614689578081fd5b81516001600160401b038082111561469f578283fd5b9083019060e082860312156146b2578283fd5b6146bc60e0615a95565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115614703578485fd5b61470f87828601613cb7565b60c08301525095945050505050565b60006101008284031215614730578081fd5b604051608081018181106001600160401b038211171561474c57fe5b6040526147598484614160565b81526147688460408501614160565b602082015261477a8460808501614160565b604082015261478c8460c08501614160565b60608201529392505050565b6000602082840312156147a9578081fd5b81516001600160401b03808211156147bf578283fd5b90830190608082860312156147d2578283fd5b6040516080810181811083821117156147e757fe5b8060405250825181526020830151602082015260408301516040820152606083015182811115614815578485fd5b61482187828601613d86565b60608301525095945050505050565b600080600080600080600060e0888a03121561484a578485fd5b875161485581615ae1565b602089015190975061486681615b11565b95506148746040890161425d565b94506148826060890161425d565b93506148906080890161425d565b925060a088015160ff811681146148a5578283fd5b60c08901519092506148b681615af6565b8091505092959891949750929550565b60008060008060e085870312156148db578182fd5b843593506020808601356001600160401b03808211156148f9578485fd5b818801915088601f83011261490c578485fd5b813561491a613bf582615ab8565b81815284810190848601610100808502870188018e101561493957898afd5b8996505b848710156149ea5780828f03121561495357898afd5b60408051828101818110898211171561496857fe5b825261497384613f6f565b8152898401358a820152614988828501613ef5565b8282015261499860608501614247565b60608201526149a960808501613f85565b60808201526149ba60a08501613f85565b60a082015260c0848101359082015260e0808501359082015285525060019690960195928701929081019061493d565b509098505050506040880135925080831115614a04578485fd5b5050614a12878288016141a7565b925050614a228660608701614015565b905092959194509250565b6000806000806101008587031215614a43578182fd5b843593506020808601356001600160401b0380821115614a61578485fd5b818801915088601f830112614a74578485fd5b8135614a82613bf582615ab8565b81815284810190848601885b84811015614ab757614aa58e8984358a0101614073565b84529287019290870190600101614a8e565b509098505050506040880135925080831115614ad1578485fd5b5050614adf878288016141a7565b925050614a228660608701613fad565b6000808284036060811215614b02578283fd5b833592506040601f1982011215614b17578182fd5b50604051604081018181106001600160401b0382111715614b3457fe5b60409081526020858101358352940135938101939093525092909150565b60008060008060e08587031215614b67578182fd5b8435935060208501356001600160401b0380821115614b84578384fd5b614b9088838901614073565b94506040870135915080821115614ba5578384fd5b50614a12878288016141a7565b600080600060e08486031215614bc6578081fd5b8335925060208401356001600160401b03811115614be2578182fd5b614bee868287016141a7565b925050614bfe8560408601613fad565b90509250925092565b60008060408385031215614c19578182fd5b823591506020830135614c2b81615ae1565b809150509250929050565b60008060008060608587031215614c4b578182fd5b843593506020850135925060408501356001600160401b0380821115614c6f578384fd5b818701915087601f830112614c82578384fd5b813581811115614c90578485fd5b886020828501011115614ca1578485fd5b95989497505060200194505050565b6000806000806101008587031215614cc6578182fd5b843593506020850135925060408501356001600160401b03811115614ce9578283fd5b614adf878288016141a7565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015614d3b57614d28878351614f88565b6080969096019590820190600101614d15565b509495945050505050565b6000815180845260208085019450808401835b83811015614d3b5781518051600b8110614d6f57fe5b88528084015184890152604080820151151590890152606080820151614d97828b0182615158565b5050608080820151614dab828b0182614e39565b505060a080820151614dbf828b0182614e39565b505060c0818101519089015260e090810151908801526101009096019590820190600101614d59565b15159052565b60008151808452815b81811015614e1357602081850181015186830182015201614df7565b81811115614e245782602083870101525b50601f01601f19169290920160200192915050565b60020b9052565b805160038110614e4c57fe5b8252602081810151908301526040808201519083015260608082015190830152608090810151910152565b614e8a82614e858354615ad5565b614cf5565b60018101546001600160a01b03614ea660208501828416614cf5565b614ebb6040850162ffffff8460a01c16615165565b614ec86002840154615ad5565b9150614ed76060850183614cf5565b614ee46003840154615ad5565b9150614ef36080850183614cf5565b60048301549150614f0960a08501828416614cf5565b50614f1d60c0840160ff8360a01c16614de8565b50600581015460e0830152614f396101008301600683016150a2565b614f4a6102008301600e83016150a2565b60168101546103008301526017015461032090910152565b805182526020810151602083015260408101516040830152606081015160608301525050565b8051151582526001600160801b036020820151166020830152604081015160020b6040830152606081015160020b60608301525050565b600060c08301825184526020808401518186015260408401516040860152606084015160608601526080808501518187015260a085015160c060a088015283815180865260e08901915084830195508692505b8083101561503957615025828751614f88565b948401946001929092019190830190615012565b50979650505050505050565b80518252602090810151910152565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b8054825260018101546020830152600281015460408301526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e090910152565b60006080830182518452602080840151818601526040840151604086015260608401516080606087015282815180855260a08801915083830194508592505b8083101561514d578451825293830193600192909201919083019061512d565b509695505050505050565b6001600160801b03169052565b62ffffff169052565b600292830b60e890811b82529190920b901b600382015260060190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561524657888303603f1901855281518051845287810151888501528681015187850152606080820151908501526080808201519085015260a09081015160c09185018290529061523281860183614d02565b9689019694505050908601906001016151dc565b509098975050505050505050565b600060a0820160a0835280885180835260c0850191506020925060c0838202860101838b01855b838110156152a95760bf19888403018552615297838351614fbf565b9486019492509085019060010161527b565b505098151592850192909252505050604081019390935260608301919091526001600160a01b0316608090910152919050565b6020808252825182820181905260009190848201906040850190845b8181101561531a57835163ffffffff16835292840192918401916001016152f8565b50909695505050505050565b901515815260200190565b941515855260208501939093526001600160a01b039190911660408401526060830152608082015260a00190565b600292830b8152910b602082015260400190565b90815260200190565b602080825260029082015261140d60f21b604082015260600190565b60208082526003908201526243483160e81b604082015260600190565b602080825260029082015261503160f01b604082015260600190565b602080825260029082015261503360f01b604082015260600190565b6020808252600290820152610a0760f31b604082015260600190565b60208082526003908201526221a41960e91b604082015260600190565b602080825260029082015261281960f11b604082015260600190565b6103408101610dc68284614e77565b928352815460208401526001820154604084015260028201546060840152600390910154608083015260a082015260c00190565b60006103c06154948389614e77565b806103408401526154a7818401886150ee565b905085610360840152846103808401528281036103a08401526154ca8185614d46565b98975050505050505050565b61010081016154e58285614f62565b610acb6080830184614f62565b600061010082019050825160020b8252602083015160020b60208301526001600160801b036040840151166040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60006020825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e080840152611fe0610100840182614d02565b6000608082526155c56080830187614fbf565b9415156020830152506001600160a01b03929092166040830152606090910152919050565b600060208083526101a0830184518285015281850151604061560e81870183614e40565b80870151915061562160e0870183614e40565b6060878101516101808881015280519485905285019390925085906101c08801905b8083101561569e5785518051151583528781015188840152848101516001600160801b03168584015285810151868401526080808201519084015260a09081015190830152948601946001929092019160c090910190615643565b5098975050505050505050565b608081016156b98285615045565b610acb6040830184615045565b61020081016156d58285615054565b610acb610100830184615054565b6020808252825182820152828101516040808401919091528084015160608085019190915280850151608080860152805160a08601819052600094939184019285929160c08801905b8085101561569e5785518051805184528881015189850152850151858401528781015161575b85850182614f62565b5080850151805160e08501528881015161010085015280860151610120850152840151610140840152830151615795610160840182614f62565b506101e082019150868601955060018501945061572c565b6000602080835260a0830184518285015281850151604085015260408501516060850152606085015160808086015281815180845260c08701915084830193508592505b8083101561514d57835182529284019260019290920191908401906157f1565b60006103a0808352615825818401886150ee565b9150508460208301528360408301526121556060830184614e77565b600060e0825261585460e083018a6150ee565b88602084015287604084015286606084015282810360808401526158788187614d46565b60a084019590955250506001600160a01b039190911660c09091015295945050505050565b60006103c08083526158b1818401896150ee565b9150508560208301528460408301526158cd6060830185614e77565b6001600160a01b03929092166103a09190910152949350505050565b600087825286602083015285604083015284606083015260c0608083015261591460c0830185614d46565b82810360a0840152835115158152602084015115156020820152604084015115156040820152606084015161594c6060830182614de8565b506080840151608082015260a084015160a082015260c084015160e060c0830152612d1060e0830182614dee565b600086825285602083015260a0604083015261599960a0830186614d46565b606083019490945250608001529392505050565b6103a08082528554908201526001808601546103c083015260028601546103e083015260806104008301526003860180546104208401819052600091825260208083209293929091610440860190855b81811015615a185783548352928501929184019185016159fd565b5050918501889052509150615a3290506040830185614e77565b8261038083015295945050505050565b9182526001600160a01b0316602082015260400190565b83815260a08101615a6d6020830185615045565b611fe06060830184615045565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b0381118282101715615ab057fe5b604052919050565b60006001600160401b03821115615acb57fe5b5060209081020190565b6001600160a01b031690565b6001600160a01b0381168114611a7157600080fd5b8015158114611a7157600080fd5b600b8110611a7157600080fd5b8060020b8114611a7157600080fd5b6001600160801b0381168114611a7157600080fdfe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122002fff706d06e8aa11108d81e25f4af98dd00c17bf3498fe4d3547b580919100664736f6c63430007060033",
  "libraries": {
    "UpdatePositionLogic": "0xa07183a20896b5f54807064796222642B34E4f84",
    "LiquidationLogic": "0xe6F220Df9488F4852164d167215d506f6AFcda29",
    "PositionUpdater": "0x885b70263A5E5D83A679126fD8EF944D005A7E5E",
    "VaultLib": "0xd4c931783D97f47e657b82cfC96fee1daea64C56",
    "PositionLib": "0x0854b03A3DCc55AC5F05A586827876faFac8867e",
    "InterestCalculator": "0x86fff4cD1C1B92Cb73CA139286810811FB1A7D43"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateYearlyPremium(bytes32,uint256)": {
        "params": {
          "_rangeId": "The id of the range",
          "_utilizationRatio": "Utilization ratio of LPT"
        }
      },
      "checkLiquidatable(uint256)": {
        "params": {
          "_vaultId": "vault id"
        },
        "returns": {
          "_0": "isLiquidatable true if the vault is liquidatable, false if the vault is safe."
        }
      },
      "closePosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[])[],(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_closePositionOptions": "Option parameters to close position",
          "_positions": "Positions to close",
          "_tradeOption": "Trade parameters",
          "_vaultId": "The id of the vault"
        }
      },
      "closeSubVault(uint256,uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_closePositionOptions": "Option parameters to close position",
          "_subVaultIndex": "The index of the sub-vault",
          "_tradeOption": "Trade parameters",
          "_vaultId": "The id of the vault"
        }
      },
      "closeVault(uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_closePositionOptions": "Option parameters to close position",
          "_tradeOption": "Trade parameters",
          "_vaultId": "The id of the vault"
        }
      },
      "getRange(bytes32)": {
        "params": {
          "_rangeId": "The id of the LPT"
        }
      },
      "getSubVault(uint256)": {
        "params": {
          "_subVaultId": "The id of the sub-vault"
        }
      },
      "getVault(uint256)": {
        "params": {
          "_vaultId": "The id of the vault"
        }
      },
      "getVaultStatus(uint256,uint160)": {
        "params": {
          "_vaultId": "The id of the vault"
        }
      },
      "liquidate(uint256,(uint256,uint256))": {
        "params": {
          "_liquidationOption": "option parameters for liquidation call",
          "_vaultId": "The id of the vault"
        }
      },
      "openPosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[]),(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256))": {
        "params": {
          "_openPositionOptions": "Option parameters to open position",
          "_position": "Position to open",
          "_tradeOption": "Trade parameters",
          "_vaultId": "The id of the vault. 0 means that it creates new vault."
        }
      },
      "setOperator(address)": {
        "details": "Only operator can call this function.",
        "params": {
          "_newOperator": "The address of new operator"
        }
      },
      "uniswapV3MintCallback(uint256,uint256,bytes)": {
        "details": "Callback for Uniswap V3 pool."
      },
      "updateIRMParams((uint256,uint256,uint256,uint256))": {
        "details": "Only operator can call this function.",
        "params": {
          "_irmParams": "New interest rate model parameter"
        }
      },
      "updateYearlyPremiumParams((uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))": {
        "details": "Only operator can call this function.",
        "params": {
          "_irmParams": "New interest rate model parameter",
          "_premiumParams": "New interest rate model parameter for variance calculation"
        }
      },
      "withdrawProtocolFee(uint256,uint256)": {
        "details": "Only operator can call this function.",
        "params": {
          "_amount0": "amount of token0 to withdraw",
          "_amount1": "amount of token1 to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateYearlyPremium(bytes32,uint256)": {
        "notice": "Returns yearly premium to borrow Liquidity Provider Token (LPT). The function can return yearly premium with specific utilization ratio."
      },
      "checkLiquidatable(uint256)": {
        "notice": "Returns the flag whether a vault can be liquidated or not."
      },
      "closePosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[])[],(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Closes position partially."
      },
      "closeSubVault(uint256,uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Closes all positions in sub-vault."
      },
      "closeVault(uint256,(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Closes all positions in a vault."
      },
      "getRange(bytes32)": {
        "notice": "Returns a Liquidity Provider Token (LPT) data"
      },
      "getSqrtPrice()": {
        "notice": "Gets square root of current underlying token price by quote token."
      },
      "getSubVault(uint256)": {
        "notice": "Returns a sub-vault data"
      },
      "getTokenState()": {
        "notice": "Returns the status of supplied tokens."
      },
      "getVault(uint256)": {
        "notice": "Returns a vault data"
      },
      "getVaultStatus(uint256,uint160)": {
        "notice": "Returns values and token amounts of the vault."
      },
      "liquidate(uint256,(uint256,uint256))": {
        "notice": "Liquidates a vault."
      },
      "openPosition(uint256,(uint256,uint256,uint256,uint256,uint256,(bool,uint128,int24,int24)[]),(bool,bool,bool,bool,int256,int256,bytes),(uint256,uint256,uint256,uint256))": {
        "notice": "Opens new position."
      },
      "setOperator(address)": {
        "notice": "Sets new operator"
      },
      "updateIRMParams((uint256,uint256,uint256,uint256))": {
        "notice": "Updates interest rate model parameter."
      },
      "updateYearlyPremiumParams((uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))": {
        "notice": "Updates interest rate model parameters for premium calculation."
      },
      "withdrawProtocolFee(uint256,uint256)": {
        "notice": "Withdraws accumulated protocol fee."
      }
    },
    "notice": "Error Codes P1: caller must be vault owner P2: vault does not exists P3: caller must be operator P4: cannot create vault with 0 amount",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1040,
        "contract": "src/Controller.sol:Controller",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1043,
        "contract": "src/Controller.sol:Controller",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6343,
        "contract": "src/Controller.sol:Controller",
        "label": "lastTouchedTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6347,
        "contract": "src/Controller.sol:Controller",
        "label": "ranges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(PerpStatus)9144_storage)"
      },
      {
        "astId": 6351,
        "contract": "src/Controller.sol:Controller",
        "label": "vaults",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Vault)9177_storage)"
      },
      {
        "astId": 6355,
        "contract": "src/Controller.sol:Controller",
        "label": "subVaults",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(SubVault)9167_storage)"
      },
      {
        "astId": 6357,
        "contract": "src/Controller.sol:Controller",
        "label": "context",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Context)9202_storage"
      },
      {
        "astId": 6359,
        "contract": "src/Controller.sol:Controller",
        "label": "irmParams",
        "offset": 0,
        "slot": "29",
        "type": "t_struct(IRMParams)9442_storage"
      },
      {
        "astId": 6361,
        "contract": "src/Controller.sol:Controller",
        "label": "ypParams",
        "offset": 0,
        "slot": "33",
        "type": "t_struct(YearlyPremiumParams)9433_storage"
      },
      {
        "astId": 6363,
        "contract": "src/Controller.sol:Controller",
        "label": "operator",
        "offset": 0,
        "slot": "42",
        "type": "t_address"
      },
      {
        "astId": 6365,
        "contract": "src/Controller.sol:Controller",
        "label": "vaultNFT",
        "offset": 0,
        "slot": "43",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LPTState)9157_storage)dyn_storage": {
        "base": "t_struct(LPTState)9157_storage",
        "encoding": "dynamic_array",
        "label": "struct DataType.LPTState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(InterestType)8170": {
        "encoding": "inplace",
        "label": "enum BaseToken.InterestType",
        "numberOfBytes": "1"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(PerpStatus)9144_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DataType.PerpStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(PerpStatus)9144_storage"
      },
      "t_mapping(t_bytes32,t_struct(TickSnapshot)9419_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct InterestCalculator.TickSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(TickSnapshot)9419_storage"
      },
      "t_mapping(t_uint256,t_struct(SubVault)9167_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataType.SubVault)",
        "numberOfBytes": "32",
        "value": "t_struct(SubVault)9167_storage"
      },
      "t_mapping(t_uint256,t_struct(Vault)9177_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataType.Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)9177_storage"
      },
      "t_struct(AccountState)8198_storage": {
        "encoding": "inplace",
        "label": "struct BaseToken.AccountState",
        "members": [
          {
            "astId": 8189,
            "contract": "src/Controller.sol:Controller",
            "label": "interestType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(InterestType)8170"
          },
          {
            "astId": 8191,
            "contract": "src/Controller.sol:Controller",
            "label": "assetAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8193,
            "contract": "src/Controller.sol:Controller",
            "label": "debtAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8195,
            "contract": "src/Controller.sol:Controller",
            "label": "lastAssetGrowth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8197,
            "contract": "src/Controller.sol:Controller",
            "label": "lastDebtGrowth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Context)9202_storage": {
        "encoding": "inplace",
        "label": "struct DataType.Context",
        "members": [
          {
            "astId": 9179,
            "contract": "src/Controller.sol:Controller",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9181,
            "contract": "src/Controller.sol:Controller",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9183,
            "contract": "src/Controller.sol:Controller",
            "label": "feeTier",
            "offset": 20,
            "slot": "1",
            "type": "t_uint24"
          },
          {
            "astId": 9185,
            "contract": "src/Controller.sol:Controller",
            "label": "swapRouter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9187,
            "contract": "src/Controller.sol:Controller",
            "label": "uniswapPool",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 9189,
            "contract": "src/Controller.sol:Controller",
            "label": "chainlinkPriceFeed",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9191,
            "contract": "src/Controller.sol:Controller",
            "label": "isMarginZero",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 9193,
            "contract": "src/Controller.sol:Controller",
            "label": "nextSubVaultId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9195,
            "contract": "src/Controller.sol:Controller",
            "label": "tokenState0",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(TokenState)8187_storage"
          },
          {
            "astId": 9197,
            "contract": "src/Controller.sol:Controller",
            "label": "tokenState1",
            "offset": 0,
            "slot": "14",
            "type": "t_struct(TokenState)8187_storage"
          },
          {
            "astId": 9199,
            "contract": "src/Controller.sol:Controller",
            "label": "accumuratedProtocolFee0",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 9201,
            "contract": "src/Controller.sol:Controller",
            "label": "accumuratedProtocolFee1",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "768"
      },
      "t_struct(IRMParams)9442_storage": {
        "encoding": "inplace",
        "label": "struct InterestCalculator.IRMParams",
        "members": [
          {
            "astId": 9435,
            "contract": "src/Controller.sol:Controller",
            "label": "baseRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9437,
            "contract": "src/Controller.sol:Controller",
            "label": "kinkRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9439,
            "contract": "src/Controller.sol:Controller",
            "label": "slope1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9441,
            "contract": "src/Controller.sol:Controller",
            "label": "slope2",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LPTState)9157_storage": {
        "encoding": "inplace",
        "label": "struct DataType.LPTState",
        "members": [
          {
            "astId": 9146,
            "contract": "src/Controller.sol:Controller",
            "label": "isCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9148,
            "contract": "src/Controller.sol:Controller",
            "label": "rangeId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 9150,
            "contract": "src/Controller.sol:Controller",
            "label": "liquidityAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 9152,
            "contract": "src/Controller.sol:Controller",
            "label": "premiumGrowthLast",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9154,
            "contract": "src/Controller.sol:Controller",
            "label": "fee0Last",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9156,
            "contract": "src/Controller.sol:Controller",
            "label": "fee1Last",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PerpStatus)9144_storage": {
        "encoding": "inplace",
        "label": "struct DataType.PerpStatus",
        "members": [
          {
            "astId": 9129,
            "contract": "src/Controller.sol:Controller",
            "label": "lowerTick",
            "offset": 0,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 9131,
            "contract": "src/Controller.sol:Controller",
            "label": "upperTick",
            "offset": 3,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 9133,
            "contract": "src/Controller.sol:Controller",
            "label": "borrowedLiquidity",
            "offset": 6,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 9135,
            "contract": "src/Controller.sol:Controller",
            "label": "premiumGrowthForBorrower",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9137,
            "contract": "src/Controller.sol:Controller",
            "label": "premiumGrowthForLender",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9139,
            "contract": "src/Controller.sol:Controller",
            "label": "fee0Growth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9141,
            "contract": "src/Controller.sol:Controller",
            "label": "fee1Growth",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9143,
            "contract": "src/Controller.sol:Controller",
            "label": "lastTouchedTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(SubVault)9167_storage": {
        "encoding": "inplace",
        "label": "struct DataType.SubVault",
        "members": [
          {
            "astId": 9159,
            "contract": "src/Controller.sol:Controller",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9161,
            "contract": "src/Controller.sol:Controller",
            "label": "balance0",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(AccountState)8198_storage"
          },
          {
            "astId": 9163,
            "contract": "src/Controller.sol:Controller",
            "label": "balance1",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AccountState)8198_storage"
          },
          {
            "astId": 9166,
            "contract": "src/Controller.sol:Controller",
            "label": "lpts",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_struct(LPTState)9157_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(TickSnapshot)9419_storage": {
        "encoding": "inplace",
        "label": "struct InterestCalculator.TickSnapshot",
        "members": [
          {
            "astId": 9416,
            "contract": "src/Controller.sol:Controller",
            "label": "lastSecondsPerLiquidityInside",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9418,
            "contract": "src/Controller.sol:Controller",
            "label": "lastSecondsPerLiquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenState)8187_storage": {
        "encoding": "inplace",
        "label": "struct BaseToken.TokenState",
        "members": [
          {
            "astId": 8172,
            "contract": "src/Controller.sol:Controller",
            "label": "totalCompoundDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8174,
            "contract": "src/Controller.sol:Controller",
            "label": "totalCompoundBorrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8176,
            "contract": "src/Controller.sol:Controller",
            "label": "totalNormalDeposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8178,
            "contract": "src/Controller.sol:Controller",
            "label": "totalNormalBorrowed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8180,
            "contract": "src/Controller.sol:Controller",
            "label": "assetScaler",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8182,
            "contract": "src/Controller.sol:Controller",
            "label": "debtScaler",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8184,
            "contract": "src/Controller.sol:Controller",
            "label": "assetGrowth",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8186,
            "contract": "src/Controller.sol:Controller",
            "label": "debtGrowth",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Vault)9177_storage": {
        "encoding": "inplace",
        "label": "struct DataType.Vault",
        "members": [
          {
            "astId": 9169,
            "contract": "src/Controller.sol:Controller",
            "label": "vaultId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9171,
            "contract": "src/Controller.sol:Controller",
            "label": "marginAmount0",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 9173,
            "contract": "src/Controller.sol:Controller",
            "label": "marginAmount1",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 9176,
            "contract": "src/Controller.sol:Controller",
            "label": "subVaults",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(YearlyPremiumParams)9433_storage": {
        "encoding": "inplace",
        "label": "struct InterestCalculator.YearlyPremiumParams",
        "members": [
          {
            "astId": 9426,
            "contract": "src/Controller.sol:Controller",
            "label": "premiumParams",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(IRMParams)9442_storage"
          },
          {
            "astId": 9428,
            "contract": "src/Controller.sol:Controller",
            "label": "irmParams",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(IRMParams)9442_storage"
          },
          {
            "astId": 9432,
            "contract": "src/Controller.sol:Controller",
            "label": "snapshots",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_struct(TickSnapshot)9419_storage)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
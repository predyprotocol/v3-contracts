{
  "address": "0x927BD5800fc9C4fA5008308396e7633AEA6d1d58",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tradeAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFeePerPosition",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaUsdcPosition",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "marginAmount",
          "type": "int256"
        }
      ],
      "name": "MarginUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tradeAmount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFeePerPosition",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "deltaUsdcPosition",
          "type": "int256"
        }
      ],
      "name": "PositionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureVaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "liquidationCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "positionAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "entryFundingFee",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "usdcAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentRangeId",
          "type": "uint256"
        }
      ],
      "name": "setCurrentRangeId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "int24",
          "name": "_lowerTick",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_upperTick",
          "type": "int24"
        }
      ],
      "name": "setRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_quoterMode",
          "type": "bool"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "traderVaultId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "_marginAmount",
          "type": "int256"
        }
      ],
      "name": "updateMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "traderVaultId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c4ae8c8dde10f6affbf81942a6f92ed2a6437b6c54657a1a10f7cc143842245",
  "receipt": {
    "to": null,
    "from": "0x1c745d31A084a14Ba30E7c9F4B14EA762d44f194",
    "contractAddress": "0x927BD5800fc9C4fA5008308396e7633AEA6d1d58",
    "transactionIndex": 39,
    "gasUsed": "4022205",
    "logsBloom": "0x
    "blockHash": "0xcbc51da636ebf14c3d5f18bbab9a53e3d3e43a2a692ecf8fd2fdf76d5d08dc4b",
    "transactionHash": "0x4c4ae8c8dde10f6affbf81942a6f92ed2a6437b6c54657a1a10f7cc143842245",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 7774630,
        "transactionHash": "0x4c4ae8c8dde10f6affbf81942a6f92ed2a6437b6c54657a1a10f7cc143842245",
        "address": "0x927BD5800fc9C4fA5008308396e7633AEA6d1d58",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c745d31a084a14ba30e7c9f4b14ea762d44f194"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0xcbc51da636ebf14c3d5f18bbab9a53e3d3e43a2a692ecf8fd2fdf76d5d08dc4b"
      },
      {
        "transactionIndex": 39,
        "blockNumber": 7774630,
        "transactionHash": "0x4c4ae8c8dde10f6affbf81942a6f92ed2a6437b6c54657a1a10f7cc143842245",
        "address": "0x603eFB95394c6cf5b6b29B1c813bd1Ee42A07714",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000927bd5800fc9c4fa5008308396e7633aea6d1d58",
          "0x00000000000000000000000051395b4e2b99e92c230bc3800ef5fcbe4c7316fd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 104,
        "blockHash": "0xcbc51da636ebf14c3d5f18bbab9a53e3d3e43a2a692ecf8fd2fdf76d5d08dc4b"
      }
    ],
    "blockNumber": 7774630,
    "cumulativeGasUsed": "13382709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x51395b4e2b99e92C230Bc3800eF5fCbE4c7316Fd",
    "0x5D7540AB402F37e81f5A1b6e857698b386080f9C",
    "0x603eFB95394c6cf5b6b29B1c813bd1Ee42A07714",
    "0xff6ecE96Ed48Fc19a6f7a30C88733e2A9b05c043"
  ],
  "solcInputHash": "c93df20d9cc685523f44273deafdf578",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFeePerPosition\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaUsdcPosition\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"marginAmount\",\"type\":\"int256\"}],\"name\":\"MarginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeAmount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFeePerPosition\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"deltaUsdcPosition\",\"type\":\"int256\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureVaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"liquidationCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"positionAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"entryFundingFee\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentRangeId\",\"type\":\"uint256\"}],\"name\":\"setCurrentRangeId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"_lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_upperTick\",\"type\":\"int24\"}],\"name\":\"setRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_quoterMode\",\"type\":\"bool\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"traderVaultId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"_marginAmount\",\"type\":\"int256\"}],\"name\":\"updateMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"traderVaultId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"FM0: caller is not vault owner FM1: vault must be safe FM2: vault must not be safe\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/satelite/FutureMarket.sol\":\"FutureMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363635383439383832323331\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"lib/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"src/interfaces/IControllerHelper.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/DataType.sol\\\";\\n\\ninterface IControllerHelper {\\n    function openPosition(\\n        uint256 _vaultId,\\n        DataType.Position memory _position,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.OpenPositionOption memory _openPositionOptions\\n    )\\n        external\\n        returns (\\n            uint256 vaultId,\\n            int256,\\n            int256,\\n            uint256\\n        );\\n\\n    function updatePosition(\\n        uint256 _vaultId,\\n        DataType.PositionUpdate[] memory positionUpdates,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.OpenPositionOption memory _openPositionOptions\\n    )\\n        external\\n        returns (\\n            uint256 vaultId,\\n            int256 requiredAmount0,\\n            int256 requiredAmount1,\\n            uint256 averagePrice\\n        );\\n\\n    function closeSubVault(\\n        uint256 _vaultId,\\n        uint256 _subVaultIndex,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.ClosePositionOption memory _closePositionOptions\\n    )\\n        external\\n        returns (\\n            int256,\\n            int256,\\n            uint256\\n        );\\n\\n    function closePosition(\\n        uint256 _vaultId,\\n        DataType.Position[] memory _positions,\\n        DataType.TradeOption memory _tradeOption,\\n        DataType.ClosePositionOption memory _closePositionOptions\\n    )\\n        external\\n        returns (\\n            int256,\\n            int256,\\n            uint256\\n        );\\n\\n    function getSqrtPrice() external view returns (uint160 sqrtPriceX96);\\n\\n    function getVaultValue(uint256 _vaultId) external view returns (int256);\\n}\\n\",\"keccak256\":\"0x86b735df2d34e9763ed76534b8d39659b1b29fbbdb7f17d197598f8c76f1e530\",\"license\":\"agpl-3.0\"},\"src/interfaces/IReader.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\ninterface IReader {\\n    function isMarginZero() external view returns (bool);\\n\\n    function getPrice() external view returns (uint256);\\n\\n    function getTWAP() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e124cbb67c642d6cfc991133dc60d531b93ef797b2add46399792914273f29d\",\"license\":\"agpl-3.0\"},\"src/interfaces/IVaultNFT.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IVaultNFT is IERC721 {\\n    function nextId() external returns (uint256);\\n\\n    function mintNFT(address _recipient) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x531f2fb76b25e0a66e0a986f306d3cc9ad1840010d2467eada33b1a91c5645b1\",\"license\":\"agpl-3.0\"},\"src/libraries/BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary BaseToken {\\n    using SafeMath for uint256;\\n\\n    enum InterestType {\\n        EMPTY,\\n        COMPOUND,\\n        NORMAL\\n    }\\n\\n    struct TokenState {\\n        uint256 totalCompoundDeposited;\\n        uint256 totalCompoundBorrowed;\\n        uint256 totalNormalDeposited;\\n        uint256 totalNormalBorrowed;\\n        uint256 assetScaler;\\n        uint256 debtScaler;\\n        uint256 assetGrowth;\\n        uint256 debtGrowth;\\n    }\\n\\n    struct AccountState {\\n        InterestType interestType;\\n        uint256 assetAmount;\\n        uint256 debtAmount;\\n        uint256 lastAssetGrowth;\\n        uint256 lastDebtGrowth;\\n    }\\n\\n    function initialize(TokenState storage tokenState) internal {\\n        tokenState.assetScaler = Constants.ONE;\\n        tokenState.debtScaler = Constants.ONE;\\n    }\\n\\n    function addAsset(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount,\\n        bool _isCompound\\n    ) internal returns (uint256 mintAmount) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        if (_isCompound) {\\n            require(accountState.interestType != InterestType.NORMAL, \\\"B1\\\");\\n            mintAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.assetScaler);\\n\\n            accountState.assetAmount = accountState.assetAmount.add(mintAmount);\\n            tokenState.totalCompoundDeposited = tokenState.totalCompoundDeposited.add(mintAmount);\\n\\n            accountState.interestType = InterestType.COMPOUND;\\n        } else {\\n            require(accountState.interestType != InterestType.COMPOUND, \\\"B2\\\");\\n\\n            accountState.lastAssetGrowth = (\\n                accountState.lastAssetGrowth.mul(accountState.assetAmount).add(tokenState.assetGrowth.mul(_amount))\\n            ).div(accountState.assetAmount.add(_amount));\\n\\n            accountState.assetAmount += _amount;\\n            tokenState.totalNormalDeposited += _amount;\\n\\n            accountState.interestType = InterestType.NORMAL;\\n        }\\n    }\\n\\n    function addDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount,\\n        bool _isCompound\\n    ) internal returns (uint256 mintAmount) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        require(getAvailableCollateralValue(tokenState) >= _amount, \\\"B0\\\");\\n\\n        if (_isCompound) {\\n            require(accountState.interestType != InterestType.NORMAL, \\\"B1\\\");\\n            mintAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.debtScaler);\\n\\n            accountState.debtAmount = accountState.debtAmount.add(mintAmount);\\n            tokenState.totalCompoundBorrowed = tokenState.totalCompoundBorrowed.add(mintAmount);\\n\\n            accountState.interestType = InterestType.COMPOUND;\\n        } else {\\n            require(accountState.interestType != InterestType.COMPOUND, \\\"B2\\\");\\n\\n            accountState.lastDebtGrowth = (\\n                accountState.lastDebtGrowth.mul(accountState.debtAmount).add(tokenState.debtGrowth.mul(_amount))\\n            ).div(accountState.debtAmount.add(_amount));\\n\\n            accountState.debtAmount += _amount;\\n            tokenState.totalNormalBorrowed += _amount;\\n\\n            accountState.interestType = InterestType.NORMAL;\\n        }\\n    }\\n\\n    function removeAsset(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount, uint256 fee) {\\n        if (_amount == 0) {\\n            return (0, 0);\\n        }\\n\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            uint256 burnAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.assetScaler);\\n\\n            if (accountState.assetAmount < burnAmount) {\\n                finalBurnAmount = accountState.assetAmount;\\n                accountState.assetAmount = 0;\\n            } else {\\n                finalBurnAmount = burnAmount;\\n                accountState.assetAmount = accountState.assetAmount.sub(burnAmount);\\n            }\\n\\n            tokenState.totalCompoundDeposited = tokenState.totalCompoundDeposited.sub(finalBurnAmount);\\n\\n            // TODO: roundUp\\n            finalBurnAmount = PredyMath.mulDiv(finalBurnAmount, tokenState.assetScaler, Constants.ONE);\\n        } else {\\n            fee = getAssetFee(tokenState, accountState);\\n\\n            if (accountState.assetAmount < _amount) {\\n                finalBurnAmount = accountState.assetAmount;\\n                accountState.assetAmount = 0;\\n            } else {\\n                finalBurnAmount = _amount;\\n                fee = (fee * finalBurnAmount) / accountState.assetAmount;\\n                accountState.assetAmount = accountState.assetAmount.sub(_amount);\\n            }\\n\\n            tokenState.totalNormalDeposited = tokenState.totalNormalDeposited.sub(finalBurnAmount);\\n        }\\n    }\\n\\n    function removeDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount, uint256 fee) {\\n        if (_amount == 0) {\\n            return (0, 0);\\n        }\\n\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            uint256 burnAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.debtScaler);\\n\\n            if (accountState.debtAmount < burnAmount) {\\n                finalBurnAmount = accountState.debtAmount;\\n                accountState.debtAmount = 0;\\n            } else {\\n                finalBurnAmount = burnAmount;\\n                accountState.debtAmount = accountState.debtAmount.sub(burnAmount);\\n            }\\n\\n            tokenState.totalCompoundBorrowed = tokenState.totalCompoundBorrowed.sub(finalBurnAmount);\\n\\n            // TODO: roundUp\\n            finalBurnAmount = PredyMath.mulDiv(finalBurnAmount, tokenState.debtScaler, Constants.ONE);\\n        } else {\\n            fee = getDebtFee(tokenState, accountState);\\n\\n            if (accountState.debtAmount < _amount) {\\n                finalBurnAmount = accountState.debtAmount;\\n                accountState.debtAmount = 0;\\n            } else {\\n                finalBurnAmount = _amount;\\n                fee = (fee * finalBurnAmount) / accountState.debtAmount;\\n                accountState.debtAmount = accountState.debtAmount.sub(_amount);\\n            }\\n\\n            tokenState.totalNormalBorrowed = tokenState.totalNormalBorrowed.sub(finalBurnAmount);\\n        }\\n    }\\n\\n    function getAssetFee(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType != InterestType.NORMAL) {\\n            return 0;\\n        }\\n\\n        return\\n            PredyMath.mulDiv(\\n                tokenState.assetGrowth.sub(accountState.lastAssetGrowth),\\n                accountState.assetAmount,\\n                Constants.ONE\\n            );\\n    }\\n\\n    function getDebtFee(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType != InterestType.NORMAL) {\\n            return 0;\\n        }\\n\\n        return\\n            PredyMath.mulDiv(\\n                tokenState.debtGrowth.sub(accountState.lastDebtGrowth),\\n                accountState.debtAmount,\\n                Constants.ONE\\n            );\\n    }\\n\\n    // get collateral value\\n    function getAssetValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            return PredyMath.mulDiv(accountState.assetAmount, tokenState.assetScaler, Constants.ONE);\\n        } else {\\n            return accountState.assetAmount;\\n        }\\n    }\\n\\n    // get debt value\\n    function getDebtValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (accountState.interestType == InterestType.COMPOUND) {\\n            return PredyMath.mulDiv(accountState.debtAmount, tokenState.debtScaler, Constants.ONE);\\n        } else {\\n            return accountState.debtAmount;\\n        }\\n    }\\n\\n    // update scaler\\n    function updateScaler(TokenState storage tokenState, uint256 _interestRate) internal returns (uint256) {\\n        if (tokenState.totalCompoundDeposited == 0 && tokenState.totalNormalDeposited == 0) {\\n            return 0;\\n        }\\n\\n        uint256 protocolFee = PredyMath.mulDiv(\\n            PredyMath.mulDiv(_interestRate, getTotalDebtValue(tokenState), Constants.ONE),\\n            Constants.RESERVE_FACTOR,\\n            Constants.ONE\\n        );\\n\\n        // suppry interest rate is InterestRate * Utilization * (1 - ReserveFactor)\\n        uint256 suppryInterestRate = PredyMath.mulDiv(\\n            PredyMath.mulDiv(_interestRate, getTotalDebtValue(tokenState), getTotalCollateralValue(tokenState)),\\n            Constants.ONE - Constants.RESERVE_FACTOR,\\n            Constants.ONE\\n        );\\n\\n        // round up\\n        tokenState.debtScaler = PredyMath.mulDivUp(\\n            tokenState.debtScaler,\\n            (Constants.ONE.add(_interestRate)),\\n            Constants.ONE\\n        );\\n        tokenState.debtGrowth = tokenState.debtGrowth.add(_interestRate);\\n        tokenState.assetScaler = PredyMath.mulDiv(\\n            tokenState.assetScaler,\\n            Constants.ONE + suppryInterestRate,\\n            Constants.ONE\\n        );\\n        tokenState.assetGrowth = tokenState.assetGrowth.add(suppryInterestRate);\\n\\n        return protocolFee;\\n    }\\n\\n    function getTotalCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return\\n            PredyMath.mulDiv(tokenState.totalCompoundDeposited, tokenState.assetScaler, Constants.ONE) +\\n            tokenState.totalNormalDeposited;\\n    }\\n\\n    function getTotalDebtValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return\\n            PredyMath.mulDiv(tokenState.totalCompoundBorrowed, tokenState.debtScaler, Constants.ONE) +\\n            tokenState.totalNormalBorrowed;\\n    }\\n\\n    function getAvailableCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return getTotalCollateralValue(tokenState).sub(getTotalDebtValue(tokenState));\\n    }\\n\\n    function getUtilizationRatio(TokenState memory tokenState) internal pure returns (uint256) {\\n        if (tokenState.totalCompoundDeposited == 0 && tokenState.totalNormalBorrowed == 0) {\\n            return Constants.ONE;\\n        }\\n\\n        return PredyMath.mulDiv(getTotalDebtValue(tokenState), Constants.ONE, getTotalCollateralValue(tokenState));\\n    }\\n}\\n\",\"keccak256\":\"0xa4a6e4f3e83985504904672d5ae96363b9e7b129fb480c1a6ec1f0056db2b5ae\",\"license\":\"UNLICENSED\"},\"src/libraries/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nlibrary Constants {\\n    uint256 internal constant ONE = 1e18;\\n\\n    // Reserve factor is 10%\\n    uint256 internal constant RESERVE_FACTOR = 10 * 1e16;\\n\\n    // Reserve factor of LPToken is 5%\\n    uint256 internal constant LPT_RESERVE_FACTOR = 5 * 1e16;\\n\\n    // Margin option\\n    int256 internal constant MARGIN_STAY = -1;\\n    int256 internal constant MARGIN_USE = -2;\\n\\n    uint256 internal constant MAX_MARGIN_AMOUNT = 1e32;\\n\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n\\n    // 2%\\n    uint256 internal constant BASE_MIN_COLLATERAL_WITH_DEBT = 20000;\\n    // 0.00005\\n    uint256 internal constant MIN_COLLATERAL_WITH_DEBT_SLOPE = 50;\\n    // 3% scaled by 1e6\\n    uint256 internal constant BASE_LIQ_SLIPPAGE_SQRT_TOLERANCE = 15000;\\n    // 0.000022\\n    uint256 internal constant LIQ_SLIPPAGE_SQRT_SLOPE = 22;\\n}\\n\",\"keccak256\":\"0x5356f614596c15a5d1314236d085454db5cf5435e1c0c9218b1eb82844f2410f\",\"license\":\"agpl-3.0\"},\"src/libraries/DataType.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\n\\nlibrary DataType {\\n    // Storage Data Type\\n    struct PerpStatus {\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 borrowedLiquidity;\\n        uint256 premiumGrowthForBorrower;\\n        uint256 premiumGrowthForLender;\\n        uint256 fee0Growth;\\n        uint256 fee1Growth;\\n        uint256 lastTouchedTimestamp;\\n    }\\n\\n    struct LPTState {\\n        bool isCollateral;\\n        bytes32 rangeId;\\n        uint128 liquidityAmount;\\n        uint256 premiumGrowthLast;\\n        uint256 fee0Last;\\n        uint256 fee1Last;\\n    }\\n\\n    struct SubVault {\\n        uint256 id;\\n        BaseToken.AccountState balance0;\\n        BaseToken.AccountState balance1;\\n        LPTState[] lpts;\\n    }\\n\\n    struct Vault {\\n        uint256 vaultId;\\n        uint256 marginAmount0;\\n        uint256 marginAmount1;\\n        uint256[] subVaults;\\n    }\\n\\n    struct Context {\\n        address token0;\\n        address token1;\\n        uint24 feeTier;\\n        address swapRouter;\\n        address uniswapPool;\\n        bool isMarginZero;\\n        uint256 nextSubVaultId;\\n        BaseToken.TokenState tokenState0;\\n        BaseToken.TokenState tokenState1;\\n        uint256 accumuratedProtocolFee0;\\n        uint256 accumuratedProtocolFee1;\\n    }\\n\\n    // Parameters\\n\\n    struct InitializationParams {\\n        uint24 feeTier;\\n        address token0;\\n        address token1;\\n        bool isMarginZero;\\n    }\\n\\n    struct LPT {\\n        bool isCollateral;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n    }\\n\\n    struct Position {\\n        uint256 subVaultIndex;\\n        uint256 asset0;\\n        uint256 asset1;\\n        uint256 debt0;\\n        uint256 debt1;\\n        LPT[] lpts;\\n    }\\n\\n    enum PositionUpdateType {\\n        NOOP,\\n        DEPOSIT_TOKEN,\\n        WITHDRAW_TOKEN,\\n        BORROW_TOKEN,\\n        REPAY_TOKEN,\\n        DEPOSIT_LPT,\\n        WITHDRAW_LPT,\\n        BORROW_LPT,\\n        REPAY_LPT,\\n        SWAP_EXACT_IN,\\n        SWAP_EXACT_OUT,\\n        DEPOSIT_MARGIN,\\n        WITHDRAW_MARGIN\\n    }\\n\\n    struct PositionUpdate {\\n        PositionUpdateType positionUpdateType;\\n        uint256 subVaultIndex;\\n        bool zeroForOne;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 param0;\\n        uint256 param1;\\n    }\\n\\n    struct TradeOption {\\n        bool reduceOnly;\\n        bool swapAnyway;\\n        bool quoterMode;\\n        bool isQuoteZero;\\n        int256 targetMarginAmount0;\\n        int256 targetMarginAmount1;\\n        bytes metadata;\\n    }\\n\\n    struct OpenPositionOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint24 feeTier;\\n    }\\n\\n    struct ClosePositionOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint256 swapRatio;\\n        uint256 closeRatio;\\n        uint24 feeTier;\\n    }\\n\\n    struct LiquidationOption {\\n        uint256 swapRatio;\\n        uint256 closeRatio;\\n        uint24 feeTier;\\n    }\\n\\n    struct SubVaultValue {\\n        uint256 assetValue;\\n        uint256 debtValue;\\n        int256 premiumValue;\\n    }\\n\\n    struct SubVaultAmount {\\n        uint256 assetAmount0;\\n        uint256 assetAmount1;\\n        uint256 debtAmount0;\\n        uint256 debtAmount1;\\n    }\\n\\n    struct SubVaultInterest {\\n        int256 assetFee0;\\n        int256 assetFee1;\\n        int256 debtFee0;\\n        int256 debtFee1;\\n    }\\n\\n    struct SubVaultPremium {\\n        uint256 receivedTradeAmount0;\\n        uint256 receivedTradeAmount1;\\n        uint256 receivedPremium;\\n        uint256 paidPremium;\\n    }\\n\\n    struct SubVaultStatus {\\n        SubVaultValue values;\\n        SubVaultAmount amount;\\n        SubVaultInterest interest;\\n        SubVaultPremium premium;\\n    }\\n\\n    struct VaultStatus {\\n        int256 positionValue;\\n        int256 marginValue;\\n        int256 minCollateral;\\n        SubVaultStatus[] subVaults;\\n    }\\n}\\n\",\"keccak256\":\"0x04b49d20e5bd05a49c841c15b1d4ec53b9330d19fd213bdb782c60a69fd24e79\",\"license\":\"UNLICENSED\"},\"src/libraries/LPTMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\n\\nlibrary LPTMath {\\n    function getLiquidityAndAmountToDeposit(\\n        bool isMarginZero,\\n        uint256 requestedAmount,\\n        uint160 currentSqrtPrice,\\n        int24 lower,\\n        int24 upper\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        if (isMarginZero) {\\n            return\\n                getLiquidityAndAmount(\\n                    0,\\n                    requestedAmount,\\n                    TickMath.getSqrtRatioAtTick(upper),\\n                    currentSqrtPrice,\\n                    lower,\\n                    upper\\n                );\\n        } else {\\n            return\\n                getLiquidityAndAmount(\\n                    requestedAmount,\\n                    0,\\n                    TickMath.getSqrtRatioAtTick(lower),\\n                    currentSqrtPrice,\\n                    lower,\\n                    upper\\n                );\\n        }\\n    }\\n\\n    function getLiquidityAndAmountToBorrow(\\n        bool isMarginZero,\\n        uint256 requestedAmount,\\n        int24 tick,\\n        int24 lower,\\n        int24 upper\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        if (isMarginZero) {\\n            return\\n                getLiquidityAndAmount(\\n                    0,\\n                    requestedAmount,\\n                    TickMath.getSqrtRatioAtTick(upper),\\n                    TickMath.getSqrtRatioAtTick(tick),\\n                    lower,\\n                    upper\\n                );\\n        } else {\\n            return\\n                getLiquidityAndAmount(\\n                    requestedAmount,\\n                    0,\\n                    TickMath.getSqrtRatioAtTick(lower),\\n                    TickMath.getSqrtRatioAtTick(tick),\\n                    lower,\\n                    upper\\n                );\\n        }\\n    }\\n\\n    function getLiquidityAndAmount(\\n        uint256 requestedAmount0,\\n        uint256 requestedAmount1,\\n        uint160 sqrtPrice1,\\n        uint160 sqrtPrice2,\\n        int24 lower,\\n        int24 upper\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        (liquidity) = LiquidityAmounts.getLiquidityForAmounts(\\n            sqrtPrice1,\\n            TickMath.getSqrtRatioAtTick(lower),\\n            TickMath.getSqrtRatioAtTick(upper),\\n            requestedAmount0,\\n            requestedAmount1\\n        );\\n\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            sqrtPrice2,\\n            TickMath.getSqrtRatioAtTick(lower),\\n            TickMath.getSqrtRatioAtTick(upper),\\n            liquidity\\n        );\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint160 currentSqrtPrice,\\n        int24 _lower,\\n        int24 _upper,\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) internal pure returns (uint128) {\\n        return\\n            LiquidityAmounts.getLiquidityForAmounts(\\n                currentSqrtPrice,\\n                TickMath.getSqrtRatioAtTick(_lower),\\n                TickMath.getSqrtRatioAtTick(_upper),\\n                _amount0,\\n                _amount1\\n            );\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint160 currentSqrtPrice,\\n        int24 _lower,\\n        int24 _upper,\\n        uint128 _liquidity\\n    ) internal pure returns (uint256, uint256) {\\n        return\\n            LiquidityAmounts.getAmountsForLiquidity(\\n                currentSqrtPrice,\\n                TickMath.getSqrtRatioAtTick(_lower),\\n                TickMath.getSqrtRatioAtTick(_upper),\\n                _liquidity\\n            );\\n    }\\n\\n    function getSqrtRatioAtTick(int24 _tick) internal pure returns (uint160) {\\n        return TickMath.getSqrtRatioAtTick(_tick);\\n    }\\n\\n    /**\\n     * if isMarginZero is true, calculates token1 price by token0.\\n     * if isMarginZero is false, calculates token0 price by token1.\\n     * @dev underlying token's decimal must be 1e18.\\n     */\\n    function decodeSqrtPriceX96(bool isMarginZero, uint256 sqrtPriceX96) internal pure returns (uint256 price) {\\n        uint256 scaler = 1e18; //10**ERC20(token0).decimals();\\n\\n        if (isMarginZero) {\\n            price = FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, uint256(2**(96 * 2)) / (scaler));\\n            if (price == 0) return 1e36;\\n            price = 1e36 / price;\\n        } else {\\n            price = (FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, uint256(2**96)) * scaler) / uint256(2**96);\\n        }\\n\\n        if (price > 1e36) price = 1e36;\\n        else if (price == 0) price = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xffd31b44269715673df8db205319b3a821e4f6c81352f28061426691e8496f62\",\"license\":\"UNLICENSED\"},\"src/libraries/PredyMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\n\\nlibrary PredyMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    /**\\n     * @dev https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     */\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol\\n     */\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? b : a;\\n    }\\n\\n    function subReward(uint256 a, uint256 b) internal pure returns (uint256, uint256) {\\n        if (a >= b) {\\n            return (a - b, b);\\n        } else {\\n            return (0, a);\\n        }\\n    }\\n\\n    function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        if (y < 0) {\\n            require((z = x - uint256(-y)) < x, \\\"LS\\\");\\n        } else {\\n            require((z = x + uint256(y)) >= x, \\\"LA\\\");\\n        }\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n}\\n\",\"keccak256\":\"0xf4da1a162fb6e0902a6a483a899e7801f9cbc53695e58f06c7b523721d8e41e8\",\"license\":\"AGPL-3.0-only\"},\"src/satelite/FutureMarket.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {TransferHelper} from \\\"lib/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../interfaces/IControllerHelper.sol\\\";\\nimport \\\"../interfaces/IReader.sol\\\";\\nimport \\\"../interfaces/IVaultNFT.sol\\\";\\nimport \\\"../libraries/LPTMath.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\nimport \\\"./SateliteLib.sol\\\";\\nimport \\\"./FutureMarketLib.sol\\\";\\n\\n/**\\n * FM0: caller is not vault owner\\n * FM1: vault must be safe\\n * FM2: vault must not be safe\\n */\\ncontract FutureMarket is ERC20, IERC721Receiver, Ownable {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    int256 private constant FUNDING_PERIOD = 1 days;\\n\\n    IControllerHelper internal immutable controller;\\n\\n    IReader internal immutable reader;\\n\\n    address internal immutable usdc;\\n\\n    address private vaultNFT;\\n\\n    uint256 public vaultId;\\n\\n    struct Range {\\n        uint256 id;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n    }\\n\\n    struct PoolPosition {\\n        int256 positionAmount;\\n        uint256 entryPrice;\\n        int256 entryFundingFee;\\n        uint256 usdcAmount;\\n    }\\n\\n    mapping(uint256 => Range) private ranges;\\n\\n    mapping(uint256 => FutureMarketLib.FutureVault) private futureVaults;\\n\\n    uint256 public futureVaultCount;\\n\\n    uint256 private currentRangeId;\\n\\n    PoolPosition public poolPosition;\\n\\n    int256 private fundingFeePerPosition;\\n\\n    uint256 private lastTradeTimestamp;\\n\\n    event MarginUpdated(uint256 indexed vaultId, address trader, int256 marginAmount);\\n\\n    event PositionUpdated(\\n        uint256 indexed vaultId,\\n        address trader,\\n        int256 tradeAmount,\\n        uint256 tradePrice,\\n        int256 fundingFeePerPosition,\\n        int256 deltaUsdcPosition\\n    );\\n\\n    event Liquidated(\\n        uint256 indexed vaultId,\\n        address liquidator,\\n        int256 tradeAmount,\\n        uint256 tradePrice,\\n        int256 fundingFeePerPosition,\\n        int256 deltaUsdcPosition,\\n        uint256 liquidationPenalty\\n    );\\n\\n    constructor(\\n        address _controller,\\n        address _reader,\\n        address _usdc,\\n        address _vaultNFT\\n    ) ERC20(\\\"PredyFutureLP\\\", \\\"PFLP\\\") {\\n        controller = IControllerHelper(_controller);\\n        reader = IReader(_reader);\\n        usdc = _usdc;\\n        vaultNFT = _vaultNFT;\\n\\n        ERC20(_usdc).approve(address(_controller), type(uint256).max);\\n\\n        futureVaultCount = 1;\\n\\n        lastTradeTimestamp = block.timestamp;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function setRange(\\n        uint256 _id,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) external onlyOwner {\\n        uint128 liquidity = SateliteLib.getBaseLiquidity(reader.isMarginZero(), _lowerTick, _upperTick);\\n\\n        ranges[_id] = Range(_id, liquidity, _lowerTick, _upperTick);\\n    }\\n\\n    function setCurrentRangeId(uint256 _currentRangeId) external onlyOwner {\\n        currentRangeId = _currentRangeId;\\n    }\\n\\n    function getLPTokenPrice() external view returns (uint256) {\\n        return (Constants.ONE * getPoolValue(reader.getTWAP())) / totalSupply();\\n    }\\n\\n    function deposit(uint256 _amount) external returns (uint256 mintAmount) {\\n        updateFundingPaidPerPosition();\\n\\n        uint256 poolValue = getPoolValue(reader.getTWAP());\\n\\n        if (poolValue == 0) {\\n            mintAmount = _amount;\\n        } else {\\n            mintAmount = (_amount * totalSupply()) / poolValue;\\n        }\\n\\n        poolPosition.usdcAmount += _amount;\\n\\n        TransferHelper.safeTransferFrom(usdc, msg.sender, address(this), _amount);\\n\\n        _mint(msg.sender, mintAmount);\\n    }\\n\\n    function withdraw(uint256 _amount) external returns (uint256 burnAmount) {\\n        updateFundingPaidPerPosition();\\n\\n        uint256 poolValue = getPoolValue(reader.getTWAP());\\n\\n        burnAmount = (_amount * totalSupply()) / poolValue;\\n\\n        poolPosition.usdcAmount = poolPosition.usdcAmount.sub(_amount);\\n\\n        TransferHelper.safeTransfer(usdc, msg.sender, _amount);\\n\\n        _burn(msg.sender, burnAmount);\\n    }\\n\\n    function getPoolValue(uint256 _price) internal view returns (uint256) {\\n        int256 positionValue = int256(_price)\\n            .sub(int256(poolPosition.entryPrice).add(fundingFeePerPosition.sub(poolPosition.entryFundingFee)))\\n            .mul(poolPosition.positionAmount) / 1e18;\\n\\n        int256 vaultValue = controller.getVaultValue(vaultId);\\n\\n        return positionValue.add(vaultValue).add(int256(poolPosition.usdcAmount)).toUint256();\\n    }\\n\\n    function updateMargin(uint256 _vaultId, int256 _marginAmount) external returns (uint256 traderVaultId) {\\n        require(_marginAmount != 0);\\n\\n        FutureMarketLib.FutureVault storage futureVault;\\n\\n        (traderVaultId, futureVault) = _createOrGetVault(_vaultId, false);\\n\\n        futureVault.marginAmount = PredyMath.addDelta(futureVault.marginAmount, _marginAmount);\\n\\n        require(isVaultSafe(futureVault), \\\"FM1\\\");\\n\\n        if (_marginAmount > 0) {\\n            TransferHelper.safeTransferFrom(usdc, msg.sender, address(this), uint256(_marginAmount));\\n        } else if (_marginAmount < 0) {\\n            TransferHelper.safeTransfer(usdc, msg.sender, uint256(-_marginAmount));\\n        }\\n\\n        emit MarginUpdated(traderVaultId, msg.sender, _marginAmount);\\n    }\\n\\n    function trade(\\n        uint256 _vaultId,\\n        int256 _amount,\\n        bool _quoterMode\\n    ) external returns (uint256 traderVaultId) {\\n        updateFundingPaidPerPosition();\\n\\n        uint256 entryPrice = _updatePoolPosition(_amount);\\n\\n        if (_quoterMode) {\\n            revertEntryPrice(entryPrice);\\n        }\\n\\n        FutureMarketLib.FutureVault storage futureVault;\\n\\n        (traderVaultId, futureVault) = _createOrGetVault(_vaultId, _quoterMode);\\n\\n        int256 deltaUsdcPosition = _updateTraderPosition(futureVault, _amount, entryPrice);\\n\\n        emit PositionUpdated(traderVaultId, msg.sender, _amount, entryPrice, fundingFeePerPosition, deltaUsdcPosition);\\n    }\\n\\n    function liquidationCall(uint256 _vaultId) external {\\n        updateFundingPaidPerPosition();\\n\\n        FutureMarketLib.FutureVault storage futureVault = futureVaults[_vaultId];\\n\\n        require(!isVaultSafe(futureVault), \\\"FM2\\\");\\n\\n        int256 tradeAmount = -futureVaults[_vaultId].positionAmount;\\n\\n        uint256 entryPrice = _updatePoolPosition(tradeAmount);\\n\\n        int256 deltaUsdcPosition = _updateTraderPosition(futureVault, tradeAmount, entryPrice);\\n\\n        uint256 liquidationPenalty = _decreaesLiquidationPenalty(futureVault, tradeAmount, entryPrice);\\n\\n        emit Liquidated(\\n            _vaultId,\\n            msg.sender,\\n            tradeAmount,\\n            entryPrice,\\n            fundingFeePerPosition,\\n            deltaUsdcPosition,\\n            liquidationPenalty\\n        );\\n    }\\n\\n    function rebalance() external {\\n        DataType.TradeOption memory tradeOption = DataType.TradeOption(\\n            false,\\n            true,\\n            false,\\n            true,\\n            int256(getMarginValue(0)),\\n            Constants.MARGIN_STAY,\\n            bytes(\\\"\\\")\\n        );\\n\\n        DataType.OpenPositionOption memory openPositionOption = DataType.OpenPositionOption(0, type(uint256).max, 500);\\n\\n        DataType.PositionUpdate[] memory positionUpdates = _rebalance(\\n            controller.getSqrtPrice(),\\n            PredyMath.abs(poolPosition.positionAmount)\\n        );\\n\\n        positionUpdates[positionUpdates.length - 1] = _cover(poolPosition.positionAmount);\\n\\n        int256 requiredAmount0;\\n        int256 requiredAmount1;\\n\\n        (vaultId, requiredAmount0, requiredAmount1, ) = controller.updatePosition(\\n            vaultId,\\n            positionUpdates,\\n            tradeOption,\\n            openPositionOption\\n        );\\n\\n        poolPosition.usdcAmount = PredyMath.addDelta(\\n            poolPosition.usdcAmount,\\n            reader.isMarginZero() ? -requiredAmount0 : -requiredAmount1\\n        );\\n    }\\n\\n    function getVaultStatus(uint256 _vaultId)\\n        internal\\n        view\\n        returns (\\n            int256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        FutureMarketLib.FutureVault memory futureVault = futureVaults[_vaultId];\\n\\n        uint256 twap = reader.getTWAP();\\n\\n        uint256 minCollateral = FutureMarketLib.calculateMinCollateral(futureVault, twap);\\n\\n        int256 vaultValue = getVaultValue(futureVault, twap);\\n\\n        return (vaultValue, futureVault.marginAmount, minCollateral);\\n    }\\n\\n    function getMarginValue(int256 _amount) internal view returns (uint256 marginValue) {\\n        uint256 currentPrice = reader.getPrice();\\n\\n        marginValue = (currentPrice * PredyMath.abs(poolPosition.positionAmount + _amount)) / 1e18 / 3;\\n    }\\n\\n    function _updatePoolPosition(int256 _amount) internal returns (uint256 entryPrice) {\\n        {\\n            DataType.TradeOption memory tradeOption = DataType.TradeOption(\\n                false,\\n                true,\\n                false,\\n                true,\\n                int256(getMarginValue(_amount)),\\n                Constants.MARGIN_STAY,\\n                bytes(\\\"\\\")\\n            );\\n\\n            entryPrice = _coverAndRebalance(poolPosition.positionAmount, _amount, tradeOption);\\n        }\\n\\n        {\\n            int256 deltaMarginAmount;\\n\\n            {\\n                (int256 newEntryPrice, int256 profitValue) = FutureMarketLib.updateEntryPrice(\\n                    int256(poolPosition.entryPrice),\\n                    poolPosition.positionAmount,\\n                    int256(entryPrice),\\n                    _amount\\n                );\\n\\n                poolPosition.entryPrice = newEntryPrice.toUint256();\\n                deltaMarginAmount = deltaMarginAmount.add(profitValue);\\n            }\\n\\n            {\\n                (int256 entryFundingFee, int256 profitValue) = FutureMarketLib.updateEntryPrice(\\n                    int256(poolPosition.entryFundingFee),\\n                    poolPosition.positionAmount,\\n                    int256(fundingFeePerPosition),\\n                    _amount\\n                );\\n\\n                poolPosition.entryFundingFee = entryFundingFee;\\n                deltaMarginAmount = deltaMarginAmount.add(profitValue);\\n            }\\n\\n            poolPosition.usdcAmount = PredyMath.addDelta(poolPosition.usdcAmount, deltaMarginAmount);\\n        }\\n\\n        poolPosition.positionAmount = poolPosition.positionAmount.sub(_amount);\\n    }\\n\\n    function _updateTraderPosition(\\n        FutureMarketLib.FutureVault storage _futureVault,\\n        int256 _amount,\\n        uint256 _entryPrice\\n    ) internal returns (int256 deltaMarginAmount) {\\n        {\\n            (int256 newEntryPrice, int256 profitValue) = FutureMarketLib.updateEntryPrice(\\n                int256(_futureVault.entryPrice),\\n                _futureVault.positionAmount,\\n                int256(_entryPrice),\\n                _amount\\n            );\\n\\n            _futureVault.entryPrice = newEntryPrice.toUint256();\\n            deltaMarginAmount = deltaMarginAmount.add(profitValue);\\n        }\\n\\n        {\\n            (int256 entryFundingFee, int256 profitValue) = FutureMarketLib.updateEntryPrice(\\n                int256(_futureVault.entryFundingFee),\\n                _futureVault.positionAmount,\\n                int256(fundingFeePerPosition),\\n                _amount\\n            );\\n\\n            _futureVault.entryFundingFee = entryFundingFee;\\n            deltaMarginAmount = deltaMarginAmount.add(profitValue);\\n        }\\n\\n        _futureVault.positionAmount = _futureVault.positionAmount.add(_amount);\\n\\n        _futureVault.marginAmount = PredyMath.addDelta(_futureVault.marginAmount, deltaMarginAmount);\\n\\n        require(isVaultSafe(_futureVault), \\\"FM1\\\");\\n    }\\n\\n    function _decreaesLiquidationPenalty(\\n        FutureMarketLib.FutureVault storage _futureVault,\\n        int256 _tradeAmount,\\n        uint256 _entryPrice\\n    ) internal returns (uint256 penaltyAmount) {\\n        penaltyAmount = (PredyMath.abs(_tradeAmount) * _entryPrice) / (1e18 * 500);\\n\\n        _futureVault.marginAmount = _futureVault.marginAmount.sub(penaltyAmount);\\n    }\\n\\n    function isVaultSafe(FutureMarketLib.FutureVault memory _futureVault) internal view returns (bool) {\\n        if (_futureVault.positionAmount == 0) {\\n            return true;\\n        }\\n\\n        // TODO: use chainlink\\n        uint256 twap = reader.getTWAP();\\n\\n        uint256 minCollateral = FutureMarketLib.calculateMinCollateral(_futureVault, twap);\\n\\n        int256 vaultValue = getVaultValue(_futureVault, twap);\\n\\n        return vaultValue > int256(minCollateral);\\n    }\\n\\n    function getVaultValue(FutureMarketLib.FutureVault memory _futureVault, uint256 _price)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 positionValue = int256(_price)\\n            .sub(int256(_futureVault.entryPrice).add(fundingFeePerPosition.sub(_futureVault.entryFundingFee)))\\n            .mul(_futureVault.positionAmount) / 1e18;\\n\\n        return positionValue.add(int256(_futureVault.marginAmount));\\n    }\\n\\n    function _createOrGetVault(uint256 _vaultId, bool _quoterMode)\\n        internal\\n        returns (uint256 futureVaultId, FutureMarketLib.FutureVault storage)\\n    {\\n        if (_vaultId == 0) {\\n            futureVaultId = IVaultNFT(vaultNFT).mintNFT(msg.sender);\\n        } else {\\n            futureVaultId = _vaultId;\\n\\n            require(IVaultNFT(vaultNFT).ownerOf(futureVaultId) == msg.sender || _quoterMode, \\\"FM0\\\");\\n        }\\n\\n        return (futureVaultId, futureVaults[futureVaultId]);\\n    }\\n\\n    function _coverAndRebalance(\\n        int256 _poolPosition,\\n        int256 _amount,\\n        DataType.TradeOption memory tradeOption\\n    ) internal returns (uint256 entryPrice) {\\n        DataType.OpenPositionOption memory openPositionOption = DataType.OpenPositionOption(0, type(uint256).max, 500);\\n\\n        DataType.PositionUpdate[] memory positionUpdates = _rebalanceUpdate(\\n            int256(PredyMath.abs(_poolPosition.add(_amount))).sub(int256(PredyMath.abs(_poolPosition)))\\n        );\\n\\n        positionUpdates[positionUpdates.length - 1] = _cover(poolPosition.positionAmount);\\n\\n        int256 requiredAmount0;\\n        int256 requiredAmount1;\\n\\n        (vaultId, requiredAmount0, requiredAmount1, entryPrice) = controller.updatePosition(\\n            vaultId,\\n            positionUpdates,\\n            tradeOption,\\n            openPositionOption\\n        );\\n\\n        poolPosition.usdcAmount = PredyMath.addDelta(\\n            poolPosition.usdcAmount,\\n            reader.isMarginZero() ? -requiredAmount0 : -requiredAmount1\\n        );\\n    }\\n\\n    function _cover(int256 _poolPosition) internal view returns (DataType.PositionUpdate memory) {\\n        uint256 delta = calculateDelta(PredyMath.abs(_poolPosition));\\n\\n        int256 amount = _poolPosition.add(int256(delta));\\n        bool isMarginZero = reader.isMarginZero();\\n\\n        if (amount > 0) {\\n            return\\n                DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.BORROW_TOKEN,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    isMarginZero ? 0 : uint256(amount),\\n                    isMarginZero ? uint256(amount) : 0\\n                );\\n        } else if (amount < 0) {\\n            return\\n                DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.DEPOSIT_TOKEN,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    isMarginZero ? 0 : uint256(-amount),\\n                    isMarginZero ? uint256(-amount) : 0\\n                );\\n        } else {\\n            return DataType.PositionUpdate(DataType.PositionUpdateType.NOOP, 0, false, 0, 0, 0, 0, 0);\\n        }\\n    }\\n\\n    function _rebalance(uint160 _sqrtPrice, uint256 _poolPosition)\\n        internal\\n        view\\n        returns (DataType.PositionUpdate[] memory positionUpdates)\\n    {\\n        int24 currentTick = TickMath.getTickAtSqrtRatio(_sqrtPrice);\\n\\n        if (ranges[currentRangeId].lowerTick > currentTick && ranges[currentRangeId - 1].liquidity > 0) {\\n            return _rebalanceSwitch(currentRangeId, currentRangeId - 1, _poolPosition);\\n        }\\n\\n        if (ranges[currentRangeId].upperTick < currentTick && ranges[currentRangeId + 1].liquidity > 0) {\\n            return _rebalanceSwitch(currentRangeId, currentRangeId + 1, _poolPosition);\\n        }\\n    }\\n\\n    function _rebalanceUpdate(int256 _amount) internal view returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        positionUpdates = new DataType.PositionUpdate[](2);\\n\\n        if (_amount > 0) {\\n            positionUpdates[0] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.DEPOSIT_LPT,\\n                0,\\n                false,\\n                uint128(uint256(_amount).mul(ranges[currentRangeId].liquidity) / 1e18),\\n                ranges[currentRangeId].lowerTick,\\n                ranges[currentRangeId].upperTick,\\n                0,\\n                0\\n            );\\n        } else if (_amount < 0) {\\n            positionUpdates[0] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.WITHDRAW_LPT,\\n                0,\\n                false,\\n                uint128(uint256(-_amount).mul(ranges[currentRangeId].liquidity) / 1e18),\\n                ranges[currentRangeId].lowerTick,\\n                ranges[currentRangeId].upperTick,\\n                0,\\n                0\\n            );\\n        }\\n    }\\n\\n    function _rebalanceSwitch(\\n        uint256 _prevRangeId,\\n        uint256 _nextRangeId,\\n        uint256 _amount\\n    ) internal view returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        positionUpdates = new DataType.PositionUpdate[](3);\\n\\n        positionUpdates[0] = DataType.PositionUpdate(\\n            DataType.PositionUpdateType.WITHDRAW_LPT,\\n            0,\\n            false,\\n            uint128(_amount.mul(ranges[_prevRangeId].liquidity) / 1e18),\\n            ranges[_prevRangeId].lowerTick,\\n            ranges[_prevRangeId].upperTick,\\n            0,\\n            0\\n        );\\n        positionUpdates[1] = DataType.PositionUpdate(\\n            DataType.PositionUpdateType.DEPOSIT_LPT,\\n            0,\\n            false,\\n            uint128(_amount.mul(ranges[_nextRangeId].liquidity) / 1e18),\\n            ranges[_nextRangeId].lowerTick,\\n            ranges[_nextRangeId].upperTick,\\n            0,\\n            0\\n        );\\n    }\\n\\n    function calculateDelta(uint256 _poolPosition) internal view returns (uint256 delta) {\\n        Range memory range = ranges[currentRangeId];\\n\\n        (uint256 amount0, uint256 amount1) = LPTMath.getAmountsForLiquidity(\\n            controller.getSqrtPrice(),\\n            range.lowerTick,\\n            range.upperTick,\\n            uint128((range.liquidity * _poolPosition) / 1e18)\\n        );\\n\\n        if (reader.isMarginZero()) {\\n            return amount1;\\n        } else {\\n            return amount0;\\n        }\\n    }\\n\\n    function updateFundingPaidPerPosition() internal {\\n        updateFundingPaidPerPosition(reader.getTWAP(), calculateFundingRate());\\n    }\\n\\n    function updateFundingPaidPerPosition(uint256 twap, int256 fundingRate) internal {\\n        int256 fundingPaid = (int256(twap) * fundingRate) / 1e18;\\n\\n        fundingFeePerPosition = fundingFeePerPosition.add(\\n            int256(block.timestamp - lastTradeTimestamp).mul(fundingPaid) / FUNDING_PERIOD\\n        );\\n        lastTradeTimestamp = block.timestamp;\\n    }\\n\\n    function calculateFundingRate() internal view returns (int256) {\\n        if (poolPosition.positionAmount > 0) {\\n            return 1e14;\\n        } else {\\n            return -1e14;\\n        }\\n    }\\n\\n    function revertEntryPrice(uint256 _entryPrice) internal pure {\\n        assembly {\\n            let ptr := mload(0x20)\\n            mstore(ptr, _entryPrice)\\n            revert(ptr, 32)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d309252a198104dfca98687bbcd781f3af85f3ac622cce1820143effbd53e8c\",\"license\":\"agpl-3.0\"},\"src/satelite/FutureMarketLib.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\nimport \\\"../libraries/PredyMath.sol\\\";\\n\\nlibrary FutureMarketLib {\\n    using SignedSafeMath for int256;\\n\\n    struct FutureVault {\\n        uint256 id;\\n        address owner;\\n        int256 positionAmount;\\n        uint256 entryPrice;\\n        int256 entryFundingFee;\\n        uint256 marginAmount;\\n    }\\n\\n    function updateEntryPrice(\\n        int256 _entryPrice,\\n        int256 _position,\\n        int256 _tradePrice,\\n        int256 _positionTrade\\n    ) internal pure returns (int256 newEntryPrice, int256 profitValue) {\\n        int256 newPosition = _position.add(_positionTrade);\\n        if (_position == 0 || (_position > 0 && _positionTrade > 0) || (_position < 0 && _positionTrade < 0)) {\\n            newEntryPrice = (\\n                _entryPrice.mul(int256(PredyMath.abs(_position))).add(\\n                    _tradePrice.mul(int256(PredyMath.abs(_positionTrade)))\\n                )\\n            ).div(int256(PredyMath.abs(_position.add(_positionTrade))));\\n        } else if (\\n            (_position > 0 && _positionTrade < 0 && newPosition > 0) ||\\n            (_position < 0 && _positionTrade > 0 && newPosition < 0)\\n        ) {\\n            newEntryPrice = _entryPrice;\\n            profitValue = (-_positionTrade).mul(_tradePrice.sub(_entryPrice)) / 1e18;\\n        } else {\\n            if (newPosition != 0) {\\n                newEntryPrice = _tradePrice;\\n            }\\n\\n            profitValue = _position.mul(_tradePrice.sub(_entryPrice)) / 1e18;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates MinCollateral of vault positions.\\n     * MinCollateral := Min{Max{0.014 * Sqrt{PositionAmount}, 0.1}, 0.2} * TWAP * PositionAmount\\n     */\\n    function calculateMinCollateral(FutureVault memory _futureVault, uint256 _twap) internal pure returns (uint256) {\\n        uint256 positionAmount = PredyMath.abs(_futureVault.positionAmount);\\n\\n        uint256 minCollateralRatio = PredyMath.min(\\n            PredyMath.max((14 * 1e15 * PredyMath.sqrt(positionAmount * 1e18)) / 1e18, 10 * 1e16),\\n            20 * 1e16\\n        );\\n\\n        uint256 minCollateral = (_twap * positionAmount) / 1e18;\\n\\n        return (minCollateral * minCollateralRatio) / 1e18;\\n    }\\n}\\n\",\"keccak256\":\"0x2dc075bed725a0e7c82654857c7a852832165bdf3315d53d1c5f1614db8f5ea5\",\"license\":\"agpl-3.0\"},\"src/satelite/SateliteLib.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"../libraries/Constants.sol\\\";\\nimport \\\"../libraries/PredyMath.sol\\\";\\n\\nlibrary SateliteLib {\\n    using SignedSafeMath for int256;\\n\\n    function getProfit(\\n        uint256 indexPrice,\\n        uint256 strikePrice,\\n        int256 _amount,\\n        bool _isPut\\n    ) internal pure returns (int256) {\\n        uint256 instinctValue;\\n\\n        if (_isPut && strikePrice > indexPrice) {\\n            instinctValue = strikePrice - indexPrice;\\n        }\\n\\n        if (!_isPut && strikePrice < indexPrice) {\\n            instinctValue = indexPrice - strikePrice;\\n        }\\n\\n        return (int256(instinctValue) * _amount) / 1e8;\\n    }\\n\\n    function getBaseLiquidity(\\n        bool _isMarginZero,\\n        int24 _lower,\\n        int24 _upper\\n    ) internal pure returns (uint128) {\\n        if (_isMarginZero) {\\n            return\\n                LiquidityAmounts.getLiquidityForAmount1(\\n                    TickMath.getSqrtRatioAtTick(_lower),\\n                    TickMath.getSqrtRatioAtTick(_upper),\\n                    1e18\\n                );\\n        } else {\\n            return\\n                LiquidityAmounts.getLiquidityForAmount0(\\n                    TickMath.getSqrtRatioAtTick(_lower),\\n                    TickMath.getSqrtRatioAtTick(_upper),\\n                    1e18\\n                );\\n        }\\n    }\\n\\n    function getTradePrice(\\n        bool _isMarginZero,\\n        uint256 beforeSqrtPrice,\\n        uint256 afterSqrtPrice\\n    ) internal pure returns (uint256) {\\n        if (_isMarginZero) {\\n            uint256 entryPrice = (1e18 * Constants.Q96) / afterSqrtPrice;\\n\\n            return (entryPrice * Constants.Q96) / beforeSqrtPrice;\\n        } else {\\n            uint256 entryPrice = (afterSqrtPrice * 1e18) / Constants.Q96;\\n\\n            return (entryPrice * beforeSqrtPrice) / Constants.Q96;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf44c4eb6b5a49949f8371128200d5c6f182340a497a8bc79f82e0fe59371d6ee\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200488f3803806200488f8339810160408190526200003491620002b3565b604080518082018252600d81526c050726564794675747572654c5609c1b602080830191825283518085019094526004845263050464c560e41b9084015281519192916200008591600391620001ea565b5080516200009b906004906020840190620001ea565b50506005805460ff19166012179055506000620000b7620001e6565b60058054610100600160a81b0319166101006001600160a01b03841690810291909117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606085811b821660805284811b821660a05283901b1660c052600680546001600160a01b038381166001600160a01b03199092169190911790915560405163095ea7b360e01b81529083169063095ea7b3906200017c9087906000199060040162000338565b602060405180830381600087803b1580156200019757600080fd5b505af1158015620001ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d291906200030f565b50506001600a555050426011555062000351565b3390565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200022257600085556200026d565b82601f106200023d57805160ff19168380011785556200026d565b828001600101855582156200026d579182015b828111156200026d57825182559160200191906001019062000250565b506200027b9291506200027f565b5090565b5b808211156200027b576000815560010162000280565b80516001600160a01b0381168114620002ae57600080fd5b919050565b60008060008060808587031215620002c9578384fd5b620002d48562000296565b9350620002e46020860162000296565b9250620002f46040860162000296565b9150620003046060860162000296565b905092959194509250565b60006020828403121562000321578081fd5b8151801515811462000331578182fd5b9392505050565b6001600160a01b03929092168252602082015260400190565b60805160601c60a05160601c60c05160601c6144b3620003dc600039806105d65280610a445280610a7e52806111265250806105145280610707528061091d5280610dd6528061109d52806115775280611ea152806120b552806122b252806129295280613598525080610c445280610d14528061166e528061286452806134e852506144b36000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806351303622116100f957806395d89b4111610097578063a9059cbb11610071578063a9059cbb14610353578063b6b55f2514610366578063dd62ed3e14610379578063f2fde38b1461038c576101a9565b806395d89b4114610325578063a38573101461032d578063a457c2d714610340576101a9565b806370a08231116100d357806370a08231146102ed578063715018a6146103005780637d7c2a1c146103085780638da5cb5b14610310576101a9565b806351303622146102ca5780635393e780146102d257806356da7c28146102e5576101a9565b80632e1a7d4d11610166578063313ce56711610140578063313ce5671461028757806333194c0a1461029c57806339509351146102a45780635090fd52146102b7576101a9565b80632e1a7d4d1461024c5780632fcdd75b1461025f578063307b4ad814610272576101a9565b806302b02c10146101ae57806306fdde03146101cf578063095ea7b3146101e4578063150b7a021461020457806318160ddd1461022457806323b872dd14610239575b600080fd5b6101b661039f565b6040516101c694939291906140ac565b60405180910390f35b6101d76103ae565b6040516101c691906140c7565b6101f76101f2366004613de8565b610445565b6040516101c6919061408c565b610217610212366004613d4e565b610463565b6040516101c69190614097565b61022c610475565b6040516101c69190614131565b6101f7610247366004613d0e565b61047b565b61022c61025a366004613e47565b610503565b61022c61026d366004613ebb565b61060c565b610285610280366004613e5f565b61069e565b005b61028f61084a565b6040516101c69190614211565b61022c610853565b6101f76102b2366004613de8565b610859565b6102856102c5366004613e47565b6108a7565b61022c61090e565b61022c6102e0366004613e9a565b61098b565b61022c610ae8565b61022c6102fb366004613c9e565b610aee565b610285610b0d565b610285610bbf565b610318610e86565b6040516101c69190613ffe565b6101d7610e9a565b61028561033b366004613e47565b610efb565b6101f761034e366004613de8565b611010565b6101f7610361366004613de8565b611078565b61022c610374366004613e47565b61108c565b61022c610387366004613cd6565b611157565b61028561039a366004613c9e565b611182565b600c54600d54600e54600f5484565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561043a5780601f1061040f5761010080835404028352916020019161043a565b820191906000526020600020905b81548152906001019060200180831161041d57829003601f168201915b505050505090505b90565b6000610459610452611290565b8484611294565b5060015b92915050565b630a85bd0160e11b5b95945050505050565b60025490565b6000610488848484611380565b6104f884610494611290565b6104f38560405180606001604052806028815260200161435c602891396001600160a01b038a166000908152600160205260408120906104d2611290565b6001600160a01b0316815260208101919091526040016000205491906114db565b611294565b5060015b9392505050565b600061050d611572565b60006105a87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b15801561056b57600080fd5b505afa15801561057f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a39190613e2f565b611615565b9050806105b3610475565b8402816105bc57fe5b600f5491900492506105ce9084611735565b600f556105fc7f00000000000000000000000000000000000000000000000000000000000000003385611792565b61060633836118e0565b50919050565b6000610616611572565b6000610621846119dc565b905082156106325761063281611ada565b600061063e8685611ae5565b90935090506000610650828785611c3d565b9050837f9b3cc5398b36c186376b2bfaac294ce6a6b9dc790bbf7819f3f9fb613dea70ee3388866010548660405161068c95949392919061402b565b60405180910390a25050509392505050565b6106a6611290565b6001600160a01b03166106b7610e86565b6001600160a01b031614610700576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b600061079d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561075e57600080fd5b505afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190613e13565b8484611d49565b604080516080810182528681526001600160801b039283166020808301918252600297880b83850190815296880b606084019081526000998a526008909152929097209051815595516001909601805494519151860b62ffffff908116600160981b0262ffffff60981b199390970b16600160801b0262ffffff60801b19979093166fffffffffffffffffffffffffffffffff199095169490941795909516179390931691909117905550565b60055460ff1690565b60075481565b6000610459610866611290565b846104f38560016000610877611290565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611d9e565b6108af611290565b6001600160a01b03166108c0610e86565b6001600160a01b031614610909576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b600b55565b6000610918610475565b6109747f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b15801561056b57600080fd5b670de0b6b3a7640000028161098557fe5b04905090565b60008161099757600080fd5b60006109a4846000611ae5565b600581015491935091506109b89084611df8565b600582018190556040805160c0810182528354815260018401546001600160a01b03166020820152600284015491810191909152600383015460608201526004830154608082015260a0810191909152610a1190611e86565b610a365760405162461bcd60e51b8152600401610a2d906140da565b60405180910390fd5b6000831315610a7057610a6b7f0000000000000000000000000000000000000000000000000000000000000000333086611f58565b610aa7565b6000831215610aa757610aa77f00000000000000000000000000000000000000000000000000000000000000003385600003611792565b817fb405e6c780a7b7908874af8de64f2e43b0c7b0d9fcfc3503c27133082d9b894d3385604051610ad9929190614012565b60405180910390a25092915050565b600a5481565b6001600160a01b0381166000908152602081905260409020545b919050565b610b15611290565b6001600160a01b0316610b26610e86565b6001600160a01b031614610b6f576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6040805160e0810182526000808252600160208301819052928201819052606082019290925260808101610bf2836120b0565b81526020016000198152602001604051806020016040528060008152508152509050600060405180606001604052806000815260200160001981526020016101f462ffffff1681525090506000610ce47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166386e6862d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190613cba565b600c54610cdf9061217a565b612191565b9050610cf4600c60000154612283565b81600183510381518110610d0457fe5b60200260200101819052506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663453fcdd26007548588886040518563ffffffff1660e01b8152600401610d66949392919061413a565b608060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190613ef3565b50600760008295508396508491905055505050610e7c600c600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190613e13565b610e725782600003610e77565b836000035b611df8565b600f555050505050565b60055461010090046001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561043a5780601f1061040f5761010080835404028352916020019161043a565b610f03611572565b600081815260096020908152604091829020825160c0810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152610f6990611e86565b15610f865760405162461bcd60e51b8152600401610a2d90614114565b600082815260096020526040812060020154810390610fa4826119dc565b90506000610fb3848484611c3d565b90506000610fc2858585612472565b9050857fe456fe400dc609d1dd60685837392e23072eea9490a0ccc2de290fcd742ed4f9338686601054878760405161100096959493929190614059565b60405180910390a2505050505050565b600061045961101d611290565b846104f3856040518060600160405280602581526020016144596025913960016000611047611290565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906114db565b6000610459611085611290565b8484611380565b6000611096611572565b60006110f47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b15801561056b57600080fd5b90508061110357829150611119565b8061110c610475565b84028161111557fe5b0491505b600f80548401905561114d7f0000000000000000000000000000000000000000000000000000000000000000333086611f58565b61060633836124b9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61118a611290565b6001600160a01b031661119b610e86565b6001600160a01b0316146111e4576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b6001600160a01b0381166112295760405162461bcd60e51b815260040180806020018281038252602681526020018061428b6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b6001600160a01b0383166112d95760405162461bcd60e51b81526004018080602001828103825260248152602001806144116024913960400191505060405180910390fd5b6001600160a01b03821661131e5760405162461bcd60e51b81526004018080602001828103825260228152602001806142b16022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166113c55760405162461bcd60e51b81526004018080602001828103825260258152602001806143ec6025913960400191505060405180910390fd5b6001600160a01b03821661140a5760405162461bcd60e51b81526004018080602001828103825260238152602001806142466023913960400191505060405180910390fd5b6114158383836125a9565b611452816040518060600160405280602681526020016142d3602691396001600160a01b03861660009081526020819052604090205491906114db565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546114819082611d9e565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561156a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561152f578181015183820152602001611517565b50505050905090810190601f16801561155c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6116137f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ce57600080fd5b505afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613e2f565b61160e6125ae565b6125d8565b565b600080670de0b6b3a7640000611660600c6000015461165a61165361164a600c6002015460105461261c90919063ffffffff16565b600d5490612681565b879061261c565b906126e6565b8161166757fe5b05905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3d2ca2d6007546040518263ffffffff1660e01b81526004016116ba9190614131565b60206040518083038186803b1580156116d257600080fd5b505afa1580156116e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170a9190613e2f565b600f5490915061172d90611728906117228585612681565b90612681565b61278f565b949350505050565b60008282111561178c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b6020831061180e5780518252601f1990920191602091820191016117ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611870576040519150601f19603f3d011682016040523d82523d6000602084013e611875565b606091505b50915091508180156118a35750805115806118a357508080602001905160208110156118a057600080fd5b50515b6118d9576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b5050505050565b6001600160a01b0382166119255760405162461bcd60e51b81526004018080602001828103825260218152602001806143cb6021913960400191505060405180910390fd5b611931826000836125a9565b61196e81604051806060016040528060228152602001614269602291396001600160a01b03851660009081526020819052604090205491906114db565b6001600160a01b0383166000908152602081905260409020556002546119949082611735565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6040805160e08101825260008082526001602083018190529282018190526060820192909252819060808101611a11856120b0565b81526020016000198152602001604051806020016040528060008152508152509050611a43600c6000015484836127e6565b9150506000806000611a61600c60010154600c60000154868861298f565b91509150611a6e8261278f565b600d55611a7b8382612681565b92505050600080611a9a600c60020154600c600001546010548861298f565b600e8290559092509050611aae8382612681565b92505050611ac1600c6003015482611df8565b600f5550600c54611ad2908361261c565b600c55919050565b602051818152602081fd5b60008083611b76576006546040516354ba0f2760e01b81526001600160a01b03909116906354ba0f2790611b1d903390600401613ffe565b602060405180830381600087803b158015611b3757600080fd5b505af1158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f9190613e2f565b9150611c27565b6006546040516331a9108f60e11b815285935033916001600160a01b031690636352211e90611ba9908690600401614131565b60206040518083038186803b158015611bc157600080fd5b505afa158015611bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf99190613cba565b6001600160a01b03161480611c0b5750825b611c275760405162461bcd60e51b8152600401610a2d906140f7565b5060008181526009602052604090209250929050565b6000806000611c5686600301548760020154868861298f565b91509150611c638261278f565b6003870155611c728382612681565b92505050600080611c8f866004015487600201546010548861298f565b600488018290559092509050611ca58382612681565b92505050611cc083856002015461268190919063ffffffff16565b60028501556005840154611cd49082611df8565b600585018190556040805160c0810182528654815260018701546001600160a01b03166020820152600287015491810191909152600386015460608201526004860154608082015260a0810191909152611d2d90611e86565b6104fc5760405162461bcd60e51b8152600401610a2d906140da565b60008315611d7b57611d74611d5d84612aca565b611d6684612aca565b670de0b6b3a7640000612dfc565b90506104fc565b611d74611d8784612aca565b611d9084612aca565b670de0b6b3a7640000612e3e565b6000828201838110156104fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080821215611e48578282600003840391508110611e43576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b61045d565b508082018281101561045d576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b6000816040015160001415611e9d57506001610b08565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef857600080fd5b505afa158015611f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f309190613e2f565b90506000611f3e8483612e9c565b90506000611f4c8584612f1a565b91909113949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310611fdc5780518252601f199092019160209182019101611fbd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461203e576040519150601f19603f3d011682016040523d82523d6000602084013e612043565b606091505b5091509150818015612071575080511580612071575080806020019051602081101561206e57600080fd5b50515b6120a8576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121449190613e2f565b90506003670de0b6b3a764000061216185600c600001540161217a565b83028161216a57fe5b048161217257fe5b049392505050565b60008082121561218d578160000361045d565b5090565b6060600061219e84612f79565b600b54600090815260086020526040902060010154909150600282810b600160801b909204810b900b1380156121f45750600b54600019016000908152600860205260409020600101546001600160801b031615155b156122135761220b600b546001600b540385613298565b91505061045d565b600b54600090815260086020526040902060010154600282810b600160981b909204810b900b1280156122655750600b546001908101600090815260086020526040902001546001600160801b031615155b1561227c5761220b600b54600b5460010185613298565b5092915050565b61228b613c46565b600061229e6122998461217a565b61346b565b905060006122ac8483612681565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561230957600080fd5b505afa15801561231d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123419190613e13565b905060008213156123b157604080516101008101909152806003815260006020820181905260408201819052606082018190526080820181905260a082015260c0018261238e5783612391565b60005b8152602001826123a25760006123a4565b835b8152509350505050610b08565b600082121561242457604080516101008101909152806001815260006020820181905260408201819052606082018190526080820181905260a082015260c001826123ff5783600003612402565b60005b8152602001826124135760006123a4565b836000038152509350505050610b08565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e0909101529350610b0892505050565b6000681b1ae4d6e2ef500000826124888561217a565b028161249057fe5b0490506124aa81856005015461173590919063ffffffff16565b84600501819055509392505050565b6001600160a01b038216612514576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612520600083836125a9565b60025461252d9082611d9e565b6002556001600160a01b0382166000908152602081905260409020546125539082611d9e565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600080600c6000015413156125ca5750655af3107a4000610442565b50655af3107a3fff19610442565b601154670de0b6b3a764000082840205906126109062015180906125fe904203846126e6565b8161260557fe5b601054919005612681565b60105550504260115550565b60008183038183128015906126315750838113155b80612646575060008312801561264657508381135b6104fc5760405162461bcd60e51b81526004018080602001828103825260248152602001806144356024913960400191505060405180910390fd5b60008282018183128015906126965750838112155b806126ab57506000831280156126ab57508381125b6104fc5760405162461bcd60e51b81526004018080602001828103825260218152602001806142f96021913960400191505060405180910390fd5b6000826126f55750600061045d565b826000191480156127095750600160ff1b82145b156127455760405162461bcd60e51b81526004018080602001828103825260278152602001806143a46027913960400191505060405180910390fd5b8282028284828161275257fe5b05146104fc5760405162461bcd60e51b81526004018080602001828103825260278152602001806143a46027913960400191505060405180910390fd5b60008082121561218d576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b60408051606081018252600080825260001960208301526101f4928201929092528161283461282f6128178861217a565b6128296128248a8a612681565b61217a565b9061261c565b613640565b9050612844600c60000154612283565b8160018351038151811061285457fe5b60200260200101819052506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663453fcdd26007548589886040518563ffffffff1660e01b81526004016128b6949392919061413a565b608060405180830381600087803b1580156128d057600080fd5b505af11580156128e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129089190613ef3565b60076000829a50839650849750859190505550505050612980600c600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2d57600080fd5b600f5550929695505050505050565b6000808061299d8685612681565b90508515806129b757506000861380156129b75750600084135b806129cd57506000861280156129cd5750600084125b15612a1857612a116129e26128248887612681565b612a0b6129f86129f18861217a565b89906126e6565b611722612a048b61217a565b8c906126e6565b90613833565b9250612ac0565b600086138015612a285750600084125b8015612a345750600081135b80612a565750600086128015612a4a5750600084135b8015612a565750600081125b15612a8e57869250670de0b6b3a7640000612a7f612a74878661261c565b6000879003906126e6565b81612a8657fe5b059150612ac0565b8015612a98578492505b670de0b6b3a7640000612ab5612aae878a61261c565b88906126e6565b81612abc57fe5b0591505b5094509492505050565b60008060008360020b12612ae1578260020b612ae9565b8260020b6000035b9050620d89e8811115612b27576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216612b3b57600160801b612b4d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615612b81576ffff97272373d413259a46990580e213a0260801c5b6004821615612ba0576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615612bbf576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615612bde576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615612bfd576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615612c1c576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615612c3b576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615612c5b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615612c7b576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615612c9b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615612cbb576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615612cdb576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615612cfb576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615612d1b576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615612d3b576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615612d5c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615612d7c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615612d9b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615612db8576b048a170391f7dc42444e8fa20260801c5b60008460020b1315612dd3578060001981612dcf57fe5b0490505b640100000000810615612de7576001612dea565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b03161115612e1c579192915b61172d612e3983600160601b8787036001600160a01b03166138eb565b61399a565b6000826001600160a01b0316846001600160a01b03161115612e5e579192915b6000612e81856001600160a01b0316856001600160a01b0316600160601b6138eb565b905061046c612e3984838888036001600160a01b03166138eb565b600080612eac846040015161217a565b90506000612eff612ef1670de0b6b3a7640000612ed285670de0b6b3a7640000026139b0565b6631bced02db00000281612ee257fe5b0467016345785d8a0000613a54565b6702c68af0bb140000613a6a565b670de0b6b3a764000092909402829004909302049392505050565b600080670de0b6b3a7640000612f58856040015161165a611653612f4d896080015160105461261c90919063ffffffff16565b60608a015190612681565b81612f5f57fe5b05905061172d8460a001518261268190919063ffffffff16565b60006401000276a36001600160a01b03831610801590612fb5575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b612fea576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061307e57607f810383901c9150613088565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461328957886001600160a01b031661326d82612aca565b6001600160a01b031611156132825781613284565b805b61328b565b815b9998505050505050505050565b60408051600380825260808201909252606091816020015b6132b8613c46565b8152602001906001900390816132b057505060408051610100810182526006815260006020808301829052828401829052888252600890529190912060010154919250906060820190670de0b6b3a76400009061331f9086906001600160801b0316613a79565b8161332657fe5b046001600160801b03168152600086815260086020818152604080842060010154600160801b8104600290810b810b848801528b865293909252600160981b909104820b90910b90830152606082018190526080909101819052825183919061338b57fe5b602090810291909101810191909152604080516101008101825260058152600081840181905281830181905286815260089093529120600101546060820190670de0b6b3a7640000906133e89086906001600160801b0316613a79565b816133ef57fe5b046001600160801b031681526000858152600860208181526040808420600190810154600160801b8104600290810b810b858901528b875294909352600160981b909204830b90920b91840191909152606083018290526080909201528251839190811061345957fe5b60200260200101819052509392505050565b600b5460009081526008602090815260408083208151608081018352815481526001909101546001600160801b03811682850152600160801b8104600290810b810b810b83850152600160981b909104810b810b900b606082015281516386e6862d60e01b81529151909284928392613592926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926386e6862d9260048083019392829003018186803b15801561352a57600080fd5b505afa15801561353e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135629190613cba565b84604001518560600151670de0b6b3a76400008988602001516001600160801b0316028161358c57fe5b04613ad2565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135ef57600080fd5b505afa158015613603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136279190613e13565b15613636579250610b08915050565b509150610b089050565b6040805160028082526060828101909352816020015b61365e613c46565b81526020019060019003908161365657905050905060008213156137515760408051610100810182526005815260006020808301829052828401829052600b5482526008905291909120600101546060820190670de0b6b3a7640000906136cf9086906001600160801b0316613a79565b816136d657fe5b046001600160801b03168152600b54600081815260086020818152604080842060010154600160801b8104600290810b810b8489015295855292909152600160981b909104830b90920b91830191909152606082018190526080909101819052825183919061374157fe5b6020026020010181905250610b08565b6000821215610b085760408051610100810182526006815260006020808301829052828401829052600b548252600890529182206001015490916060830191670de0b6b3a7640000916137b19190879003906001600160801b0316613a79565b816137b857fe5b046001600160801b03168152600b54600081815260086020818152604080842060010154600160801b8104600290810b810b8489015295855292909152600160981b909104830b90920b91830191909152606082018190526080909101819052825183919061382357fe5b6020026020010181905250919050565b600081613887576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b8160001914801561389b5750600160ff1b83145b156138d75760405162461bcd60e51b815260040180806020018281038252602181526020018061431a6021913960400191505060405180910390fd5b60008284816138e257fe5b05949350505050565b6000808060001985870986860292508281109083900303905080613921576000841161391657600080fd5b5082900490506104fc565b80841161392d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160801b0381168114610b0857600080fd5b60b581600160881b81106139c95760409190911b9060801c5b690100000000000000000081106139e55760209190911b9060401c5b6501000000000081106139fd5760109190911b9060201c5b63010000008110613a135760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b6000818311613a6357816104fc565b5090919050565b600081831161060657826104fc565b600082613a885750600061045d565b82820282848281613a9557fe5b04146104fc5760405162461bcd60e51b815260040180806020018281038252602181526020018061433b6021913960400191505060405180910390fd5b600080613af186613ae287612aca565b613aeb87612aca565b86613aff565b915091505b94509492505050565b600080836001600160a01b0316856001600160a01b03161115613b20579293925b846001600160a01b0316866001600160a01b031611613b4b57613b44858585613b9a565b9150613af6565b836001600160a01b0316866001600160a01b03161015613b8457613b70868585613b9a565b9150613b7d858785613c03565b9050613af6565b613b8f858585613c03565b905094509492505050565b6000826001600160a01b0316846001600160a01b03161115613bba579192915b836001600160a01b0316613bf3606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b03166138eb565b81613bfa57fe5b04949350505050565b6000826001600160a01b0316846001600160a01b03161115613c23579192915b61172d826001600160801b03168585036001600160a01b0316600160601b6138eb565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b8035600281900b8114610b0857600080fd5b600060208284031215613caf578081fd5b81356104fc8161421f565b600060208284031215613ccb578081fd5b81516104fc8161421f565b60008060408385031215613ce8578081fd5b8235613cf38161421f565b91506020830135613d038161421f565b809150509250929050565b600080600060608486031215613d22578081fd5b8335613d2d8161421f565b92506020840135613d3d8161421f565b929592945050506040919091013590565b600080600080600060808688031215613d65578081fd5b8535613d708161421f565b94506020860135613d808161421f565b935060408601359250606086013567ffffffffffffffff80821115613da3578283fd5b818801915088601f830112613db6578283fd5b813581811115613dc4578384fd5b896020828501011115613dd5578384fd5b9699959850939650602001949392505050565b60008060408385031215613dfa578182fd5b8235613e058161421f565b946020939093013593505050565b600060208284031215613e24578081fd5b81516104fc81614237565b600060208284031215613e40578081fd5b5051919050565b600060208284031215613e58578081fd5b5035919050565b600080600060608486031215613e73578283fd5b83359250613e8360208501613c8c565b9150613e9160408501613c8c565b90509250925092565b60008060408385031215613eac578182fd5b50508035926020909101359150565b600080600060608486031215613ecf578081fd5b83359250602084013591506040840135613ee881614237565b809150509250925092565b60008060008060808587031215613f08578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008151808452815b81811015613f4d57602081850181015186830182015201613f31565b81811115613f5e5782602083870101525b50601f01601f19169290920160200192915050565b60020b9052565b805182526020808201519083015260409081015162ffffff16910152565b60008151151583526020820151151560208401526040820151151560408401526060820151151560608401526080820151608084015260a082015160a084015260c082015160e060c085015261172d60e0850182613f28565b6001600160801b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b901515815260200190565b6001600160e01b031991909116815260200190565b93845260208401929092526040830152606082015260800190565b6000602082526104fc6020830184613f28565b602080825260039082015262464d3160e81b604082015260600190565b6020808252600390820152620464d360ec1b604082015260600190565b60208082526003908201526223269960e91b604082015260600190565b90815260200190565b600060c08083018784526020828186015281885180845260e093508387019150828a01865b828110156141e95781518051600d811061417557fe5b8552808601518686015260408082015115159086015260608082015161419d82880182613ff1565b50506080808201516141b182880182613f73565b505060a0808201516141c582880182613f73565b5050808801518589015286015186850152610100909301929084019060010161415f565b50505085810360408701526141fe8189613f98565b94505050505061046c6060830184613f7a565b60ff91909116815260200190565b6001600160a01b038116811461423457600080fd5b50565b801515811461423457600080fdfe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f7745524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ba8e3e765d0373ff81312ee3d92225ad5d64a655273b74a66f96e13a2be5f0ad64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806351303622116100f957806395d89b4111610097578063a9059cbb11610071578063a9059cbb14610353578063b6b55f2514610366578063dd62ed3e14610379578063f2fde38b1461038c576101a9565b806395d89b4114610325578063a38573101461032d578063a457c2d714610340576101a9565b806370a08231116100d357806370a08231146102ed578063715018a6146103005780637d7c2a1c146103085780638da5cb5b14610310576101a9565b806351303622146102ca5780635393e780146102d257806356da7c28146102e5576101a9565b80632e1a7d4d11610166578063313ce56711610140578063313ce5671461028757806333194c0a1461029c57806339509351146102a45780635090fd52146102b7576101a9565b80632e1a7d4d1461024c5780632fcdd75b1461025f578063307b4ad814610272576101a9565b806302b02c10146101ae57806306fdde03146101cf578063095ea7b3146101e4578063150b7a021461020457806318160ddd1461022457806323b872dd14610239575b600080fd5b6101b661039f565b6040516101c694939291906140ac565b60405180910390f35b6101d76103ae565b6040516101c691906140c7565b6101f76101f2366004613de8565b610445565b6040516101c6919061408c565b610217610212366004613d4e565b610463565b6040516101c69190614097565b61022c610475565b6040516101c69190614131565b6101f7610247366004613d0e565b61047b565b61022c61025a366004613e47565b610503565b61022c61026d366004613ebb565b61060c565b610285610280366004613e5f565b61069e565b005b61028f61084a565b6040516101c69190614211565b61022c610853565b6101f76102b2366004613de8565b610859565b6102856102c5366004613e47565b6108a7565b61022c61090e565b61022c6102e0366004613e9a565b61098b565b61022c610ae8565b61022c6102fb366004613c9e565b610aee565b610285610b0d565b610285610bbf565b610318610e86565b6040516101c69190613ffe565b6101d7610e9a565b61028561033b366004613e47565b610efb565b6101f761034e366004613de8565b611010565b6101f7610361366004613de8565b611078565b61022c610374366004613e47565b61108c565b61022c610387366004613cd6565b611157565b61028561039a366004613c9e565b611182565b600c54600d54600e54600f5484565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561043a5780601f1061040f5761010080835404028352916020019161043a565b820191906000526020600020905b81548152906001019060200180831161041d57829003601f168201915b505050505090505b90565b6000610459610452611290565b8484611294565b5060015b92915050565b630a85bd0160e11b5b95945050505050565b60025490565b6000610488848484611380565b6104f884610494611290565b6104f38560405180606001604052806028815260200161435c602891396001600160a01b038a166000908152600160205260408120906104d2611290565b6001600160a01b0316815260208101919091526040016000205491906114db565b611294565b5060015b9392505050565b600061050d611572565b60006105a87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b15801561056b57600080fd5b505afa15801561057f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a39190613e2f565b611615565b9050806105b3610475565b8402816105bc57fe5b600f5491900492506105ce9084611735565b600f556105fc7f00000000000000000000000000000000000000000000000000000000000000003385611792565b61060633836118e0565b50919050565b6000610616611572565b6000610621846119dc565b905082156106325761063281611ada565b600061063e8685611ae5565b90935090506000610650828785611c3d565b9050837f9b3cc5398b36c186376b2bfaac294ce6a6b9dc790bbf7819f3f9fb613dea70ee3388866010548660405161068c95949392919061402b565b60405180910390a25050509392505050565b6106a6611290565b6001600160a01b03166106b7610e86565b6001600160a01b031614610700576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b600061079d7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561075e57600080fd5b505afa158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190613e13565b8484611d49565b604080516080810182528681526001600160801b039283166020808301918252600297880b83850190815296880b606084019081526000998a526008909152929097209051815595516001909601805494519151860b62ffffff908116600160981b0262ffffff60981b199390970b16600160801b0262ffffff60801b19979093166fffffffffffffffffffffffffffffffff199095169490941795909516179390931691909117905550565b60055460ff1690565b60075481565b6000610459610866611290565b846104f38560016000610877611290565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611d9e565b6108af611290565b6001600160a01b03166108c0610e86565b6001600160a01b031614610909576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b600b55565b6000610918610475565b6109747f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b15801561056b57600080fd5b670de0b6b3a7640000028161098557fe5b04905090565b60008161099757600080fd5b60006109a4846000611ae5565b600581015491935091506109b89084611df8565b600582018190556040805160c0810182528354815260018401546001600160a01b03166020820152600284015491810191909152600383015460608201526004830154608082015260a0810191909152610a1190611e86565b610a365760405162461bcd60e51b8152600401610a2d906140da565b60405180910390fd5b6000831315610a7057610a6b7f0000000000000000000000000000000000000000000000000000000000000000333086611f58565b610aa7565b6000831215610aa757610aa77f00000000000000000000000000000000000000000000000000000000000000003385600003611792565b817fb405e6c780a7b7908874af8de64f2e43b0c7b0d9fcfc3503c27133082d9b894d3385604051610ad9929190614012565b60405180910390a25092915050565b600a5481565b6001600160a01b0381166000908152602081905260409020545b919050565b610b15611290565b6001600160a01b0316610b26610e86565b6001600160a01b031614610b6f576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6040805160e0810182526000808252600160208301819052928201819052606082019290925260808101610bf2836120b0565b81526020016000198152602001604051806020016040528060008152508152509050600060405180606001604052806000815260200160001981526020016101f462ffffff1681525090506000610ce47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166386e6862d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd39190613cba565b600c54610cdf9061217a565b612191565b9050610cf4600c60000154612283565b81600183510381518110610d0457fe5b60200260200101819052506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663453fcdd26007548588886040518563ffffffff1660e01b8152600401610d66949392919061413a565b608060405180830381600087803b158015610d8057600080fd5b505af1158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190613ef3565b50600760008295508396508491905055505050610e7c600c600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2d57600080fd5b505afa158015610e41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e659190613e13565b610e725782600003610e77565b836000035b611df8565b600f555050505050565b60055461010090046001600160a01b031690565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561043a5780601f1061040f5761010080835404028352916020019161043a565b610f03611572565b600081815260096020908152604091829020825160c0810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152610f6990611e86565b15610f865760405162461bcd60e51b8152600401610a2d90614114565b600082815260096020526040812060020154810390610fa4826119dc565b90506000610fb3848484611c3d565b90506000610fc2858585612472565b9050857fe456fe400dc609d1dd60685837392e23072eea9490a0ccc2de290fcd742ed4f9338686601054878760405161100096959493929190614059565b60405180910390a2505050505050565b600061045961101d611290565b846104f3856040518060600160405280602581526020016144596025913960016000611047611290565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906114db565b6000610459611085611290565b8484611380565b6000611096611572565b60006110f47f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b15801561056b57600080fd5b90508061110357829150611119565b8061110c610475565b84028161111557fe5b0491505b600f80548401905561114d7f0000000000000000000000000000000000000000000000000000000000000000333086611f58565b61060633836124b9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61118a611290565b6001600160a01b031661119b610e86565b6001600160a01b0316146111e4576040805162461bcd60e51b81526020600482018190526024820152600080516020614384833981519152604482015290519081900360640190fd5b6001600160a01b0381166112295760405162461bcd60e51b815260040180806020018281038252602681526020018061428b6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3390565b6001600160a01b0383166112d95760405162461bcd60e51b81526004018080602001828103825260248152602001806144116024913960400191505060405180910390fd5b6001600160a01b03821661131e5760405162461bcd60e51b81526004018080602001828103825260228152602001806142b16022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166113c55760405162461bcd60e51b81526004018080602001828103825260258152602001806143ec6025913960400191505060405180910390fd5b6001600160a01b03821661140a5760405162461bcd60e51b81526004018080602001828103825260238152602001806142466023913960400191505060405180910390fd5b6114158383836125a9565b611452816040518060600160405280602681526020016142d3602691396001600160a01b03861660009081526020819052604090205491906114db565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546114819082611d9e565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561156a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561152f578181015183820152602001611517565b50505050905090810190601f16801561155c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6116137f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ce57600080fd5b505afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613e2f565b61160e6125ae565b6125d8565b565b600080670de0b6b3a7640000611660600c6000015461165a61165361164a600c6002015460105461261c90919063ffffffff16565b600d5490612681565b879061261c565b906126e6565b8161166757fe5b05905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3d2ca2d6007546040518263ffffffff1660e01b81526004016116ba9190614131565b60206040518083038186803b1580156116d257600080fd5b505afa1580156116e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170a9190613e2f565b600f5490915061172d90611728906117228585612681565b90612681565b61278f565b949350505050565b60008282111561178c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b6020831061180e5780518252601f1990920191602091820191016117ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611870576040519150601f19603f3d011682016040523d82523d6000602084013e611875565b606091505b50915091508180156118a35750805115806118a357508080602001905160208110156118a057600080fd5b50515b6118d9576040805162461bcd60e51b815260206004820152600260248201526114d560f21b604482015290519081900360640190fd5b5050505050565b6001600160a01b0382166119255760405162461bcd60e51b81526004018080602001828103825260218152602001806143cb6021913960400191505060405180910390fd5b611931826000836125a9565b61196e81604051806060016040528060228152602001614269602291396001600160a01b03851660009081526020819052604090205491906114db565b6001600160a01b0383166000908152602081905260409020556002546119949082611735565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6040805160e08101825260008082526001602083018190529282018190526060820192909252819060808101611a11856120b0565b81526020016000198152602001604051806020016040528060008152508152509050611a43600c6000015484836127e6565b9150506000806000611a61600c60010154600c60000154868861298f565b91509150611a6e8261278f565b600d55611a7b8382612681565b92505050600080611a9a600c60020154600c600001546010548861298f565b600e8290559092509050611aae8382612681565b92505050611ac1600c6003015482611df8565b600f5550600c54611ad2908361261c565b600c55919050565b602051818152602081fd5b60008083611b76576006546040516354ba0f2760e01b81526001600160a01b03909116906354ba0f2790611b1d903390600401613ffe565b602060405180830381600087803b158015611b3757600080fd5b505af1158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f9190613e2f565b9150611c27565b6006546040516331a9108f60e11b815285935033916001600160a01b031690636352211e90611ba9908690600401614131565b60206040518083038186803b158015611bc157600080fd5b505afa158015611bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf99190613cba565b6001600160a01b03161480611c0b5750825b611c275760405162461bcd60e51b8152600401610a2d906140f7565b5060008181526009602052604090209250929050565b6000806000611c5686600301548760020154868861298f565b91509150611c638261278f565b6003870155611c728382612681565b92505050600080611c8f866004015487600201546010548861298f565b600488018290559092509050611ca58382612681565b92505050611cc083856002015461268190919063ffffffff16565b60028501556005840154611cd49082611df8565b600585018190556040805160c0810182528654815260018701546001600160a01b03166020820152600287015491810191909152600386015460608201526004860154608082015260a0810191909152611d2d90611e86565b6104fc5760405162461bcd60e51b8152600401610a2d906140da565b60008315611d7b57611d74611d5d84612aca565b611d6684612aca565b670de0b6b3a7640000612dfc565b90506104fc565b611d74611d8784612aca565b611d9084612aca565b670de0b6b3a7640000612e3e565b6000828201838110156104fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600080821215611e48578282600003840391508110611e43576040805162461bcd60e51b81526020600482015260026024820152614c5360f01b604482015290519081900360640190fd5b61045d565b508082018281101561045d576040805162461bcd60e51b81526020600482015260026024820152614c4160f01b604482015290519081900360640190fd5b6000816040015160001415611e9d57506001610b08565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166305ecd0036040518163ffffffff1660e01b815260040160206040518083038186803b158015611ef857600080fd5b505afa158015611f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f309190613e2f565b90506000611f3e8483612e9c565b90506000611f4c8584612f1a565b91909113949350505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310611fdc5780518252601f199092019160209182019101611fbd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461203e576040519150601f19603f3d011682016040523d82523d6000602084013e612043565b606091505b5091509150818015612071575080511580612071575080806020019051602081101561206e57600080fd5b50515b6120a8576040805162461bcd60e51b815260206004820152600360248201526229aa2360e91b604482015290519081900360640190fd5b505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166398d5fdca6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121449190613e2f565b90506003670de0b6b3a764000061216185600c600001540161217a565b83028161216a57fe5b048161217257fe5b049392505050565b60008082121561218d578160000361045d565b5090565b6060600061219e84612f79565b600b54600090815260086020526040902060010154909150600282810b600160801b909204810b900b1380156121f45750600b54600019016000908152600860205260409020600101546001600160801b031615155b156122135761220b600b546001600b540385613298565b91505061045d565b600b54600090815260086020526040902060010154600282810b600160981b909204810b900b1280156122655750600b546001908101600090815260086020526040902001546001600160801b031615155b1561227c5761220b600b54600b5460010185613298565b5092915050565b61228b613c46565b600061229e6122998461217a565b61346b565b905060006122ac8483612681565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561230957600080fd5b505afa15801561231d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123419190613e13565b905060008213156123b157604080516101008101909152806003815260006020820181905260408201819052606082018190526080820181905260a082015260c0018261238e5783612391565b60005b8152602001826123a25760006123a4565b835b8152509350505050610b08565b600082121561242457604080516101008101909152806001815260006020820181905260408201819052606082018190526080820181905260a082015260c001826123ff5783600003612402565b60005b8152602001826124135760006123a4565b836000038152509350505050610b08565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e0909101529350610b0892505050565b6000681b1ae4d6e2ef500000826124888561217a565b028161249057fe5b0490506124aa81856005015461173590919063ffffffff16565b84600501819055509392505050565b6001600160a01b038216612514576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b612520600083836125a9565b60025461252d9082611d9e565b6002556001600160a01b0382166000908152602081905260409020546125539082611d9e565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b600080600c6000015413156125ca5750655af3107a4000610442565b50655af3107a3fff19610442565b601154670de0b6b3a764000082840205906126109062015180906125fe904203846126e6565b8161260557fe5b601054919005612681565b60105550504260115550565b60008183038183128015906126315750838113155b80612646575060008312801561264657508381135b6104fc5760405162461bcd60e51b81526004018080602001828103825260248152602001806144356024913960400191505060405180910390fd5b60008282018183128015906126965750838112155b806126ab57506000831280156126ab57508381125b6104fc5760405162461bcd60e51b81526004018080602001828103825260218152602001806142f96021913960400191505060405180910390fd5b6000826126f55750600061045d565b826000191480156127095750600160ff1b82145b156127455760405162461bcd60e51b81526004018080602001828103825260278152602001806143a46027913960400191505060405180910390fd5b8282028284828161275257fe5b05146104fc5760405162461bcd60e51b81526004018080602001828103825260278152602001806143a46027913960400191505060405180910390fd5b60008082121561218d576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b60408051606081018252600080825260001960208301526101f4928201929092528161283461282f6128178861217a565b6128296128248a8a612681565b61217a565b9061261c565b613640565b9050612844600c60000154612283565b8160018351038151811061285457fe5b60200260200101819052506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663453fcdd26007548589886040518563ffffffff1660e01b81526004016128b6949392919061413a565b608060405180830381600087803b1580156128d057600080fd5b505af11580156128e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129089190613ef3565b60076000829a50839650849750859190505550505050612980600c600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2d57600080fd5b600f5550929695505050505050565b6000808061299d8685612681565b90508515806129b757506000861380156129b75750600084135b806129cd57506000861280156129cd5750600084125b15612a1857612a116129e26128248887612681565b612a0b6129f86129f18861217a565b89906126e6565b611722612a048b61217a565b8c906126e6565b90613833565b9250612ac0565b600086138015612a285750600084125b8015612a345750600081135b80612a565750600086128015612a4a5750600084135b8015612a565750600081125b15612a8e57869250670de0b6b3a7640000612a7f612a74878661261c565b6000879003906126e6565b81612a8657fe5b059150612ac0565b8015612a98578492505b670de0b6b3a7640000612ab5612aae878a61261c565b88906126e6565b81612abc57fe5b0591505b5094509492505050565b60008060008360020b12612ae1578260020b612ae9565b8260020b6000035b9050620d89e8811115612b27576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216612b3b57600160801b612b4d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615612b81576ffff97272373d413259a46990580e213a0260801c5b6004821615612ba0576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615612bbf576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615612bde576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615612bfd576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615612c1c576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615612c3b576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615612c5b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615612c7b576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615612c9b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615612cbb576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615612cdb576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615612cfb576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615612d1b576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615612d3b576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615612d5c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615612d7c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615612d9b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615612db8576b048a170391f7dc42444e8fa20260801c5b60008460020b1315612dd3578060001981612dcf57fe5b0490505b640100000000810615612de7576001612dea565b60005b60ff16602082901c0192505050919050565b6000826001600160a01b0316846001600160a01b03161115612e1c579192915b61172d612e3983600160601b8787036001600160a01b03166138eb565b61399a565b6000826001600160a01b0316846001600160a01b03161115612e5e579192915b6000612e81856001600160a01b0316856001600160a01b0316600160601b6138eb565b905061046c612e3984838888036001600160a01b03166138eb565b600080612eac846040015161217a565b90506000612eff612ef1670de0b6b3a7640000612ed285670de0b6b3a7640000026139b0565b6631bced02db00000281612ee257fe5b0467016345785d8a0000613a54565b6702c68af0bb140000613a6a565b670de0b6b3a764000092909402829004909302049392505050565b600080670de0b6b3a7640000612f58856040015161165a611653612f4d896080015160105461261c90919063ffffffff16565b60608a015190612681565b81612f5f57fe5b05905061172d8460a001518261268190919063ffffffff16565b60006401000276a36001600160a01b03831610801590612fb5575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b612fea576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061307e57607f810383901c9150613088565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461328957886001600160a01b031661326d82612aca565b6001600160a01b031611156132825781613284565b805b61328b565b815b9998505050505050505050565b60408051600380825260808201909252606091816020015b6132b8613c46565b8152602001906001900390816132b057505060408051610100810182526006815260006020808301829052828401829052888252600890529190912060010154919250906060820190670de0b6b3a76400009061331f9086906001600160801b0316613a79565b8161332657fe5b046001600160801b03168152600086815260086020818152604080842060010154600160801b8104600290810b810b848801528b865293909252600160981b909104820b90910b90830152606082018190526080909101819052825183919061338b57fe5b602090810291909101810191909152604080516101008101825260058152600081840181905281830181905286815260089093529120600101546060820190670de0b6b3a7640000906133e89086906001600160801b0316613a79565b816133ef57fe5b046001600160801b031681526000858152600860208181526040808420600190810154600160801b8104600290810b810b858901528b875294909352600160981b909204830b90920b91840191909152606083018290526080909201528251839190811061345957fe5b60200260200101819052509392505050565b600b5460009081526008602090815260408083208151608081018352815481526001909101546001600160801b03811682850152600160801b8104600290810b810b810b83850152600160981b909104810b810b900b606082015281516386e6862d60e01b81529151909284928392613592926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926386e6862d9260048083019392829003018186803b15801561352a57600080fd5b505afa15801561353e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135629190613cba565b84604001518560600151670de0b6b3a76400008988602001516001600160801b0316028161358c57fe5b04613ad2565b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663517ede9d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135ef57600080fd5b505afa158015613603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136279190613e13565b15613636579250610b08915050565b509150610b089050565b6040805160028082526060828101909352816020015b61365e613c46565b81526020019060019003908161365657905050905060008213156137515760408051610100810182526005815260006020808301829052828401829052600b5482526008905291909120600101546060820190670de0b6b3a7640000906136cf9086906001600160801b0316613a79565b816136d657fe5b046001600160801b03168152600b54600081815260086020818152604080842060010154600160801b8104600290810b810b8489015295855292909152600160981b909104830b90920b91830191909152606082018190526080909101819052825183919061374157fe5b6020026020010181905250610b08565b6000821215610b085760408051610100810182526006815260006020808301829052828401829052600b548252600890529182206001015490916060830191670de0b6b3a7640000916137b19190879003906001600160801b0316613a79565b816137b857fe5b046001600160801b03168152600b54600081815260086020818152604080842060010154600160801b8104600290810b810b8489015295855292909152600160981b909104830b90920b91830191909152606082018190526080909101819052825183919061382357fe5b6020026020010181905250919050565b600081613887576040805162461bcd60e51b815260206004820181905260248201527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604482015290519081900360640190fd5b8160001914801561389b5750600160ff1b83145b156138d75760405162461bcd60e51b815260040180806020018281038252602181526020018061431a6021913960400191505060405180910390fd5b60008284816138e257fe5b05949350505050565b6000808060001985870986860292508281109083900303905080613921576000841161391657600080fd5b5082900490506104fc565b80841161392d57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b806001600160801b0381168114610b0857600080fd5b60b581600160881b81106139c95760409190911b9060801c5b690100000000000000000081106139e55760209190911b9060401c5b6501000000000081106139fd5760109190911b9060201c5b63010000008110613a135760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b6000818311613a6357816104fc565b5090919050565b600081831161060657826104fc565b600082613a885750600061045d565b82820282848281613a9557fe5b04146104fc5760405162461bcd60e51b815260040180806020018281038252602181526020018061433b6021913960400191505060405180910390fd5b600080613af186613ae287612aca565b613aeb87612aca565b86613aff565b915091505b94509492505050565b600080836001600160a01b0316856001600160a01b03161115613b20579293925b846001600160a01b0316866001600160a01b031611613b4b57613b44858585613b9a565b9150613af6565b836001600160a01b0316866001600160a01b03161015613b8457613b70868585613b9a565b9150613b7d858785613c03565b9050613af6565b613b8f858585613c03565b905094509492505050565b6000826001600160a01b0316846001600160a01b03161115613bba579192915b836001600160a01b0316613bf3606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b03166138eb565b81613bfa57fe5b04949350505050565b6000826001600160a01b0316846001600160a01b03161115613c23579192915b61172d826001600160801b03168585036001600160a01b0316600160601b6138eb565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b8035600281900b8114610b0857600080fd5b600060208284031215613caf578081fd5b81356104fc8161421f565b600060208284031215613ccb578081fd5b81516104fc8161421f565b60008060408385031215613ce8578081fd5b8235613cf38161421f565b91506020830135613d038161421f565b809150509250929050565b600080600060608486031215613d22578081fd5b8335613d2d8161421f565b92506020840135613d3d8161421f565b929592945050506040919091013590565b600080600080600060808688031215613d65578081fd5b8535613d708161421f565b94506020860135613d808161421f565b935060408601359250606086013567ffffffffffffffff80821115613da3578283fd5b818801915088601f830112613db6578283fd5b813581811115613dc4578384fd5b896020828501011115613dd5578384fd5b9699959850939650602001949392505050565b60008060408385031215613dfa578182fd5b8235613e058161421f565b946020939093013593505050565b600060208284031215613e24578081fd5b81516104fc81614237565b600060208284031215613e40578081fd5b5051919050565b600060208284031215613e58578081fd5b5035919050565b600080600060608486031215613e73578283fd5b83359250613e8360208501613c8c565b9150613e9160408501613c8c565b90509250925092565b60008060408385031215613eac578182fd5b50508035926020909101359150565b600080600060608486031215613ecf578081fd5b83359250602084013591506040840135613ee881614237565b809150509250925092565b60008060008060808587031215613f08578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008151808452815b81811015613f4d57602081850181015186830182015201613f31565b81811115613f5e5782602083870101525b50601f01601f19169290920160200192915050565b60020b9052565b805182526020808201519083015260409081015162ffffff16910152565b60008151151583526020820151151560208401526040820151151560408401526060820151151560608401526080820151608084015260a082015160a084015260c082015160e060c085015261172d60e0850182613f28565b6001600160801b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b901515815260200190565b6001600160e01b031991909116815260200190565b93845260208401929092526040830152606082015260800190565b6000602082526104fc6020830184613f28565b602080825260039082015262464d3160e81b604082015260600190565b6020808252600390820152620464d360ec1b604082015260600190565b60208082526003908201526223269960e91b604082015260600190565b90815260200190565b600060c08083018784526020828186015281885180845260e093508387019150828a01865b828110156141e95781518051600d811061417557fe5b8552808601518686015260408082015115159086015260608082015161419d82880182613ff1565b50506080808201516141b182880182613f73565b505060a0808201516141c582880182613f73565b5050808801518589015286015186850152610100909301929084019060010161415f565b50505085810360408701526141fe8189613f98565b94505050505061046c6060830184613f7a565b60ff91909116815260200190565b6001600160a01b038116811461423457600080fd5b50565b801515811461423457600080fdfe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63655369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a206469766973696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573735369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f7745524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ba8e3e765d0373ff81312ee3d92225ad5d64a655273b74a66f96e13a2be5f0ad64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "FM0: caller is not vault owner FM1: vault must be safe FM2: vault must not be safe",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9134,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9140,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9142,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9144,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 9146,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 9148,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 8346,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 27855,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "vaultNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 27857,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "vaultId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 27879,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "ranges",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Range)27866_storage)"
      },
      {
        "astId": 27883,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "futureVaults",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(FutureVault)29714_storage)"
      },
      {
        "astId": 27885,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "futureVaultCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 27887,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "currentRangeId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 27889,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "poolPosition",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(PoolPosition)27875_storage"
      },
      {
        "astId": 27891,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "fundingFeePerPosition",
        "offset": 0,
        "slot": "16",
        "type": "t_int256"
      },
      {
        "astId": 27893,
        "contract": "src/satelite/FutureMarket.sol:FutureMarket",
        "label": "lastTradeTimestamp",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(FutureVault)29714_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FutureMarketLib.FutureVault)",
        "numberOfBytes": "32",
        "value": "t_struct(FutureVault)29714_storage"
      },
      "t_mapping(t_uint256,t_struct(Range)27866_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FutureMarket.Range)",
        "numberOfBytes": "32",
        "value": "t_struct(Range)27866_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FutureVault)29714_storage": {
        "encoding": "inplace",
        "label": "struct FutureMarketLib.FutureVault",
        "members": [
          {
            "astId": 29703,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 29705,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 29707,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "positionAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 29709,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "entryPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 29711,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "entryFundingFee",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 29713,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "marginAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PoolPosition)27875_storage": {
        "encoding": "inplace",
        "label": "struct FutureMarket.PoolPosition",
        "members": [
          {
            "astId": 27868,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "positionAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 27870,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "entryPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 27872,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "entryFundingFee",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 27874,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "usdcAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Range)27866_storage": {
        "encoding": "inplace",
        "label": "struct FutureMarket.Range",
        "members": [
          {
            "astId": 27859,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 27861,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "liquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 27863,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "lowerTick",
            "offset": 16,
            "slot": "1",
            "type": "t_int24"
          },
          {
            "astId": 27865,
            "contract": "src/satelite/FutureMarket.sol:FutureMarket",
            "label": "upperTick",
            "offset": 19,
            "slot": "1",
            "type": "t_int24"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
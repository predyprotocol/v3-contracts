{
  "address": "0xcB992a6a7A12Cf5b8fD7C8B60E0AC15D584c05D4",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "feeAmount0",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "feeAmount1",
          "type": "int256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rangeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "name": "LPTBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rangeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "name": "LPTDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rangeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "name": "LPTRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "rangeId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "liquidity",
          "type": "uint128"
        }
      ],
      "name": "LPTWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "marginAmount0",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "marginAmount1",
          "type": "int256"
        }
      ],
      "name": "MarginUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "TokenBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "TokenRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "srcAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subVaultIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3Pool",
          "name": "_uniswapPool",
          "type": "IUniswapV3Pool"
        }
      ],
      "name": "getSqrtPrice",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8404df085e4163f428f6205c6a725464ec384b68d64f604f51e25bdbd09a976",
  "receipt": {
    "to": null,
    "from": "0x1c745d31A084a14Ba30E7c9F4B14EA762d44f194",
    "contractAddress": "0xcB992a6a7A12Cf5b8fD7C8B60E0AC15D584c05D4",
    "transactionIndex": 1,
    "gasUsed": "5128457",
    "logsBloom": "0x
    "blockHash": "0x61187cebf11c90cc9bb1deb98ac658abecee6852fdd8c92e995a688357920544",
    "transactionHash": "0xf8404df085e4163f428f6205c6a725464ec384b68d64f604f51e25bdbd09a976",
    "logs": [],
    "blockNumber": 15339876,
    "cumulativeGasUsed": "5128457",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2e890afbf702298d3cec94a7fbf0e5bd",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"feeAmount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"feeAmount1\",\"type\":\"int256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rangeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"LPTBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rangeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"LPTDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rangeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"LPTRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rangeId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"LPTWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"marginAmount0\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"marginAmount1\",\"type\":\"int256\"}],\"name\":\"MarginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"TokenBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"TokenRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"_uniswapPool\",\"type\":\"IUniswapV3Pool\"}],\"name\":\"getSqrtPrice\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateFeeGrowth(DataType.Context,DataType.Vault,mapping(uint256 => DataType.SubVault) storage,mapping(bytes32 => DataType.PerpStatus) storage)\":{\"notice\":\"Collects trade fee and premium.\"},\"updatePosition(DataType.Vault storage,mapping(uint256 => DataType.SubVault) storage,DataType.Context storage,mapping(bytes32 => DataType.PerpStatus) storage,DataType.PositionUpdate[],DataType.TradeOption)\":{\"notice\":\"update position and return required token amounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/PositionUpdater.sol\":\"PositionUpdater\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632383138313937343237\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721 {\\n    /// @notice The permit typehash used in the permit signature\\n    /// @return The typehash for the permit\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    /// @notice The domain separator used in the permit signature\\n    /// @return The domain seperator used in encoding of permit signature\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /// @notice Approve of a specific token ID for spending by spender via signature\\n    /// @param spender The account that is being approved\\n    /// @param tokenId The ID of the token that is being approved for spending\\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol';\\n\\nimport './IPoolInitializer.sol';\\nimport './IERC721Permit.sol';\\nimport './IPeripheryPayments.sol';\\nimport './IPeripheryImmutableState.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Non-fungible token for positions\\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\\n/// and authorized.\\ninterface INonfungiblePositionManager is\\n    IPoolInitializer,\\n    IPeripheryPayments,\\n    IPeripheryImmutableState,\\n    IERC721Metadata,\\n    IERC721Enumerable,\\n    IERC721Permit\\n{\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n}\\n\",\"keccak256\":\"0xe1dadc73e60bf05d0b4e0f05bd2847c5783e833cc10352c14763360b13495ee1\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Immutable state\\n/// @notice Functions that return immutable state of the router\\ninterface IPeripheryImmutableState {\\n    /// @return Returns the address of the Uniswap V3 factory\\n    function factory() external view returns (address);\\n\\n    /// @return Returns the address of WETH9\\n    function WETH9() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/IPoolInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"src/libraries/BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\nlibrary BaseToken {\\n    using SafeMath for uint256;\\n\\n    struct TokenState {\\n        uint256 totalDeposited;\\n        uint256 totalBorrowed;\\n        uint256 collateralScaler;\\n        uint256 debtScaler;\\n    }\\n\\n    struct AccountState {\\n        uint256 collateralAmount;\\n        uint256 debtAmount;\\n        uint256 collateralEntryAmount;\\n    }\\n\\n    function initialize(TokenState storage tokenState) internal {\\n        tokenState.collateralScaler = Constants.ONE;\\n        tokenState.debtScaler = Constants.ONE;\\n    }\\n\\n    function addCollateral(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 mintAmount) {\\n        mintAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.collateralScaler);\\n\\n        accountState.collateralAmount = accountState.collateralAmount.add(mintAmount);\\n        tokenState.totalDeposited = tokenState.totalDeposited.add(mintAmount);\\n\\n        accountState.collateralEntryAmount = accountState.collateralEntryAmount.add(_amount);\\n    }\\n\\n    function addDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 mintAmount) {\\n        require(getAvailableCollateralValue(tokenState) >= _amount, \\\"B0\\\");\\n\\n        mintAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.debtScaler);\\n\\n        accountState.debtAmount = accountState.debtAmount.add(mintAmount);\\n        tokenState.totalBorrowed = tokenState.totalBorrowed.add(mintAmount);\\n    }\\n\\n    function removeCollateral(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount) {\\n        uint256 burnAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.collateralScaler);\\n\\n        if (accountState.collateralAmount < burnAmount) {\\n            finalBurnAmount = accountState.collateralAmount;\\n            accountState.collateralAmount = 0;\\n        } else {\\n            finalBurnAmount = burnAmount;\\n            accountState.collateralAmount = accountState.collateralAmount.sub(burnAmount);\\n        }\\n\\n        accountState.collateralEntryAmount = accountState.collateralEntryAmount.add(_amount);\\n\\n        tokenState.totalDeposited = tokenState.totalDeposited.sub(finalBurnAmount);\\n    }\\n\\n    function removeDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount) {\\n        uint256 burnAmount = PredyMath.mulDiv(_amount, Constants.ONE, tokenState.debtScaler);\\n\\n        if (accountState.debtAmount < burnAmount) {\\n            finalBurnAmount = accountState.debtAmount;\\n            accountState.debtAmount = 0;\\n        } else {\\n            finalBurnAmount = burnAmount;\\n            accountState.debtAmount = accountState.debtAmount.sub(burnAmount);\\n        }\\n\\n        tokenState.totalBorrowed = tokenState.totalBorrowed.sub(finalBurnAmount);\\n\\n        // TODO: roundUp\\n        finalBurnAmount = PredyMath.mulDiv(finalBurnAmount, tokenState.debtScaler, Constants.ONE);\\n    }\\n\\n    // get collateral value\\n    function getCollateralValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return PredyMath.mulDiv(accountState.collateralAmount, tokenState.collateralScaler, Constants.ONE);\\n    }\\n\\n    // get debt value\\n    function getDebtValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return PredyMath.mulDiv(accountState.debtAmount, tokenState.debtScaler, Constants.ONE);\\n    }\\n\\n    // update scaler\\n    function updateScaler(TokenState storage tokenState, uint256 _interestAmount) internal returns (uint256) {\\n        if (tokenState.totalDeposited == 0) {\\n            return 0;\\n        }\\n\\n        uint256 protocolFee = (((getTotalDebtValue(tokenState) * _interestAmount) / Constants.ONE) *\\n            Constants.RESERVE_FACTOR) / Constants.ONE;\\n\\n        tokenState.debtScaler = PredyMath.mulDiv(\\n            tokenState.debtScaler,\\n            (Constants.ONE + _interestAmount),\\n            Constants.ONE\\n        );\\n\\n        uint256 updateCollateralScaler = Constants.ONE +\\n            PredyMath.mulDiv(\\n                PredyMath.mulDiv(_interestAmount, tokenState.totalBorrowed, tokenState.totalDeposited),\\n                Constants.ONE - Constants.RESERVE_FACTOR,\\n                Constants.ONE\\n            );\\n\\n        tokenState.collateralScaler = PredyMath.mulDiv(\\n            tokenState.collateralScaler,\\n            updateCollateralScaler,\\n            Constants.ONE\\n        );\\n\\n        return protocolFee;\\n    }\\n\\n    function getTotalCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return PredyMath.mulDiv(tokenState.totalDeposited, tokenState.collateralScaler, Constants.ONE);\\n    }\\n\\n    function getTotalDebtValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return PredyMath.mulDiv(tokenState.totalBorrowed, tokenState.debtScaler, Constants.ONE);\\n    }\\n\\n    function getAvailableCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return getTotalCollateralValue(tokenState) - getTotalDebtValue(tokenState);\\n    }\\n\\n    function getUtilizationRatio(TokenState memory tokenState) internal pure returns (uint256) {\\n        if (tokenState.totalDeposited == 0) {\\n            return Constants.ONE;\\n        }\\n\\n        return PredyMath.mulDiv(getTotalDebtValue(tokenState), Constants.ONE, getTotalCollateralValue(tokenState));\\n    }\\n}\\n\",\"keccak256\":\"0x77669d19f18ae46b9b0a749684917eb980c1d2d61b5a9a8f101fd9ff4afd8ee2\",\"license\":\"UNLICENSED\"},\"src/libraries/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nlibrary Constants {\\n    uint256 internal constant ONE = 1e18;\\n    uint256 internal constant RESERVE_FACTOR = 5 * 1e16;\\n}\\n\",\"keccak256\":\"0x83555d2718ee5290bbd25c135d1fa043a50e73c2e8836c1f201ba71c6f0ef065\",\"license\":\"agpl-3.0\"},\"src/libraries/DataType.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\n\\nlibrary DataType {\\n    // Storage Data Type\\n    struct PerpStatus {\\n        uint256 tokenId;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 borrowedLiquidity;\\n        uint256 premiumGrowthForBorrower;\\n        uint256 premiumGrowthForLender;\\n        uint256 fee0Growth;\\n        uint256 fee1Growth;\\n        uint256 lastTouchedTimestamp;\\n    }\\n\\n    struct LPTState {\\n        bool isCollateral;\\n        bytes32 rangeId;\\n        uint128 liquidityAmount;\\n        uint256 premiumGrowthLast;\\n        uint256 fee0Last;\\n        uint256 fee1Last;\\n    }\\n\\n    struct SubVault {\\n        uint256 collateralAmount0;\\n        uint256 collateralAmount1;\\n        uint256 debtAmount0;\\n        uint256 debtAmount1;\\n        LPTState[] lpts;\\n    }\\n\\n    struct Vault {\\n        uint256 vaultId;\\n        address owner;\\n        int256 marginAmount0;\\n        int256 marginAmount1;\\n        BaseToken.AccountState balance0;\\n        BaseToken.AccountState balance1;\\n        uint256[] subVaults;\\n    }\\n\\n    struct Context {\\n        address token0;\\n        address token1;\\n        uint24 feeTier;\\n        address positionManager;\\n        address swapRouter;\\n        address uniswapPool;\\n        bool isMarginZero;\\n        uint256 nextSubVaultId;\\n        BaseToken.TokenState tokenState0;\\n        BaseToken.TokenState tokenState1;\\n        uint256 accumuratedProtocolFee0;\\n        uint256 accumuratedProtocolFee1;\\n    }\\n\\n    // Parameters\\n\\n    struct InitializationParams {\\n        uint24 feeTier;\\n        address token0;\\n        address token1;\\n        bool isMarginZero;\\n    }\\n\\n    struct LPT {\\n        bool isCollateral;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n    }\\n\\n    struct Position {\\n        uint256 subVaultIndex;\\n        uint256 collateral0;\\n        uint256 collateral1;\\n        uint256 debt0;\\n        uint256 debt1;\\n        LPT[] lpts;\\n    }\\n\\n    enum PositionUpdateType {\\n        NOOP,\\n        DEPOSIT_TOKEN,\\n        WITHDRAW_TOKEN,\\n        BORROW_TOKEN,\\n        REPAY_TOKEN,\\n        DEPOSIT_LPT,\\n        WITHDRAW_LPT,\\n        BORROW_LPT,\\n        REPAY_LPT,\\n        SWAP_EXACT_IN,\\n        SWAP_EXACT_OUT,\\n        DEPOSIT_MARGIN,\\n        WITHDRAW_MARGIN\\n    }\\n\\n    struct PositionUpdate {\\n        PositionUpdateType positionUpdateType;\\n        uint256 subVaultIndex;\\n        bool zeroForOne;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 param0;\\n        uint256 param1;\\n    }\\n\\n    struct MetaData {\\n        uint256 subVaultIndex;\\n        bytes metadata;\\n    }\\n\\n    struct TradeOption {\\n        bool reduceOnly;\\n        bool swapAnyway;\\n        bool quoterMode;\\n        bool isQuoteZero;\\n        int256 targetMarginAmount0;\\n        int256 targetMarginAmount1;\\n    }\\n\\n    struct OpenPositionOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint256 bufferAmount0;\\n        uint256 bufferAmount1;\\n        MetaData metadata;\\n    }\\n\\n    struct ClosePositionOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint256 swapRatio;\\n        MetaData metadata;\\n    }\\n\\n    struct LiquidationOption {\\n        uint256 lowerSqrtPrice;\\n        uint256 upperSqrtPrice;\\n        uint256 swapRatio;\\n        bool swapAnyway;\\n    }\\n\\n    struct VaultStatusValue {\\n        uint256 collateralValue;\\n        uint256 debtValue;\\n        int256 premiumValue;\\n    }\\n\\n    struct VaultStatusAmount {\\n        uint256 collateralAmount0;\\n        uint256 collateralAmount1;\\n        uint256 debtAmount0;\\n        uint256 debtAmount1;\\n        uint256 receivedTradeAmount0;\\n        uint256 receivedTradeAmount1;\\n        uint256 receivedPremium;\\n        uint256 paidpremium;\\n    }\\n\\n    struct SubVaultStatus {\\n        VaultStatusValue values;\\n        VaultStatusAmount amount;\\n    }\\n\\n    struct VaultStatus {\\n        int256 positionValue;\\n        int256 marginValue;\\n        int256 minCollateral;\\n        SubVaultStatus[] subVaults;\\n    }\\n}\\n\",\"keccak256\":\"0x28692a7659e41377d4666411168b6a8ada0d3c343209bc340c4f15417a3afb7e\",\"license\":\"UNLICENSED\"},\"src/libraries/LPTMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../vendors/IUniswapV3PoolOracle.sol\\\";\\n\\nlibrary LPTMath {\\n    function getLiquidityAndAmountToDeposit(\\n        bool isMarginZero,\\n        uint256 requestedAmount,\\n        uint160 currentSqrtPrice,\\n        int24 lower,\\n        int24 upper\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        if (isMarginZero) {\\n            return\\n                getLiquidityAndAmount(\\n                    0,\\n                    requestedAmount,\\n                    TickMath.getSqrtRatioAtTick(upper),\\n                    currentSqrtPrice,\\n                    lower,\\n                    upper\\n                );\\n        } else {\\n            return\\n                getLiquidityAndAmount(\\n                    requestedAmount,\\n                    0,\\n                    TickMath.getSqrtRatioAtTick(lower),\\n                    currentSqrtPrice,\\n                    lower,\\n                    upper\\n                );\\n        }\\n    }\\n\\n    function getLiquidityAndAmountToBorrow(\\n        bool isMarginZero,\\n        uint256 requestedAmount,\\n        int24 tick,\\n        int24 lower,\\n        int24 upper\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        if (isMarginZero) {\\n            return\\n                getLiquidityAndAmount(\\n                    0,\\n                    requestedAmount,\\n                    TickMath.getSqrtRatioAtTick(upper),\\n                    TickMath.getSqrtRatioAtTick(tick),\\n                    lower,\\n                    upper\\n                );\\n        } else {\\n            return\\n                getLiquidityAndAmount(\\n                    requestedAmount,\\n                    0,\\n                    TickMath.getSqrtRatioAtTick(lower),\\n                    TickMath.getSqrtRatioAtTick(tick),\\n                    lower,\\n                    upper\\n                );\\n        }\\n    }\\n\\n    function getLiquidityAndAmount(\\n        uint256 requestedAmount0,\\n        uint256 requestedAmount1,\\n        uint160 sqrtPrice1,\\n        uint160 sqrtPrice2,\\n        int24 lower,\\n        int24 upper\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        (liquidity) = LiquidityAmounts.getLiquidityForAmounts(\\n            sqrtPrice1,\\n            TickMath.getSqrtRatioAtTick(lower),\\n            TickMath.getSqrtRatioAtTick(upper),\\n            requestedAmount0,\\n            requestedAmount1\\n        );\\n\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n            sqrtPrice2,\\n            TickMath.getSqrtRatioAtTick(lower),\\n            TickMath.getSqrtRatioAtTick(upper),\\n            liquidity\\n        );\\n    }\\n\\n    function getLiquidityForAmounts(\\n        uint160 currentSqrtPrice,\\n        int24 _lower,\\n        int24 _upper,\\n        uint256 _amount0,\\n        uint256 _amount1\\n    ) internal pure returns (uint128) {\\n        return\\n            LiquidityAmounts.getLiquidityForAmounts(\\n                currentSqrtPrice,\\n                TickMath.getSqrtRatioAtTick(_lower),\\n                TickMath.getSqrtRatioAtTick(_upper),\\n                _amount0,\\n                _amount1\\n            );\\n    }\\n\\n    function getAmountsForLiquidity(\\n        uint160 currentSqrtPrice,\\n        int24 _lower,\\n        int24 _upper,\\n        uint128 _liquidity\\n    ) internal pure returns (uint256, uint256) {\\n        return\\n            LiquidityAmounts.getAmountsForLiquidity(\\n                currentSqrtPrice,\\n                TickMath.getSqrtRatioAtTick(_lower),\\n                TickMath.getSqrtRatioAtTick(_upper),\\n                _liquidity\\n            );\\n    }\\n\\n    function getAmountsForLiquidityRoundUp(\\n        uint160 currentSqrtPrice,\\n        int24 _lower,\\n        int24 _upper,\\n        uint128 _liquidity\\n    ) internal pure returns (uint256, uint256) {\\n        return\\n            getAmountsForLiquidityRoundUp(\\n                currentSqrtPrice,\\n                TickMath.getSqrtRatioAtTick(_lower),\\n                TickMath.getSqrtRatioAtTick(_upper),\\n                _liquidity\\n            );\\n    }\\n\\n    function getAmount0ForLiquidityRoundUp(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n\\n        uint256 inter = FullMath.mulDiv(intermediate, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96);\\n\\n        return FullMath.mulDivRoundingUp(liquidity, FixedPoint96.Q96, inter);\\n    }\\n\\n    function getAmount1ForLiquidityRoundUp(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    function getAmountsForLiquidityRoundUp(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidityRoundUp(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidityRoundUp(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidityRoundUp(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidityRoundUp(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n\\n    function getSqrtRatioAtTick(int24 _tick) internal pure returns (uint160) {\\n        return TickMath.getSqrtRatioAtTick(_tick);\\n    }\\n\\n    function callUniswapObserve(IUniswapV3Pool uniswapPool, uint256 ago) internal view returns (uint160, uint256) {\\n        uint32[] memory secondsAgos = new uint32[](2);\\n\\n        secondsAgos[0] = uint32(ago);\\n        secondsAgos[1] = 0;\\n\\n        (bool success, bytes memory data) = address(uniswapPool).staticcall(\\n            abi.encodeWithSelector(IUniswapV3PoolOracle.observe.selector, secondsAgos)\\n        );\\n\\n        if (!success) {\\n            if (keccak256(data) != keccak256(abi.encodeWithSignature(\\\"Error(string)\\\", \\\"OLD\\\"))) revertBytes(data);\\n\\n            (, , uint16 index, uint16 cardinality, , , ) = uniswapPool.slot0();\\n\\n            (uint32 oldestAvailableAge, , , bool initialized) = uniswapPool.observations((index + 1) % cardinality);\\n\\n            if (!initialized) (oldestAvailableAge, , , ) = uniswapPool.observations(0);\\n\\n            ago = block.timestamp - oldestAvailableAge;\\n            secondsAgos[0] = uint32(ago);\\n\\n            (success, data) = address(uniswapPool).staticcall(\\n                abi.encodeWithSelector(IUniswapV3PoolOracle.observe.selector, secondsAgos)\\n            );\\n            if (!success) revertBytes(data);\\n        }\\n\\n        int56[] memory tickCumulatives = abi.decode(data, (int56[]));\\n\\n        int24 tick = int24((tickCumulatives[1] - tickCumulatives[0]) / int56(int256(ago)));\\n\\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        return (sqrtPriceX96, ago);\\n    }\\n\\n    function revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n\\n        revert(\\\"e/empty-error\\\");\\n    }\\n\\n    function decodeSqrtPriceX96(bool isMarginZero, uint256 sqrtPriceX96) internal pure returns (uint256 price) {\\n        uint256 scaler = 1e18; //10**ERC20(token0).decimals();\\n\\n        if (isMarginZero) {\\n            price = FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, uint256(2**(96 * 2)) / (scaler));\\n            if (price == 0) return 1e36;\\n            price = 1e36 / price;\\n        } else {\\n            price = (FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, uint256(2**96)) * scaler) / uint256(2**96);\\n        }\\n\\n        if (price > 1e36) price = 1e36;\\n        else if (price == 0) price = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x0911e11ec0fbfb670032e2052666c6da4ff0210b4a8ef7fdabac9ad1be3d304a\",\"license\":\"UNLICENSED\"},\"src/libraries/LPTStateLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary LPTStateLib {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice register new LPT\\n     */\\n    function registerNewLPTState(\\n        DataType.PerpStatus storage _range,\\n        uint256 _tokenId,\\n        int24 _lowerTick,\\n        int24 _upperTick\\n    ) internal {\\n        _range.tokenId = _tokenId;\\n        _range.lowerTick = _lowerTick;\\n        _range.upperTick = _upperTick;\\n        _range.lastTouchedTimestamp = block.timestamp;\\n    }\\n\\n    function getRangeKey(int24 _lower, int24 _upper) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_lower, _upper));\\n    }\\n\\n    function getPerpStatus(DataType.Context memory _context, DataType.PerpStatus storage _perpState)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            getTotalLiquidityAmount(_context, _perpState),\\n            _perpState.borrowedLiquidity,\\n            getPerpUR(_context, _perpState)\\n        );\\n    }\\n\\n    function getPerpUR(DataType.Context memory _context, DataType.PerpStatus storage _perpState)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return PredyMath.mulDiv(_perpState.borrowedLiquidity, 1e18, getTotalLiquidityAmount(_context, _perpState));\\n    }\\n\\n    function getAvailableLiquidityAmount(DataType.Context memory _context, DataType.PerpStatus memory _perpState)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, , , , , , , uint128 liquidity, , , , ) = INonfungiblePositionManager(_context.positionManager).positions(\\n            _perpState.tokenId\\n        );\\n\\n        return liquidity;\\n    }\\n\\n    function getTotalLiquidityAmount(DataType.Context memory _context, DataType.PerpStatus memory _perpState)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return getAvailableLiquidityAmount(_context, _perpState) + _perpState.borrowedLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0x47bc30f95d23dad25e26a59bab70d07770fe3c8987704f32b26a21c68e019fc8\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./LPTMath.sol\\\";\\n\\nlibrary PositionCalculator {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n    // sqrt{1.24} = 1.11355287257\\n    uint160 internal constant UPPER_E8 = 111355287;\\n    // sqrt{1/1.24} = 0.89802651013\\n    uint160 internal constant LOWER_E8 = 89802651;\\n\\n    /**\\n     * @notice Calculates Min. Collateral for a position.\\n     * MinCollateral = 0.01 * DebtValue - minValue + positionValue\\n     * @param _position position object\\n     * @param _sqrtPrice square root price to calculate\\n     * @param _isMarginZero whether the stable token is token0 or token1\\n     */\\n    function calculateMinCollateral(\\n        DataType.Position memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) external pure returns (int256) {\\n        int256 positionValue = calculateValue(_position, _sqrtPrice, _isMarginZero);\\n\\n        int256 minValue = calculateMinValue(_position, _sqrtPrice, _isMarginZero);\\n\\n        (, uint256 debtValue) = calculateCollateralAndDebtValue(_position, _sqrtPrice, _isMarginZero);\\n\\n        return int256(debtValue).div(100).sub(minValue).add(positionValue);\\n    }\\n\\n    /**\\n     * @notice Calculates square root of min price (a * b)^(1/4)\\n     * P_{min}^(1/2) = (a * b)^(1/4)\\n     */\\n    function calculateMinSqrtPrice(int24 _lowerTick, int24 _upperTick) internal pure returns (uint160) {\\n        return uint160(TickMath.getSqrtRatioAtTick((_lowerTick + _upperTick) / 2));\\n    }\\n\\n    /**\\n     * @notice Calculates minValue.\\n     * MinValue is minimal value of following values.\\n     * 1. value of at P*1.24\\n     * 2. value of at P/1.24\\n     * 3. values of at P_{min} of LPTs\\n     */\\n    function calculateMinValue(\\n        DataType.Position memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (int256 minValue) {\\n        minValue = type(int256).max;\\n        uint160 sqrtPriceLower = (LOWER_E8 * _sqrtPrice) / 1e8;\\n        uint160 sqrtPriceUpper = (UPPER_E8 * _sqrtPrice) / 1e8;\\n\\n        require(TickMath.MIN_SQRT_RATIO < _sqrtPrice && _sqrtPrice < TickMath.MAX_SQRT_RATIO, \\\"PC0\\\");\\n\\n        if (sqrtPriceLower < TickMath.MIN_SQRT_RATIO) {\\n            sqrtPriceLower = TickMath.MIN_SQRT_RATIO;\\n        }\\n\\n        if (sqrtPriceUpper > TickMath.MAX_SQRT_RATIO) {\\n            sqrtPriceUpper = TickMath.MAX_SQRT_RATIO;\\n        }\\n\\n        {\\n            // 1. check value of at P*1.24\\n            int256 value = calculateValue(_position, sqrtPriceUpper, _isMarginZero);\\n            if (minValue > value) {\\n                minValue = value;\\n            }\\n        }\\n\\n        {\\n            // 2. check value of at P/1.24\\n            int256 value = calculateValue(_position, sqrtPriceLower, _isMarginZero);\\n            if (minValue > value) {\\n                minValue = value;\\n            }\\n        }\\n\\n        // 3. check values of at P_{min} of LPTs\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n\\n            if (!lpt.isCollateral) {\\n                uint160 sqrtPrice = calculateMinSqrtPrice(lpt.upperTick, lpt.lowerTick);\\n\\n                if (sqrtPrice < sqrtPriceLower || sqrtPriceUpper < sqrtPrice) {\\n                    continue;\\n                }\\n\\n                int256 value = calculateValue(_position, sqrtPrice, _isMarginZero);\\n\\n                if (minValue > value) {\\n                    minValue = value;\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateValue(\\n        DataType.Position memory _position,\\n        uint160 _sqrtPrice,\\n        bool isMarginZero\\n    ) internal pure returns (int256 value) {\\n        (uint256 collateralValue, uint256 debtValue) = calculateCollateralAndDebtValue(\\n            _position,\\n            _sqrtPrice,\\n            isMarginZero\\n        );\\n\\n        return int256(collateralValue) - int256(debtValue);\\n    }\\n\\n    function calculateCollateralAndDebtValue(\\n        DataType.Position memory _position,\\n        uint160 _sqrtPrice,\\n        bool isMarginZero\\n    ) internal pure returns (uint256 collateralValue, uint256 debtValue) {\\n        uint256 collateralAmount0 = _position.collateral0;\\n        uint256 collateralAmount1 = _position.collateral1;\\n        uint256 debtAmount0 = _position.debt0;\\n        uint256 debtAmount1 = _position.debt1;\\n\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n\\n            uint160 sqrtLowerPrice = TickMath.getSqrtRatioAtTick(lpt.lowerTick);\\n            uint160 sqrtUpperPrice = TickMath.getSqrtRatioAtTick(lpt.upperTick);\\n\\n            if (!lpt.isCollateral && sqrtLowerPrice <= _sqrtPrice && _sqrtPrice <= sqrtUpperPrice) {\\n                debtAmount1 = debtAmount1.add(\\n                    (\\n                        uint256(lpt.liquidity).mul(\\n                            TickMath.getSqrtRatioAtTick(lpt.upperTick) - TickMath.getSqrtRatioAtTick(lpt.lowerTick)\\n                        )\\n                    ).div(Q96)\\n                );\\n                continue;\\n            }\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                sqrtLowerPrice,\\n                sqrtUpperPrice,\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                collateralAmount0 = collateralAmount0.add(amount0);\\n                collateralAmount1 = collateralAmount1.add(amount1);\\n            } else {\\n                debtAmount0 = debtAmount0.add(amount0);\\n                debtAmount1 = debtAmount1.add(amount1);\\n            }\\n        }\\n\\n        uint256 price = LPTMath.decodeSqrtPriceX96(isMarginZero, _sqrtPrice);\\n\\n        if (isMarginZero) {\\n            collateralValue = collateralAmount0.add(collateralAmount1.mul(price).div(1e18));\\n            debtValue = debtAmount0.add(debtAmount1.mul(price).div(1e18));\\n        } else {\\n            collateralValue = collateralAmount0.mul(price).div(1e18).add(collateralAmount1);\\n            debtValue = debtAmount0.mul(price).div(1e18).add(debtAmount1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17fca3b4938d4996c9af477c9777b6272679c94388bec0e93bd6c15b06b8bee6\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary PositionLib {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function getPositionUpdatesToOpen(\\n        DataType.Position memory _position,\\n        bool _isQuoteZero,\\n        uint160 _sqrtPrice\\n    ) external pure returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        uint256 swapIndex;\\n\\n        (positionUpdates, swapIndex) = calculatePositionUpdatesToOpen(_position);\\n\\n        (int256 requiredAmount0, int256 requiredAmount1) = getRequiredTokenAmountsToOpen(_position, _sqrtPrice);\\n\\n        if (_isQuoteZero) {\\n            if (requiredAmount1 > 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    true,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(requiredAmount1),\\n                    0\\n                );\\n            } else if (requiredAmount1 < 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(-requiredAmount1),\\n                    0\\n                );\\n            }\\n        } else {\\n            if (requiredAmount0 > 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(requiredAmount0),\\n                    0\\n                );\\n            } else if (requiredAmount0 < 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    true,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(-requiredAmount0),\\n                    0\\n                );\\n            }\\n        }\\n    }\\n\\n    function getPositionUpdatesToClose(\\n        DataType.Position[] memory _positions,\\n        uint256 _swapRatio,\\n        uint160 _sqrtPrice\\n    ) external pure returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        uint256 swapIndex;\\n\\n        (positionUpdates, swapIndex) = calculatePositionUpdatesToClose(_positions);\\n\\n        (int256 requiredAmount0, int256 requiredAmount1) = getRequiredTokenAmountsToClose(_positions, _sqrtPrice);\\n\\n        if (requiredAmount0 < 0) {\\n            positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                0,\\n                true,\\n                0,\\n                0,\\n                0,\\n                (uint256(-requiredAmount0) * _swapRatio) / 100,\\n                0\\n            );\\n        } else if (requiredAmount1 < 0) {\\n            positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                0,\\n                false,\\n                0,\\n                0,\\n                0,\\n                (uint256(-requiredAmount1) * _swapRatio) / 100,\\n                0\\n            );\\n        }\\n    }\\n\\n    function concat(DataType.Position[] memory _positions, DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (DataType.Position memory)\\n    {\\n        DataType.Position[] memory positions = new DataType.Position[](_positions.length + 1);\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            positions[i] = _positions[i];\\n        }\\n\\n        positions[_positions.length] = _position;\\n\\n        return concat(positions);\\n    }\\n\\n    function concat(DataType.Position[] memory _positions) internal pure returns (DataType.Position memory _position) {\\n        uint256 numLPTs;\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            numLPTs += _positions[i].lpts.length;\\n        }\\n\\n        DataType.LPT[] memory lpts = new DataType.LPT[](numLPTs);\\n\\n        _position = DataType.Position(0, 0, 0, 0, 0, lpts);\\n\\n        uint256 k;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            _position.collateral0 += _positions[i].collateral0;\\n            _position.collateral1 += _positions[i].collateral1;\\n            _position.debt0 += _positions[i].debt0;\\n            _position.debt1 += _positions[i].debt1;\\n\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                _position.lpts[k] = _positions[i].lpts[j];\\n                k++;\\n            }\\n        }\\n    }\\n\\n    function emptyPosition() internal pure returns (DataType.Position memory) {\\n        DataType.LPT[] memory lpts = new DataType.LPT[](0);\\n        return DataType.Position(0, 0, 0, 0, 0, lpts);\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to open position.\\n     * @param _destPosition position to open\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmountsToOpen(DataType.Position memory _destPosition, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256, int256)\\n    {\\n        return getRequiredTokenAmounts(emptyPosition(), _destPosition, _sqrtPrice);\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to close position.\\n     * @param _srcPosition position to close\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmountsToClose(DataType.Position memory _srcPosition, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256, int256)\\n    {\\n        return getRequiredTokenAmounts(_srcPosition, emptyPosition(), _sqrtPrice);\\n    }\\n\\n    function getRequiredTokenAmountsToClose(DataType.Position[] memory _srcPositions, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256 requiredAmount0, int256 requiredAmount1)\\n    {\\n        for (uint256 i = 0; i < _srcPositions.length; i++) {\\n            (int256 a0, int256 a1) = getRequiredTokenAmounts(_srcPositions[i], emptyPosition(), _sqrtPrice);\\n            requiredAmount0 += a0;\\n            requiredAmount1 += a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to update position.\\n     * @param _srcPosition position to update\\n     * @param _destPosition desired position\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmounts(\\n        DataType.Position memory _srcPosition,\\n        DataType.Position memory _destPosition,\\n        uint160 _sqrtPrice\\n    ) internal pure returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        requiredAmount0 = requiredAmount0.sub(int256(_srcPosition.collateral0));\\n        requiredAmount1 = requiredAmount1.sub(int256(_srcPosition.collateral1));\\n        requiredAmount0 = requiredAmount0.add(int256(_srcPosition.debt0));\\n        requiredAmount1 = requiredAmount1.add(int256(_srcPosition.debt1));\\n\\n        requiredAmount0 = requiredAmount0.add(int256(_destPosition.collateral0));\\n        requiredAmount1 = requiredAmount1.add(int256(_destPosition.collateral1));\\n        requiredAmount0 = requiredAmount0.sub(int256(_destPosition.debt0));\\n        requiredAmount1 = requiredAmount1.sub(int256(_destPosition.debt1));\\n\\n        for (uint256 i = 0; i < _srcPosition.lpts.length; i++) {\\n            DataType.LPT memory lpt = _srcPosition.lpts[i];\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(lpt.lowerTick),\\n                TickMath.getSqrtRatioAtTick(lpt.upperTick),\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            } else {\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _destPosition.lpts.length; i++) {\\n            DataType.LPT memory lpt = _destPosition.lpts[i];\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(lpt.lowerTick),\\n                TickMath.getSqrtRatioAtTick(lpt.upperTick),\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            } else {\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            }\\n        }\\n    }\\n\\n    function calculateLengthOfPositionUpdates(DataType.Position[] memory _positions)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            length += calculateLengthOfPositionUpdates(_positions[i]);\\n        }\\n    }\\n\\n    function calculateLengthOfPositionUpdates(DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        length = _position.lpts.length;\\n\\n        if (_position.collateral0 > 0 || _position.collateral1 > 0) {\\n            length += 1;\\n        }\\n\\n        if (_position.debt0 > 0 || _position.debt1 > 0) {\\n            length += 1;\\n        }\\n    }\\n\\n    function calculatePositionUpdatesToOpen(DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (DataType.PositionUpdate[] memory positionUpdates, uint256 swapIndex)\\n    {\\n        positionUpdates = new DataType.PositionUpdate[](calculateLengthOfPositionUpdates(_position) + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n            if (!lpt.isCollateral) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.BORROW_LPT,\\n                    _position.subVaultIndex,\\n                    false,\\n                    lpt.liquidity,\\n                    lpt.lowerTick,\\n                    lpt.upperTick,\\n                    0,\\n                    0\\n                );\\n                index++;\\n            }\\n        }\\n\\n        if (_position.collateral0 > 0 || _position.collateral1 > 0) {\\n            positionUpdates[index] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.DEPOSIT_TOKEN,\\n                _position.subVaultIndex,\\n                false,\\n                0,\\n                0,\\n                0,\\n                _position.collateral0,\\n                _position.collateral1\\n            );\\n            index++;\\n        }\\n\\n        if (_position.debt0 > 0 || _position.debt1 > 0) {\\n            positionUpdates[index] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.BORROW_TOKEN,\\n                _position.subVaultIndex,\\n                false,\\n                0,\\n                0,\\n                0,\\n                _position.debt0,\\n                _position.debt1\\n            );\\n            index++;\\n        }\\n\\n        swapIndex = index;\\n        index++;\\n\\n        for (uint256 i; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n            if (lpt.isCollateral) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.DEPOSIT_LPT,\\n                    _position.subVaultIndex,\\n                    false,\\n                    lpt.liquidity,\\n                    lpt.lowerTick,\\n                    lpt.upperTick,\\n                    0,\\n                    0\\n                );\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function calculatePositionUpdatesToClose(DataType.Position[] memory _positions)\\n        internal\\n        pure\\n        returns (DataType.PositionUpdate[] memory positionUpdates, uint256 swapIndex)\\n    {\\n        positionUpdates = new DataType.PositionUpdate[](calculateLengthOfPositionUpdates(_positions) + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                DataType.LPT memory lpt = _positions[i].lpts[j];\\n                if (lpt.isCollateral) {\\n                    positionUpdates[index] = DataType.PositionUpdate(\\n                        DataType.PositionUpdateType.WITHDRAW_LPT,\\n                        _positions[i].subVaultIndex,\\n                        false,\\n                        lpt.liquidity,\\n                        lpt.lowerTick,\\n                        lpt.upperTick,\\n                        0,\\n                        0\\n                    );\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        swapIndex = index;\\n        index++;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                DataType.LPT memory lpt = _positions[i].lpts[j];\\n                if (!lpt.isCollateral) {\\n                    positionUpdates[index] = DataType.PositionUpdate(\\n                        DataType.PositionUpdateType.REPAY_LPT,\\n                        _positions[i].subVaultIndex,\\n                        false,\\n                        lpt.liquidity,\\n                        lpt.lowerTick,\\n                        lpt.upperTick,\\n                        0,\\n                        0\\n                    );\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            if (_positions[i].collateral0 > 0 || _positions[i].collateral1 > 0) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.WITHDRAW_TOKEN,\\n                    _positions[i].subVaultIndex,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    _positions[i].collateral0,\\n                    _positions[i].collateral1\\n                );\\n                index++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            if (_positions[i].debt0 > 0 || _positions[i].debt1 > 0) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.REPAY_TOKEN,\\n                    _positions[i].subVaultIndex,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    _positions[i].debt0,\\n                    _positions[i].debt1\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd0288afdcae2604ce40f0851c741f047f8a49abf50fb7fbe211216d67ad9e383\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./VaultLib.sol\\\";\\nimport \\\"./LPTStateLib.sol\\\";\\nimport \\\"./UniHelper.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/*\\n * Error Codes\\n * PU1: reduce only\\n * PU2: L must be lower\\n * PU3: L must be greater\\n */\\nlibrary PositionUpdater {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n    using SafeCast for uint128;\\n    using BaseToken for BaseToken.TokenState;\\n    using VaultLib for DataType.Vault;\\n    using VaultLib for DataType.SubVault;\\n    using LPTStateLib for DataType.PerpStatus;\\n\\n    event TokenDeposited(uint256 indexed vaultId, uint256 subVaultIndex, uint256 amount0, uint256 amount1);\\n    event TokenWithdrawn(uint256 indexed vaultId, uint256 subVaultIndex, uint256 amount0, uint256 amount1);\\n    event TokenBorrowed(uint256 indexed vaultId, uint256 subVaultIndex, uint256 amount0, uint256 amount1);\\n    event TokenRepaid(uint256 indexed vaultId, uint256 subVaultIndex, uint256 amount0, uint256 amount1);\\n    event LPTDeposited(uint256 indexed vaultId, uint256 subVaultIndex, bytes32 rangeId, uint128 liquidity);\\n    event LPTWithdrawn(uint256 indexed vaultId, uint256 subVaultIndex, bytes32 rangeId, uint128 liquidity);\\n    event LPTBorrowed(uint256 indexed vaultId, uint256 subVaultIndex, bytes32 rangeId, uint128 liquidity);\\n    event LPTRepaid(uint256 indexed vaultId, uint256 subVaultIndex, bytes32 rangeId, uint128 liquidity);\\n    event TokenSwap(uint256 indexed vaultId, bool zeroForOne, uint256 srcAmount, uint256 destAmount);\\n    event MarginUpdated(uint256 indexed vaultId, int256 marginAmount0, int256 marginAmount1);\\n\\n    event FeeCollected(uint256 indexed vaultId, int256 feeAmount0, int256 feeAmount1);\\n\\n    /**\\n     * @notice update position and return required token amounts.\\n     */\\n    function updatePosition(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context storage _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate[] memory _positionUpdates,\\n        DataType.TradeOption memory _tradeOption\\n    ) external returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        (requiredAmount0, requiredAmount1) = updateFeeEntry(_vault, _subVaults, _ranges, _context);\\n\\n        for (uint256 i = 0; i < _positionUpdates.length; i++) {\\n            DataType.PositionUpdate memory positionUpdate = _positionUpdates[i];\\n\\n            console.log(uint256(positionUpdate.positionUpdateType));\\n\\n            // create new sub-vault if needed\\n            DataType.SubVault storage subVault = _vault.addSubVault(_subVaults, _context, positionUpdate.subVaultIndex);\\n\\n            if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.DEPOSIT_TOKEN) {\\n                require(!_tradeOption.reduceOnly, \\\"PU1\\\");\\n                depositTokens(_vault, subVault, _context, positionUpdate.param0, positionUpdate.param1);\\n\\n                requiredAmount0 = requiredAmount0.add(int256(positionUpdate.param0));\\n                requiredAmount1 = requiredAmount1.add(int256(positionUpdate.param1));\\n\\n                emit TokenDeposited(\\n                    _vault.vaultId,\\n                    positionUpdate.subVaultIndex,\\n                    positionUpdate.param0,\\n                    positionUpdate.param1\\n                );\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.WITHDRAW_TOKEN) {\\n                (uint256 amount0, uint256 amount1) = withdrawTokens(\\n                    _vault,\\n                    subVault,\\n                    _context,\\n                    positionUpdate.param0,\\n                    positionUpdate.param1\\n                );\\n\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n\\n                emit TokenWithdrawn(_vault.vaultId, positionUpdate.subVaultIndex, amount0, amount1);\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.BORROW_TOKEN) {\\n                require(!_tradeOption.reduceOnly, \\\"PU1\\\");\\n                borrowTokens(_vault, subVault, _context, positionUpdate.param0, positionUpdate.param1);\\n\\n                requiredAmount0 = requiredAmount0.sub(int256(positionUpdate.param0));\\n                requiredAmount1 = requiredAmount1.sub(int256(positionUpdate.param1));\\n\\n                emit TokenBorrowed(\\n                    _vault.vaultId,\\n                    positionUpdate.subVaultIndex,\\n                    positionUpdate.param0,\\n                    positionUpdate.param1\\n                );\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.REPAY_TOKEN) {\\n                (uint256 amount0, uint256 amount1) = repayTokens(\\n                    _vault,\\n                    subVault,\\n                    _context,\\n                    positionUpdate.param0,\\n                    positionUpdate.param1\\n                );\\n\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n\\n                emit TokenRepaid(_vault.vaultId, positionUpdate.subVaultIndex, amount0, amount1);\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.DEPOSIT_LPT) {\\n                require(!_tradeOption.reduceOnly, \\\"PU1\\\");\\n                (uint256 amount0, uint256 amount1) = depositLPT(\\n                    _vault.vaultId,\\n                    subVault,\\n                    _context,\\n                    _ranges,\\n                    positionUpdate\\n                );\\n\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.WITHDRAW_LPT) {\\n                (uint256 amount0, uint256 amount1) = withdrawLPT(_vault, subVault, _context, _ranges, positionUpdate);\\n\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.BORROW_LPT) {\\n                require(!_tradeOption.reduceOnly, \\\"PU1\\\");\\n                (uint256 amount0, uint256 amount1) = borrowLPT(\\n                    _vault.vaultId,\\n                    subVault,\\n                    _context,\\n                    _ranges,\\n                    positionUpdate\\n                );\\n\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.REPAY_LPT) {\\n                (uint256 amount0, uint256 amount1) = repayLPT(\\n                    _vault.vaultId,\\n                    subVault,\\n                    _context,\\n                    _ranges,\\n                    positionUpdate\\n                );\\n\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_IN) {\\n                (int256 amount0, int256 amount1) = swapExactIn(_vault, _context, positionUpdate);\\n\\n                requiredAmount0 = requiredAmount0.add(amount0);\\n                requiredAmount1 = requiredAmount1.add(amount1);\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_OUT) {\\n                (int256 amount0, int256 amount1) = swapExactOut(_vault, _context, positionUpdate);\\n\\n                requiredAmount0 = requiredAmount0.add(amount0);\\n                requiredAmount1 = requiredAmount1.add(amount1);\\n            }\\n        }\\n\\n        if (_tradeOption.swapAnyway) {\\n            DataType.PositionUpdate memory positionUpdate = swapAnyway(\\n                requiredAmount0,\\n                requiredAmount1,\\n                _tradeOption.isQuoteZero\\n            );\\n            int256 amount0;\\n            int256 amount1;\\n\\n            if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_IN) {\\n                (amount0, amount1) = swapExactIn(_vault, _context, positionUpdate);\\n            } else if (positionUpdate.positionUpdateType == DataType.PositionUpdateType.SWAP_EXACT_OUT) {\\n                (amount0, amount1) = swapExactOut(_vault, _context, positionUpdate);\\n            }\\n\\n            requiredAmount0 = requiredAmount0.add(amount0);\\n            requiredAmount1 = requiredAmount1.add(amount1);\\n        }\\n\\n        {\\n            // Deposits or withdraw margin\\n            // targetMarginAmount0 and targetMarginAmount1 determine the margin target.\\n            // -1 means that the margin is no changed.\\n            int256 deltaMarginAmount0;\\n            int256 deltaMarginAmount1;\\n\\n            if (_tradeOption.targetMarginAmount0 >= 0) {\\n                // update margin amount of token0 to target margin amount\\n                deltaMarginAmount0 = _tradeOption.targetMarginAmount0.sub(int256(_vault.marginAmount0));\\n\\n                _vault.marginAmount0 = _tradeOption.targetMarginAmount0;\\n\\n                requiredAmount0 = requiredAmount0.add(deltaMarginAmount0);\\n            } else if (_tradeOption.targetMarginAmount0 == -2) {\\n                // use margin of token0 to make required amount 0\\n                deltaMarginAmount0 = requiredAmount0.mul(-1);\\n\\n                _vault.marginAmount0 = _vault.marginAmount0.add(deltaMarginAmount0);\\n\\n                requiredAmount0 = 0;\\n            }\\n\\n            if (_tradeOption.targetMarginAmount1 >= 0) {\\n                // update margin amount of token1 to target margin amount\\n                deltaMarginAmount1 = _tradeOption.targetMarginAmount1.sub(int256(_vault.marginAmount1));\\n\\n                _vault.marginAmount1 = _tradeOption.targetMarginAmount1;\\n\\n                requiredAmount1 = requiredAmount1.add(deltaMarginAmount1);\\n            } else if (_tradeOption.targetMarginAmount1 == -2) {\\n                // use margin of token1 to make required amount 0\\n                deltaMarginAmount1 = requiredAmount1.mul(-1);\\n\\n                _vault.marginAmount1 = _vault.marginAmount1.add(deltaMarginAmount1);\\n\\n                requiredAmount1 = 0;\\n            }\\n\\n            // emit event if needed\\n            if (deltaMarginAmount0 != 0 || deltaMarginAmount1 != 0) {\\n                emit MarginUpdated(_vault.vaultId, deltaMarginAmount0, deltaMarginAmount1);\\n            }\\n        }\\n\\n        // remove empty sub-vaults\\n        if (_vault.subVaults.length > 0) {\\n            uint256 length = _vault.subVaults.length;\\n            for (uint256 i = 0; i < length; i++) {\\n                uint256 index = length - i - 1;\\n                DataType.SubVault memory subVault = _subVaults[_vault.subVaults[index]];\\n\\n                if (\\n                    subVault.collateralAmount0 == 0 &&\\n                    subVault.debtAmount0 == 0 &&\\n                    subVault.collateralAmount1 == 0 &&\\n                    subVault.debtAmount1 == 0 &&\\n                    subVault.lpts.length == 0\\n                ) {\\n                    _vault.removeSubVault(index);\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function swapAnyway(\\n        int256 requiredAmount0,\\n        int256 requiredAmount1,\\n        bool _isQuoteZero\\n    ) internal pure returns (DataType.PositionUpdate memory) {\\n        bool zeroForOne;\\n        bool isExactIn;\\n        uint256 amountIn;\\n        uint256 amountOut;\\n\\n        if (_isQuoteZero) {\\n            if (requiredAmount1 > 0) {\\n                zeroForOne = true;\\n                isExactIn = false;\\n                amountOut = uint256(requiredAmount1);\\n            } else if (requiredAmount1 < 0) {\\n                zeroForOne = false;\\n                isExactIn = true;\\n                amountIn = uint256(-requiredAmount1);\\n            }\\n        } else {\\n            if (requiredAmount0 > 0) {\\n                zeroForOne = false;\\n                isExactIn = false;\\n                amountOut = uint256(requiredAmount0);\\n            } else if (requiredAmount0 < 0) {\\n                zeroForOne = true;\\n                isExactIn = true;\\n                amountIn = uint256(-requiredAmount0);\\n            }\\n        }\\n\\n        if (isExactIn && amountIn > 0) {\\n            return\\n                DataType.PositionUpdate(DataType.PositionUpdateType.SWAP_EXACT_IN, 0, zeroForOne, 0, 0, 0, amountIn, 0);\\n        } else if (!isExactIn && amountOut > 0) {\\n            return\\n                DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    zeroForOne,\\n                    0,\\n                    0,\\n                    0,\\n                    amountOut,\\n                    0\\n                );\\n        } else {\\n            return DataType.PositionUpdate(DataType.PositionUpdateType.NOOP, 0, false, 0, 0, 0, 0, 0);\\n        }\\n    }\\n\\n    function depositTokens(\\n        DataType.Vault storage _vault,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal {\\n        _subVault.collateralAmount0 = _subVault.collateralAmount0.add(amount0);\\n        _subVault.collateralAmount1 = _subVault.collateralAmount1.add(amount1);\\n\\n        _context.tokenState0.addCollateral(_vault.balance0, amount0);\\n        _context.tokenState1.addCollateral(_vault.balance1, amount1);\\n    }\\n\\n    function withdrawTokens(\\n        DataType.Vault storage _vault,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal returns (uint256 withdrawAmount0, uint256 withdrawAmount1) {\\n        _subVault.collateralAmount0 = _subVault.collateralAmount0.sub(amount0);\\n        _subVault.collateralAmount1 = _subVault.collateralAmount1.sub(amount1);\\n\\n        withdrawAmount0 = _context.tokenState0.removeCollateral(_vault.balance0, amount0);\\n        withdrawAmount1 = _context.tokenState1.removeCollateral(_vault.balance1, amount1);\\n    }\\n\\n    function borrowTokens(\\n        DataType.Vault storage _vault,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal {\\n        _subVault.debtAmount0 = _subVault.debtAmount0.add(amount0);\\n        _subVault.debtAmount1 = _subVault.debtAmount1.add(amount1);\\n\\n        _context.tokenState0.addDebt(_vault.balance0, amount0);\\n        _context.tokenState1.addDebt(_vault.balance1, amount1);\\n    }\\n\\n    function repayTokens(\\n        DataType.Vault storage _vault,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context storage _context,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        _subVault.debtAmount0 = _subVault.debtAmount0.sub(amount0);\\n        _subVault.debtAmount1 = _subVault.debtAmount1.sub(amount1);\\n\\n        requiredAmount0 = _context.tokenState0.removeDebt(_vault.balance0, amount0);\\n        requiredAmount1 = _context.tokenState1.removeDebt(_vault.balance1, amount1);\\n    }\\n\\n    function depositLPT(\\n        uint256 _vaultId,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        (uint256 amount0, uint256 amount1) = LPTMath.getAmountsForLiquidity(\\n            getSqrtPrice(IUniswapV3Pool(_context.uniswapPool)),\\n            _positionUpdate.lowerTick,\\n            _positionUpdate.upperTick,\\n            _positionUpdate.liquidity\\n        );\\n\\n        // liquidity amount actually deposited\\n        uint128 finalLiquidityAmount;\\n\\n        if (_ranges[rangeId].tokenId > 0) {\\n            (, finalLiquidityAmount, requiredAmount0, requiredAmount1) = UniHelper.increaseLiquidity(\\n                _context,\\n                _ranges[rangeId].tokenId,\\n                amount0,\\n                amount1,\\n                _positionUpdate.param0,\\n                _positionUpdate.param1\\n            );\\n        } else {\\n            uint256 tokenId = 0;\\n\\n            (tokenId, finalLiquidityAmount, requiredAmount0, requiredAmount1) = UniHelper.mint(\\n                _context,\\n                _positionUpdate.lowerTick,\\n                _positionUpdate.upperTick,\\n                amount0,\\n                amount1,\\n                _positionUpdate.param0,\\n                _positionUpdate.param1\\n            );\\n\\n            _ranges[rangeId].registerNewLPTState(tokenId, _positionUpdate.lowerTick, _positionUpdate.upperTick);\\n        }\\n\\n        require(finalLiquidityAmount <= _positionUpdate.liquidity, \\\"PU3\\\");\\n\\n        _subVault.depositLPT(_ranges, rangeId, finalLiquidityAmount);\\n\\n        emit LPTDeposited(_vaultId, _positionUpdate.subVaultIndex, rangeId, finalLiquidityAmount);\\n    }\\n\\n    function withdrawLPT(\\n        DataType.Vault storage _vault,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 withdrawAmount0, uint256 withdrawAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        (withdrawAmount0, withdrawAmount1) = decreaseLiquidityFromUni(\\n            _context,\\n            _ranges[rangeId],\\n            _positionUpdate.liquidity,\\n            _positionUpdate.param0,\\n            _positionUpdate.param1\\n        );\\n\\n        _subVault.withdrawLPT(rangeId, _positionUpdate.liquidity);\\n\\n        emit LPTWithdrawn(_vault.vaultId, _positionUpdate.subVaultIndex, rangeId, _positionUpdate.liquidity);\\n    }\\n\\n    function borrowLPT(\\n        uint256 _vaultId,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        (requiredAmount0, requiredAmount1) = decreaseLiquidityFromUni(\\n            _context,\\n            _ranges[rangeId],\\n            _positionUpdate.liquidity,\\n            _positionUpdate.param0,\\n            _positionUpdate.param1\\n        );\\n\\n        _ranges[rangeId].borrowedLiquidity += _positionUpdate.liquidity;\\n\\n        _subVault.borrowLPT(_ranges, rangeId, _positionUpdate.liquidity);\\n\\n        emit LPTBorrowed(_vaultId, _positionUpdate.subVaultIndex, rangeId, _positionUpdate.liquidity);\\n    }\\n\\n    function repayLPT(\\n        uint256 _vaultId,\\n        DataType.SubVault storage _subVault,\\n        DataType.Context memory _context,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (uint256 requiredAmount0, uint256 requiredAmount1) {\\n        bytes32 rangeId = LPTStateLib.getRangeKey(_positionUpdate.lowerTick, _positionUpdate.upperTick);\\n\\n        {\\n            (uint256 amount0, uint256 amount1) = LPTMath.getAmountsForLiquidityRoundUp(\\n                getSqrtPrice(IUniswapV3Pool(_context.uniswapPool)),\\n                _positionUpdate.lowerTick,\\n                _positionUpdate.upperTick,\\n                _positionUpdate.liquidity\\n            );\\n\\n            // liquidity amount actually deposited\\n            uint128 finalLiquidityAmount;\\n\\n            (, finalLiquidityAmount, requiredAmount0, requiredAmount1) = UniHelper.increaseLiquidity(\\n                _context,\\n                _ranges[rangeId].tokenId,\\n                amount0,\\n                amount1,\\n                _positionUpdate.param0,\\n                _positionUpdate.param1\\n            );\\n\\n            require(finalLiquidityAmount >= _positionUpdate.liquidity, \\\"PU2\\\");\\n        }\\n\\n        _ranges[rangeId].borrowedLiquidity = _ranges[rangeId]\\n            .borrowedLiquidity\\n            .toUint256()\\n            .sub(_positionUpdate.liquidity)\\n            .toUint128();\\n\\n        _subVault.repayLPT(rangeId, _positionUpdate.liquidity);\\n\\n        emit LPTRepaid(_vaultId, _positionUpdate.subVaultIndex, rangeId, _positionUpdate.liquidity);\\n    }\\n\\n    function swapExactIn(\\n        DataType.Vault storage _vault,\\n        DataType.Context memory _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: _positionUpdate.zeroForOne ? _context.token0 : _context.token1,\\n            tokenOut: _positionUpdate.zeroForOne ? _context.token1 : _context.token0,\\n            fee: _context.feeTier,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountIn: _positionUpdate.param0,\\n            amountOutMinimum: 0,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        try ISwapRouter(_context.swapRouter).exactInputSingle(params) returns (uint256 amountOut) {\\n            emit TokenSwap(_vault.vaultId, _positionUpdate.zeroForOne, _positionUpdate.param0, amountOut);\\n\\n            if (_positionUpdate.zeroForOne) {\\n                return (int256(_positionUpdate.param0), -int256(amountOut));\\n            } else {\\n                return (-int256(amountOut), int256(_positionUpdate.param0));\\n            }\\n        } catch (bytes memory reason) {\\n            if (keccak256(reason) == keccak256(abi.encodeWithSignature(\\\"Error(string)\\\", \\\"AS\\\"))) {\\n                return (0, 0);\\n            } else {\\n                revert(string(reason));\\n            }\\n        }\\n    }\\n\\n    function swapExactOut(\\n        DataType.Vault storage _vault,\\n        DataType.Context memory _context,\\n        DataType.PositionUpdate memory _positionUpdate\\n    ) internal returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter.ExactOutputSingleParams({\\n            tokenIn: _positionUpdate.zeroForOne ? _context.token0 : _context.token1,\\n            tokenOut: _positionUpdate.zeroForOne ? _context.token1 : _context.token0,\\n            fee: _context.feeTier,\\n            recipient: address(this),\\n            deadline: block.timestamp,\\n            amountOut: _positionUpdate.param0,\\n            amountInMaximum: type(uint256).max,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        try ISwapRouter(_context.swapRouter).exactOutputSingle(params) returns (uint256 amountIn) {\\n            emit TokenSwap(_vault.vaultId, _positionUpdate.zeroForOne, amountIn, _positionUpdate.param0);\\n\\n            if (_positionUpdate.zeroForOne) {\\n                return (int256(amountIn), -int256(_positionUpdate.param0));\\n            } else {\\n                return (-int256(_positionUpdate.param0), int256(amountIn));\\n            }\\n        } catch (bytes memory reason) {\\n            if (keccak256(reason) == keccak256(abi.encodeWithSignature(\\\"Error(string)\\\", \\\"AS\\\"))) {\\n                return (0, 0);\\n            } else {\\n                revert(string(reason));\\n            }\\n        }\\n    }\\n\\n    function getSqrtPrice(IUniswapV3Pool _uniswapPool) public view returns (uint160 sqrtPriceX96) {\\n        (sqrtPriceX96, , , , , , ) = _uniswapPool.slot0();\\n    }\\n\\n    /**\\n     * @notice Collects trade fee and premium.\\n     */\\n    function updateFeeGrowth(\\n        DataType.Context memory _context,\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) external {\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault memory subVault = _subVaults[_vault.subVaults[i]];\\n\\n            for (uint256 j = 0; j < subVault.lpts.length; j++) {\\n                collectTradeFeeFromUni(_context, _ranges[subVault.lpts[j].rangeId]);\\n            }\\n        }\\n    }\\n\\n    function updateFeeEntry(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context storage _context\\n    ) internal returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        (int256 fee0, int256 fee1) = VaultLib.getPremiumAndFee(_vault, _subVaults, _ranges, _context);\\n        requiredAmount0 = -fee0;\\n        requiredAmount1 = -fee1;\\n\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault storage subVault = _subVaults[_vault.subVaults[i]];\\n\\n            for (uint256 j = 0; j < subVault.lpts.length; j++) {\\n                DataType.LPTState storage lpt = subVault.lpts[j];\\n\\n                if (lpt.isCollateral) {\\n                    lpt.premiumGrowthLast = _ranges[lpt.rangeId].premiumGrowthForLender;\\n                } else {\\n                    lpt.premiumGrowthLast = _ranges[lpt.rangeId].premiumGrowthForBorrower;\\n                }\\n\\n                lpt.fee0Last = _ranges[lpt.rangeId].fee0Growth;\\n                lpt.fee1Last = _ranges[lpt.rangeId].fee1Growth;\\n            }\\n        }\\n    }\\n\\n    function decreaseLiquidityFromUni(\\n        DataType.Context memory _context,\\n        DataType.PerpStatus storage _range,\\n        uint128 _liquidity,\\n        uint256 _amount0Min,\\n        uint256 _amount1Min\\n    ) internal returns (uint256 amount0, uint256 amount1) {\\n        INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager\\n            .DecreaseLiquidityParams(_range.tokenId, _liquidity, _amount0Min, _amount1Min, block.timestamp);\\n\\n        (amount0, amount1) = INonfungiblePositionManager(_context.positionManager).decreaseLiquidity(params);\\n\\n        collectTokenAmountsFromUni(_context, _range, amount0.toUint128(), amount1.toUint128());\\n    }\\n\\n    function collectTokenAmountsFromUni(\\n        DataType.Context memory _context,\\n        DataType.PerpStatus storage _range,\\n        uint128 _amount0,\\n        uint128 _amount1\\n    ) internal {\\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams(\\n            _range.tokenId,\\n            address(this),\\n            _amount0,\\n            _amount1\\n        );\\n\\n        (uint256 a0, uint256 a1) = INonfungiblePositionManager(_context.positionManager).collect(params);\\n\\n        require(_amount0 == a0 && _amount1 == a1);\\n    }\\n\\n    function collectTradeFeeFromUni(DataType.Context memory _context, DataType.PerpStatus storage _range) internal {\\n        uint256 liquidityAmount = getTotalLiquidityAmount(\\n            INonfungiblePositionManager(_context.positionManager),\\n            _range.tokenId\\n        );\\n\\n        INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager.CollectParams(\\n            _range.tokenId,\\n            address(this),\\n            type(uint128).max,\\n            type(uint128).max\\n        );\\n\\n        (uint256 a0, uint256 a1) = INonfungiblePositionManager(_context.positionManager).collect(params);\\n\\n        // Update cumulative trade fee\\n        _range.fee0Growth += (a0 * Constants.ONE) / liquidityAmount;\\n        _range.fee1Growth += (a1 * Constants.ONE) / liquidityAmount;\\n    }\\n\\n    function getTotalLiquidityAmount(INonfungiblePositionManager _positionManager, uint256 _tokenId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, , , , , , , uint128 liquidity, , , , ) = _positionManager.positions(_tokenId);\\n\\n        return liquidity;\\n    }\\n}\\n\",\"keccak256\":\"0xb3ecab49a02b6f8fd3700edb8fec0fa29b382f2c2558ad8c0b3aed86120782bc\",\"license\":\"UNLICENSED\"},\"src/libraries/PredyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\n\\nlibrary PredyMath {\\n    using SafeMath for uint256;\\n\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        return a.mul(b).div(denominator);\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function subReward(int256 a, uint256 b) internal pure returns (int256, uint256) {\\n        if (a >= int256(b)) {\\n            return (a - int256(b), b);\\n        } else {\\n            if (a > 0) {\\n                return (0, uint256(a));\\n            } else {\\n                return (0, 0);\\n            }\\n        }\\n    }\\n\\n    function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        if (y < 0) {\\n            require((z = x - uint256(-y)) < x, \\\"LS\\\");\\n        } else {\\n            require((z = x + uint256(y)) >= x, \\\"LA\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x59358bd47f372b537337da69d63ba2935bf9278ad18370142bd99e0500803646\",\"license\":\"MIT\"},\"src/libraries/UniHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary UniHelper {\\n    function increaseLiquidity(\\n        DataType.Context memory _context,\\n        uint256 _tokenId,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _amountMax0,\\n        uint256 _amountMax1\\n    )\\n        internal\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        INonfungiblePositionManager.IncreaseLiquidityParams memory params = INonfungiblePositionManager\\n            .IncreaseLiquidityParams(_tokenId, _amount0, _amount1, _amountMax0, _amountMax1, block.timestamp);\\n\\n        (liquidity, amount0, amount1) = INonfungiblePositionManager(_context.positionManager).increaseLiquidity(params);\\n\\n        tokenId = _tokenId;\\n    }\\n\\n    function mint(\\n        DataType.Context memory _context,\\n        int24 _lowerTick,\\n        int24 _upperTick,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _amountMax0,\\n        uint256 _amountMax1\\n    )\\n        internal\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        )\\n    {\\n        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams(\\n            _context.token0,\\n            _context.token1,\\n            _context.feeTier,\\n            _lowerTick,\\n            _upperTick,\\n            _amount0,\\n            _amount1,\\n            _amountMax0,\\n            _amountMax1,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        return INonfungiblePositionManager(_context.positionManager).mint(params);\\n    }\\n}\\n\",\"keccak256\":\"0xfe95efa001a763691fd5c846a5188fde99dee8891e372591b1b3efa3774c314c\",\"license\":\"UNLICENSED\"},\"src/libraries/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/SafeCast.sol\\\";\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./LPTMath.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./DataType.sol\\\";\\nimport \\\"./PositionCalculator.sol\\\";\\nimport \\\"./PositionLib.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/**\\n * Error Codes\\n * V0: no permission\\n */\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n    using SafeMath for uint128;\\n    using SignedSafeMath for int256;\\n    using SafeCast for uint256;\\n    using BaseToken for BaseToken.TokenState;\\n\\n    event SubVaultCreated(uint256 indexed vaultId, uint256 subVaultIndex, uint256 subVaultId);\\n    event SubVaultRemoved(uint256 indexed vaultId, uint256 subVaultIndex, uint256 subVaultId);\\n\\n    /**\\n     * @notice add sub-vault to the vault\\n     * @param _vault vault object\\n     * @param _subVaults sub-vaults map\\n     * @param _context context object\\n     * @param _subVaultIndex index of sub-vault in the vault to add\\n     */\\n    function addSubVault(\\n        DataType.Vault storage _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        DataType.Context storage _context,\\n        uint256 _subVaultIndex\\n    ) internal returns (DataType.SubVault storage) {\\n        if (_subVaultIndex == _vault.subVaults.length) {\\n            uint256 subVaultId = _context.nextSubVaultId;\\n\\n            _context.nextSubVaultId += 1;\\n\\n            _vault.subVaults.push(subVaultId);\\n\\n            emit SubVaultCreated(_vault.vaultId, _subVaultIndex, subVaultId);\\n\\n            return _subVaults[subVaultId];\\n        } else if (_subVaultIndex < _vault.subVaults.length) {\\n            uint256 subVaultId = _vault.subVaults[_subVaultIndex];\\n\\n            return _subVaults[subVaultId];\\n        } else {\\n            revert(\\\"V0\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice remove sub-vault from the vault\\n     * @param _vault vault object\\n     * @param _subVaultIndex index of sub-vault in the vault to remove\\n     */\\n    function removeSubVault(DataType.Vault storage _vault, uint256 _subVaultIndex) internal {\\n        uint256 subVaultId = _vault.subVaults[_subVaultIndex];\\n\\n        _vault.subVaults[_subVaultIndex] = _vault.subVaults[_vault.subVaults.length - 1];\\n        _vault.subVaults.pop();\\n\\n        emit SubVaultRemoved(_vault.vaultId, _subVaultIndex, subVaultId);\\n    }\\n\\n    function depositLPT(\\n        DataType.SubVault storage _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            if (_subVault.lpts[i].rangeId == _rangeId && _subVault.lpts[i].isCollateral) {\\n                _subVault.lpts[i].liquidityAmount = _subVault.lpts[i].liquidityAmount.add(_liquidityAmount).toUint128();\\n\\n                return;\\n            }\\n        }\\n\\n        _subVault.lpts.push(\\n            DataType.LPTState(\\n                true,\\n                _rangeId,\\n                _liquidityAmount,\\n                ranges[_rangeId].premiumGrowthForLender,\\n                ranges[_rangeId].fee0Growth,\\n                ranges[_rangeId].fee1Growth\\n            )\\n        );\\n    }\\n\\n    function withdrawLPT(\\n        DataType.SubVault storage _subVault,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            if (_subVault.lpts[i].rangeId == _rangeId && _subVault.lpts[i].isCollateral) {\\n                _subVault.lpts[i].liquidityAmount = _subVault.lpts[i].liquidityAmount.sub(_liquidityAmount).toUint128();\\n\\n                if (_subVault.lpts[i].liquidityAmount == 0) {\\n                    _subVault.lpts[i] = _subVault.lpts[_subVault.lpts.length - 1];\\n                    _subVault.lpts.pop();\\n                }\\n\\n                return;\\n            }\\n        }\\n    }\\n\\n    function borrowLPT(\\n        DataType.SubVault storage _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            if (_subVault.lpts[i].rangeId == _rangeId && !_subVault.lpts[i].isCollateral) {\\n                _subVault.lpts[i].liquidityAmount = _subVault.lpts[i].liquidityAmount.add(_liquidityAmount).toUint128();\\n                return;\\n            }\\n        }\\n\\n        _subVault.lpts.push(\\n            DataType.LPTState(false, _rangeId, _liquidityAmount, ranges[_rangeId].premiumGrowthForBorrower, 0, 0)\\n        );\\n    }\\n\\n    function repayLPT(\\n        DataType.SubVault storage _subVault,\\n        bytes32 _rangeId,\\n        uint128 _liquidityAmount\\n    ) internal {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            if (_subVault.lpts[i].rangeId == _rangeId && !_subVault.lpts[i].isCollateral) {\\n                _subVault.lpts[i].liquidityAmount = _subVault.lpts[i].liquidityAmount.sub(_liquidityAmount).toUint128();\\n\\n                if (_subVault.lpts[i].liquidityAmount == 0) {\\n                    _subVault.lpts[i] = _subVault.lpts[_subVault.lpts.length - 1];\\n                    _subVault.lpts.pop();\\n                }\\n\\n                return;\\n            }\\n        }\\n    }\\n\\n    function updateEntryPrice(\\n        uint256 _entryPrice,\\n        uint256 _position,\\n        uint256 _tradePrice,\\n        uint256 _positionTrade\\n    ) internal pure returns (uint256 newEntryPrice) {\\n        newEntryPrice = (_entryPrice.mul(_position).add(_tradePrice.mul(_positionTrade))).div(\\n            _position.add(_positionTrade)\\n        );\\n    }\\n\\n    function calculateProfit(\\n        uint256 _entryPrice,\\n        uint256 _tradePrice,\\n        uint256 _positionTrade,\\n        uint256 _denominator\\n    ) internal pure returns (uint256 profit) {\\n        return _tradePrice.sub(_entryPrice).mul(_positionTrade).div(_denominator);\\n    }\\n\\n    function getVaultStatus(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) external view returns (DataType.VaultStatus memory) {\\n        DataType.SubVaultStatus[] memory subVaultsStatus = new DataType.SubVaultStatus[](_vault.subVaults.length);\\n\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.VaultStatusAmount memory statusAmount = getVaultStatusAmount(\\n                _subVaults[_vault.subVaults[i]],\\n                _ranges,\\n                _sqrtPrice\\n            );\\n            DataType.VaultStatusValue memory statusValue = getVaultStatusValue(\\n                statusAmount,\\n                _sqrtPrice,\\n                _context.isMarginZero\\n            );\\n\\n            subVaultsStatus[i] = DataType.SubVaultStatus(statusValue, statusAmount);\\n        }\\n\\n        return\\n            DataType.VaultStatus(\\n                getPositionValue(VaultLib.getPosition(_vault, _subVaults, _ranges), _sqrtPrice, _context.isMarginZero),\\n                getMarginValue(_vault, _subVaults, _ranges, _context, _sqrtPrice),\\n                PositionCalculator.calculateMinCollateral(\\n                    PositionLib.concat(getPositions(_vault, _subVaults, _ranges)),\\n                    _sqrtPrice,\\n                    _context.isMarginZero\\n                ),\\n                subVaultsStatus\\n            );\\n    }\\n\\n    function getMarginValue(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) internal view returns (int256) {\\n        uint256 price = LPTMath.decodeSqrtPriceX96(_context.isMarginZero, _sqrtPrice);\\n\\n        (int256 fee0, int256 fee1) = getPremiumAndFee(_vault, _subVaults, _ranges, _context);\\n\\n        int256 marginAmount0 = _vault.marginAmount0 + fee0;\\n        int256 marginAmount1 = _vault.marginAmount1 + fee1;\\n\\n        if (_context.isMarginZero) {\\n            return marginAmount0.add(calculateUnderlyingValue(marginAmount1, price));\\n        } else {\\n            return marginAmount1.add(calculateUnderlyingValue(marginAmount0, price));\\n        }\\n    }\\n\\n    function getPositionValue(\\n        DataType.Position memory _position,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (int256) {\\n        return PositionCalculator.calculateValue(_position, _sqrtPrice, _isMarginZero);\\n    }\\n\\n    function getVaultValue(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        DataType.Position memory _position,\\n        uint160 _sqrtPrice\\n    ) internal view returns (int256) {\\n        return\\n            getMarginValue(_vault, _subVaults, _ranges, _context, _sqrtPrice) +\\n            PositionCalculator.calculateValue(_position, _sqrtPrice, _context.isMarginZero);\\n    }\\n\\n    function calculateUnderlyingValue(int256 _amount, uint256 _price) internal pure returns (int256) {\\n        if (_amount >= 0) {\\n            return _amount.mul(int256(_price)).div(1e18).div(2);\\n        } else {\\n            return _amount.mul(int256(_price)).div(1e18).mul(2);\\n        }\\n    }\\n\\n    function getVaultStatusValue(\\n        DataType.VaultStatusAmount memory statusAmount,\\n        uint160 _sqrtPrice,\\n        bool _isMarginZero\\n    ) internal pure returns (DataType.VaultStatusValue memory) {\\n        uint256 price = LPTMath.decodeSqrtPriceX96(_isMarginZero, _sqrtPrice);\\n\\n        int256 premium = int256(statusAmount.receivedPremium).sub(int256(statusAmount.paidpremium));\\n\\n        if (_isMarginZero) {\\n            return\\n                DataType.VaultStatusValue(\\n                    PredyMath.mulDiv(statusAmount.collateralAmount1, price, 1e18).add(statusAmount.collateralAmount0),\\n                    PredyMath.mulDiv(statusAmount.debtAmount1, price, 1e18).add(statusAmount.debtAmount0),\\n                    int256(\\n                        PredyMath.mulDiv(statusAmount.receivedTradeAmount1, price, 1e18).add(\\n                            statusAmount.receivedTradeAmount0\\n                        )\\n                    ).add(premium)\\n                );\\n        } else {\\n            return\\n                DataType.VaultStatusValue(\\n                    PredyMath.mulDiv(statusAmount.collateralAmount0, price, 1e18).add(statusAmount.collateralAmount1),\\n                    PredyMath.mulDiv(statusAmount.debtAmount0, price, 1e18).add(statusAmount.debtAmount1),\\n                    int256(\\n                        PredyMath.mulDiv(statusAmount.receivedTradeAmount0, price, 1e18).add(\\n                            statusAmount.receivedTradeAmount1\\n                        )\\n                    ).add(premium)\\n                );\\n        }\\n    }\\n\\n    function getVaultStatusAmount(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        uint160 _sqrtPrice\\n    ) internal view returns (DataType.VaultStatusAmount memory) {\\n        (uint256 fee0, uint256 fee1) = getEarnedTradeFee(_subVault, _ranges);\\n\\n        (uint256 collateralAmount0, uint256 collateralAmount1) = getCollateralPositionAmounts(\\n            _subVault,\\n            _ranges,\\n            _sqrtPrice\\n        );\\n        (uint256 debtAmount0, uint256 debtAmount1) = getDebtPositionAmounts(_subVault, _ranges, _sqrtPrice);\\n\\n        return\\n            DataType.VaultStatusAmount(\\n                collateralAmount0,\\n                collateralAmount1,\\n                debtAmount0,\\n                debtAmount1,\\n                fee0,\\n                fee1,\\n                getEarnedDailyPremium(_subVault, _ranges),\\n                getPaidDailyPremium(_subVault, _ranges)\\n            );\\n    }\\n\\n    function getDebtPositionValue(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice\\n    ) external view returns (uint256 debtValue) {\\n        uint256 price = LPTMath.decodeSqrtPriceX96(_context.isMarginZero, _sqrtPrice);\\n\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            debtValue += getDebtPositionValue(_subVaults[_vault.subVaults[i]], _ranges, _context, _sqrtPrice, price);\\n        }\\n    }\\n\\n    function getDebtPositionValue(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context,\\n        uint160 _sqrtPrice,\\n        uint256 _price\\n    ) internal view returns (uint256) {\\n        (uint256 totalAmount0, uint256 totalAmount1) = getDebtPositionAmounts(_subVault, _ranges, _sqrtPrice);\\n\\n        uint256 paidPremium = getPaidDailyPremium(_subVault, _ranges);\\n\\n        if (_context.isMarginZero) {\\n            return (PredyMath.mulDiv(totalAmount1, _price, 1e18).add(totalAmount0).sub(paidPremium));\\n        } else {\\n            return (PredyMath.mulDiv(totalAmount0, _price, 1e18).add(totalAmount1).sub(paidPremium));\\n        }\\n    }\\n\\n    /**\\n     * @notice latest collateral amounts\\n     */\\n    function getCollateralPositionAmounts(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        uint160 _sqrtPrice\\n    ) internal view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        totalAmount0 = totalAmount0.add(_subVault.collateralAmount0);\\n        totalAmount1 = totalAmount1.add(_subVault.collateralAmount1);\\n\\n        {\\n            (uint256 amount0, uint256 amount1) = getLPTPositionAmounts(_subVault, _ranges, _sqrtPrice, true);\\n\\n            totalAmount0 = totalAmount0.add(amount0);\\n            totalAmount1 = totalAmount1.add(amount1);\\n        }\\n    }\\n\\n    function getDebtPositionAmounts(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        uint160 _sqrtPrice\\n    ) internal view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        totalAmount0 = totalAmount0.add(_subVault.debtAmount0);\\n        totalAmount1 = totalAmount1.add(_subVault.debtAmount1);\\n\\n        {\\n            (uint256 amount0, uint256 amount1) = getLPTPositionAmounts(_subVault, _ranges, _sqrtPrice, false);\\n\\n            totalAmount0 = totalAmount0.add(amount0);\\n            totalAmount1 = totalAmount1.add(amount1);\\n        }\\n    }\\n\\n    function getLPTPositionAmounts(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        uint160 _sqrtPrice,\\n        bool _isCollateral\\n    ) internal view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            if (_isCollateral != _subVault.lpts[i].isCollateral) {\\n                continue;\\n            }\\n\\n            (uint256 amount0, uint256 amount1) = LPTMath.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                _ranges[_subVault.lpts[i].rangeId].lowerTick,\\n                _ranges[_subVault.lpts[i].rangeId].upperTick,\\n                _subVault.lpts[i].liquidityAmount\\n            );\\n\\n            totalAmount0 = totalAmount0.add(amount0);\\n            totalAmount1 = totalAmount1.add(amount1);\\n        }\\n    }\\n\\n    function getEarnedTradeFee(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges\\n    ) public view returns (uint256 totalAmount0, uint256 totalAmount1) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            if (!_subVault.lpts[i].isCollateral) {\\n                continue;\\n            }\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            totalAmount0 += PredyMath.mulDiv(\\n                (ranges[rangeId].fee0Growth.sub(_subVault.lpts[i].fee0Last)),\\n                _subVault.lpts[i].liquidityAmount,\\n                Constants.ONE\\n            );\\n            totalAmount1 += PredyMath.mulDiv(\\n                (ranges[rangeId].fee1Growth.sub(_subVault.lpts[i].fee1Last)),\\n                _subVault.lpts[i].liquidityAmount,\\n                Constants.ONE\\n            );\\n        }\\n    }\\n\\n    function getEarnedDailyPremium(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges\\n    ) public view returns (uint256 marginValue) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            DataType.PerpStatus memory perpStatus = ranges[rangeId];\\n\\n            if (_subVault.lpts[i].isCollateral) {\\n                marginValue = marginValue.add(\\n                    PredyMath.mulDiv(\\n                        (perpStatus.premiumGrowthForLender.sub(_subVault.lpts[i].premiumGrowthLast)),\\n                        _subVault.lpts[i].liquidityAmount,\\n                        Constants.ONE\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    function getPaidDailyPremium(\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage ranges\\n    ) public view returns (uint256 marginValue) {\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            DataType.PerpStatus memory perpStatus = ranges[rangeId];\\n\\n            if (!_subVault.lpts[i].isCollateral) {\\n                marginValue = marginValue.add(\\n                    PredyMath.mulDiv(\\n                        (perpStatus.premiumGrowthForBorrower.sub(_subVault.lpts[i].premiumGrowthLast)),\\n                        _subVault.lpts[i].liquidityAmount,\\n                        Constants.ONE\\n                    )\\n                );\\n            }\\n        }\\n    }\\n\\n    function getPremiumAndFee(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges,\\n        DataType.Context memory _context\\n    ) internal view returns (int256 totalFee0, int256 totalFee1) {\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            DataType.SubVault memory subVault = _subVaults[_vault.subVaults[i]];\\n\\n            (uint256 fee0, uint256 fee1) = getEarnedTradeFee(subVault, _ranges);\\n\\n            totalFee0 = totalFee0.add(int256(fee0));\\n            totalFee1 = totalFee1.add(int256(fee1));\\n\\n            if (_context.isMarginZero) {\\n                totalFee0 = totalFee0.add(int256(getEarnedDailyPremium(subVault, _ranges)));\\n                totalFee0 = totalFee0.sub(int256(getPaidDailyPremium(subVault, _ranges)));\\n            } else {\\n                totalFee1 = totalFee1.add(int256(getEarnedDailyPremium(subVault, _ranges)));\\n                totalFee1 = totalFee1.sub(int256(getPaidDailyPremium(subVault, _ranges)));\\n            }\\n        }\\n\\n        DataType.Position memory position = PositionLib.concat(getPositions(_vault, _subVaults, _ranges));\\n        \\n        totalFee0 += int256(_context.tokenState0.getCollateralValue(_vault.balance0)).sub(int256(position.collateral0));\\n        totalFee1 += int256(_context.tokenState1.getCollateralValue(_vault.balance1)).sub(int256(position.collateral1));\\n        totalFee0 -= int256(_context.tokenState0.getDebtValue(_vault.balance0)).sub(int256(position.debt0));\\n        totalFee1 -= int256(_context.tokenState1.getDebtValue(_vault.balance1)).sub(int256(position.debt1));\\n    }\\n\\n    function getPositionOfSubVault(\\n        uint256 _subVaultIndex,\\n        DataType.SubVault memory _subVault,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) internal view returns (DataType.Position memory position) {\\n        DataType.LPT[] memory lpts = new DataType.LPT[](_subVault.lpts.length);\\n\\n        for (uint256 i = 0; i < _subVault.lpts.length; i++) {\\n            bytes32 rangeId = _subVault.lpts[i].rangeId;\\n            DataType.PerpStatus memory range = _ranges[rangeId];\\n            lpts[i] = DataType.LPT(\\n                _subVault.lpts[i].isCollateral,\\n                _subVault.lpts[i].liquidityAmount,\\n                range.lowerTick,\\n                range.upperTick\\n            );\\n        }\\n\\n        position = DataType.Position(\\n            _subVaultIndex,\\n            _subVault.collateralAmount0,\\n            _subVault.collateralAmount1,\\n            _subVault.debtAmount0,\\n            _subVault.debtAmount1,\\n            lpts\\n        );\\n    }\\n\\n    function getPositions(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) internal view returns (DataType.Position[] memory positions) {\\n        positions = new DataType.Position[](_vault.subVaults.length);\\n\\n        for (uint256 i = 0; i < _vault.subVaults.length; i++) {\\n            positions[i] = getPositionOfSubVault(i, _subVaults[_vault.subVaults[i]], _ranges);\\n        }\\n    }\\n\\n    function getPosition(\\n        DataType.Vault memory _vault,\\n        mapping(uint256 => DataType.SubVault) storage _subVaults,\\n        mapping(bytes32 => DataType.PerpStatus) storage _ranges\\n    ) internal view returns (DataType.Position memory position) {\\n        return PositionLib.concat(VaultLib.getPositions(_vault, _subVaults, _ranges));\\n    }\\n}\\n\",\"keccak256\":\"0xb3fd05e9406a85e518d7220ffc90f5d6b2da4cb124aaa56e3ea821a396e4c02d\",\"license\":\"UNLICENSED\"},\"src/vendors/IUniswapV3PoolOracle.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV3PoolOracle {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory liquidityCumulatives);\\n\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 liquidityCumulative,\\n            bool initialized\\n        );\\n\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0xfea4874a356a0b0b1c6413d4773012cacea74858937ce44ca1b40314d042402e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x615bd362000027600b82828239805160001a60731461001a57fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80633617b340146100505780636f32035014610072578063c827d03e1461009b575b600080fd5b81801561005c57600080fd5b5061007061006b366004615222565b6100c9565b005b610085610080366004615206565b61023b565b60405161009291906159fd565b60405180910390f35b8180156100a757600080fd5b506100bb6100b636600461534e565b6102bb565b604051610092929190615786565b60005b8360c00151518110156102345760008360008660c0015184815181106100ee57fe5b602002602001015181526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156101d25760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a0830152908352909201910161015c565b5050505081525050905060005b81608001515181101561022a57610222878560008560800151858151811061020357fe5b602002602001015160200151815260200190815260200160002061190d565b6001016101df565b50506001016100cc565b5050505050565b6000816001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561027657600080fd5b505afa15801561028a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ae91906154f0565b5094979650505050505050565b6000806102ca88888789611a24565b909250905060005b845181101561121a5760008582815181106102e957fe5b6020026020010151905061030b8160000151600c81111561030657fe5b611d26565b60006103288a8a84602001518e611d6a909392919063ffffffff16565b905060018251600c81111561033957fe5b14156103f8578551156103675760405162461bcd60e51b815260040161035e90615820565b60405180910390fd5b61037c8b828b8560c001518660e00151611e4f565b60c082015161038c908690611e9c565b94506103a58260e0015185611e9c90919063ffffffff16565b93508a600001547ff4457b7e5a4cb23b0a42f238b6c629e37c0866bb91a2f0eef94d7f576d22c96f83602001518460c001518560e001516040516103eb93929190615a39565b60405180910390a2611210565b60028251600c81111561040757fe5b141561048d576000806104258d848d8760c001518860e00151611f0a565b90925090506104348783611f61565b96506104408682611f61565b95508c600001547f287b547e69b738c1790b9fe65204cfe3f27e4ce7c8d46ddc2b3bbe4a0bcdee3e8560200151848460405161047e93929190615a39565b60405180910390a25050611210565b60038251600c81111561049c57fe5b1415610545578551156104c15760405162461bcd60e51b815260040161035e90615820565b6104d68b828b8560c001518660e00151611fc6565b60c08201516104e6908690611f61565b94506104ff8260e0015185611f6190919063ffffffff16565b93508a600001547f14ed48d412add2233f56e3ec2b31c1d2c960010e816752179862b3b608233dc483602001518460c001518560e001516040516103eb93929190615a39565b60048251600c81111561055457fe5b14156105cb576000806105728d848d8760c001518860e00151612011565b90925090506105818783611e9c565b965061058d8682611e9c565b95508c600001547fbac8528ae37f8a85e8c1577882d873aabe54dbbf7b3e2967c63d4f2e7f6044438560200151848460405161047e93929190615a39565b60058251600c8111156105da57fe5b1415610802578551156105ff5760405162461bcd60e51b815260040161035e90615820565b6000806107de8d60000154848d604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f820154815250508d88612068565b90925090506107ed8783611e9c565b96506107f98682611e9c565b95505050611210565b60068251600c81111561081157fe5b1415610a0d576000806109f28d848d604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f820154815250508d886121ef565b9092509050610a018783611f61565b96506107f98682611f61565b60078251600c811115610a1c57fe5b1415610c2057855115610a415760405162461bcd60e51b815260040161035e90615820565b6000806109f28d60000154848d604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f820154815250508d8861229c565b60088251600c811115610c2f57fe5b1415610e14576000806107de8d60000154848d604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f820154815250508d8861237a565b60098251600c811115610e2357fe5b1415611002576000806107de8d8c604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f82015481525050866124fb565b600a8251600c81111561101157fe5b1415611210576000806111f08d8c604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f8201548152505086612736565b90925090506111ff8783611e9c565b965061120b8682611e9c565b955050505b50506001016102d2565b5082602001511561163d576000611236838386606001516128f6565b905060008060098351600c81111561124a57fe5b1415611430576114268b8a604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f82015481525050856124fb565b9092509050611621565b600a8351600c81111561143f57fe5b14156116215761161b8b8a604051806101800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900462ffffff1662ffffff1662ffffff1681526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016004820160149054906101000a900460ff1615151515815260200160058201548152602001600682016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600a82016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250508152602001600e8201548152602001600f8201548152505085612736565b90925090505b61162b8583611e9c565b94506116378482611e9c565b93505050505b600080600085608001511261167c5760028a0154608086015161165f91611f61565b608086015160028c015591506116758483611e9c565b93506116b2565b846080015160011914156116b25761169684600019612aa3565b60028b01549092506116a89083611e9c565b60028b0155600093505b60008560a00151126116ee5760038a015460a08601516116d191611f61565b60a086015160038c015590506116e78382611e9c565b9250611724565b8460a0015160011914156117245761170883600019612aa3565b60038b015490915061171a9082611e9c565b60038b0155600092505b8115158061173157508015155b156117735789546040517fc56aedd0d24f7e7e9ffa0147ff1aee7a907de845f0c00b73570d635a91b98f5e9061176a9085908590615786565b60405180910390a25b5050600a8801541561190257600a88015460005b818110156118ff576000600182840303905060008a60008d600a0184815481106117ad57fe5b906000526020600020015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156118945760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a0830152908352909201910161181e565b5050509152505080519091501580156118af57506040810151155b80156118bd57506020810151155b80156118cb57506060810151155b80156118da5750608081015151155b156118ee576118e98c83612b4c565b6118f5565b50506118ff565b5050600101611787565b50505b965096945050505050565b600061192183606001518360000154612c0d565b60408051608081018252845481523060208201526001600160801b03818301819052606080830191909152860151915163fc6f786560e01b81529293509160009182916001600160a01b039091169063fc6f786590611984908690600401615876565b6040805180830381600087803b15801561199d57600080fd5b505af11580156119b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d591906155db565b9150915083670de0b6b3a76400008302816119ec57fe5b60048701805492909104909101905583670de0b6b3a7640000820281611a0e57fe5b6005909601805491909604019094555050505050565b6040805160e0810182528554815260018601546001600160a01b0316602080830191909152600287015482840152600387015460608084019190915283518082018552600489015481526005890154818401526006890154818601526080840152835190810184526007880154815260088801548183015260098801548185015260a0830152600a87018054845181840281018401909552808552600094859485948594611c169492938d9360c0860193919291830182828015611b0757602002820191906000526020600020905b815481526020019060010190808311611af3575b505050919092525050604080516101808101825289546001600160a01b03908116825260018b0154808216602080850191909152600160a01b9182900462ffffff168486015260028d0154831660608086019190915260038e0154841660808087019190915260048f015494851660a08701529290930460ff16151560c085015260058d015460e08501528451808301865260068e0154815260078e01548183015260088e01548187015260098e01548185015261010085015284519182018552600a8d01548252600b8d015490820152600c8c015493810193909352600d8b015490830152610120810191909152600e890154610140820152600f8901546101608201528a91508990612cac565b9150915081600003935080600003925060005b600a890154811015611d1a5760008860008b600a018481548110611c4957fe5b90600052602060002001548152602001908152602001600020905060005b6004820154811015611d10576000826004018281548110611c8457fe5b60009182526020909120600690910201805490915060ff1615611cc3576001810154600090815260208b90526040902060039081015490820155611ce0565b6001810154600090815260208b9052604090206002015460038201555b600180820154600090815260208c9052604090206004808201549084015560059081015492019190915501611c67565b5050600101611c29565b50505094509492505050565b6040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b031663f5b1bba960e01b179052611d6790612f27565b50565b600a840154600090821415611df2576005830180546001808201909255600a87018054928301815560009081526020902090910181905585546040517f0605914ef5b9f55d33aee21c48cb416d5a7e023fb964c2ed330b6c894c4547e890611dd59086908590615786565b60405180910390a260009081526020859052604090209050611e47565b600a850154821015611e2f57600085600a018381548110611e0f57fe5b60009182526020808320909101548252869052604090209150611e479050565b60405162461bcd60e51b815260040161035e9061585a565b949350505050565b8354611e5b9083612f48565b84556001840154611e6c9082612f48565b6001850155611e82600684016004870184612fa2565b50611e94600a84016007870183612fa2565b505050505050565b6000828201818312801590611eb15750838112155b80611ec65750600083128015611ec657508381125b611f015760405162461bcd60e51b8152600401808060200182810382526021815260200180615b116021913960400191505060405180910390fd5b90505b92915050565b83546000908190611f1b9085612ff8565b86556001860154611f2c9084612ff8565b6001870155611f42600686016004890186613055565b9150611f55600a86016007890185613055565b90509550959350505050565b6000818303818312801590611f765750838113155b80611f8b5750600083128015611f8b57508381135b611f015760405162461bcd60e51b8152600401808060200182810382526024815260200180615b7a6024913960400191505060405180910390fd5b6002840154611fd59083612f48565b60028501556003840154611fe99082612f48565b6003850155611fff6006840160048701846130c8565b50611e94600a840160078701836130c8565b60008061202b848760020154612ff890919063ffffffff16565b6002870155600386015461203f9084612ff8565b600387015561205560068601600489018661318d565b9150611f55600a8601600789018561318d565b600080600061207f84608001518560a0015161321d565b90506000806120a86120948960a0015161023b565b87608001518860a001518960600151613250565b600085815260208a9052604081205492945090925090156120fc576120ee898960008781526020019081526020016000206000015485858b60c001518c60e0015161327d565b9098509650915061215f9050565b600061211d8a89608001518a60a0015187878d60c001518e60e00151613349565b809950819a508295508394505050505061215d8189608001518a60a001518c60008a8152602001908152602001600020613469909392919063ffffffff16565b505b86606001516001600160801b0316816001600160801b031611156121955760405162461bcd60e51b815260040161035e9061583d565b6121a18a8986846134ab565b8a7fb676b0a534c958ca0a666d0f7a3687500de67295c90f4032fc0489ef9fc223f4886020015186846040516121d993929190615a1a565b60405180910390a2505050509550959350505050565b600080600061220684608001518560a0015161321d565b90506122328686600084815260200190815260200160002086606001518760c001518860e001516136c5565b6060860151919450925061224990889083906137a8565b87600001547f349fc591e68c47c391abf5206f24f2ecdc991b5d10e6f67963b39bb3a5dd9ea1856020015183876060015160405161228993929190615a1a565b60405180910390a2509550959350505050565b60008060006122b384608001518560a0015161321d565b90506122df8686600084815260200190815260200160002086606001518760c001518860e001516136c5565b606086018051600085815260208a90526040902060010180546001600160801b03600160301b8083048216909401169092026601000000000000600160b01b031990921691909117905551919450925061233e908890879084906139d3565b877f7935b13e52f453cee66e06ed34bed939ab1cd36811a502a17bbcf07dd21a0767856020015183876060015160405161228993929190615a1a565b600080600061239184608001518560a0015161321d565b90506000806123ba6123a68960a0015161023b565b87608001518860a001518960600151613b16565b9150915060006123eb898960008781526020019081526020016000206000015485858b60c001518c60e0015161327d565b60608b015191995097509092506001600160801b03908116908316101590506124265760405162461bcd60e51b815260040161035e90615803565b50505060608401516000828152602087905260409020600101546124709161246b916001600160801b039182169161246591600160301b900416613b35565b90612ff8565b613b94565b600082815260208790526040902060010180546001600160801b0392909216600160301b026601000000000000600160b01b031990921691909117905560608401516124bf9088908390613bd8565b877f14eb73478feedbdfa3768312526904d4890acda09699478dbe762669b9a66364856020015183876060015160405161228993929190615a1a565b6000806000604051806101000160405280856040015161251f578660200151612522565b86515b6001600160a01b031681526020018560400151612540578651612546565b86602001515b6001600160a01b03168152602001866040015162ffffff168152602001306001600160a01b031681526020014281526020018560c0015181526020016000815260200160006001600160a01b0316815250905084608001516001600160a01b031663414bf389826040518263ffffffff1660e01b81526004016125c991906158fc565b602060405180830381600087803b1580156125e357600080fd5b505af1925050508015612613575060408051601f3d908101601f1916820190925261261091810190615586565b60015b6126bc573d808015612641576040519150601f19603f3d011682016040523d82523d6000602084013e612646565b606091505b50604051602401612656906157e7565b60408051601f19818403018152919052602080820180516001600160e01b031662461bcd60e51b178152915190912082519183019190912014156126a25760008093509350505061272e565b8060405162461bcd60e51b815260040161035e9190615794565b865460408087015160c088015191517fa11bdb5a5018df14a9b80e623473e112917b2a7416a3bbbd8969610f460d3967926126f99291869061575a565b60405180910390a284604001511561271e5760c08501519350600003915061272e9050565b806000038560c001519350935050505b935093915050565b6000806000604051806101000160405280856040015161275a57866020015161275d565b86515b6001600160a01b03168152602001856040015161277b578651612781565b86602001515b6001600160a01b03168152602001866040015162ffffff168152602001306001600160a01b031681526020014281526020018560c001518152602001600019815260200160006001600160a01b0316815250905084608001516001600160a01b031663db3e2198826040518263ffffffff1660e01b815260040161280591906158fc565b602060405180830381600087803b15801561281f57600080fd5b505af192505050801561284f575060408051601f3d908101601f1916820190925261284c91810190615586565b60015b61287d573d808015612641576040519150601f19603f3d011682016040523d82523d6000602084013e612646565b86600001547fa11bdb5a5018df14a9b80e623473e112917b2a7416a3bbbd8969610f460d39678660400151838860c001516040516128bd9392919061575a565b60405180910390a28460400151156128e357808560c0015160000393509350505061272e565b60c08501516000039350915061272e9050565b6128fe614e8e565b600080600080851561293f576000871315612922575060019250600091508561293a565b600087121561293a5760009350600192508660000391505b61296e565b60008813156129565750600092508291508661296e565b600088121561296e5760019350600192508760000391505b82801561297b5750600082115b156129dd57604080516101008101909152806009815260200160008152602001851515815260200160006001600160801b03168152602001600060020b8152602001600060020b81526020018381526020016000815250945050505050612a9c565b821580156129eb5750600081115b15612a4d5760408051610100810190915280600a815260200160008152602001851515815260200160006001600160801b03168152602001600060020b8152602001600060020b81526020018281526020016000815250945050505050612a9c565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e0909101529450612a9c9350505050565b9392505050565b600082612ab257506000611f04565b82600019148015612ac65750600160ff1b82145b15612b025760405162461bcd60e51b8152600401808060200182810382526027815260200180615b536027913960400191505060405180910390fd5b82820282848281612b0f57fe5b0514611f015760405162461bcd60e51b8152600401808060200182810382526027815260200180615b536027913960400191505060405180910390fd5b600082600a018281548110612b5d57fe5b600091825260209091200154600a84018054919250906000198101908110612b8157fe5b906000526020600020015483600a018381548110612b9b57fe5b600091825260209091200155600a8301805480612bb457fe5b6001900381819060005260206000200160009055905582600001547f081ac19f0e6d216418ece17d3b0b510f1782e821249fdba90c8a9bfc1ca4af7b8383604051612c00929190615786565b60405180910390a2505050565b600080836001600160a01b03166399fbab88846040518263ffffffff1660e01b8152600401612c3c9190615a11565b6101806040518083038186803b158015612c5557600080fd5b505afa158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d91906155fe565b50506001600160801b039092169a505050505050505050505092915050565b60008060005b8660c0015151811015612e5f5760008660008960c001518481518110612cd457fe5b602002602001015181526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015612db85760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101612d42565b50505050815250509050600080612dcf8389613c62565b9092509050612dde8683611e9c565b9550612dea8582611e9c565b94508660c0015115612e2757612e0a612e03848a613d93565b8790611e9c565b9550612e20612e19848a613ede565b8790611f61565b9550612e54565b612e3b612e34848a613d93565b8690611e9c565b9450612e51612e4a848a613ede565b8690611f61565b94505b505050600101612cb2565b506000612e75612e7088888861400a565b6141a5565b9050612ea18160200151612e9b89608001518761010001516143a390919063ffffffff16565b90611f61565b83019250612ec98160400151612e9b8960a001518761012001516143a390919063ffffffff16565b82019150612ef18160600151612e9b89608001518761010001516143c090919063ffffffff16565b83039250612f198160800151612e9b8960a001518761012001516143c090919063ffffffff16565b820391505094509492505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600082820183811015611f01576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000612fbb82670de0b6b3a764000086600201546143d9565b8354909150612fca9082612f48565b83558354612fd89082612f48565b84556002830154612fe99083612f48565b83600201819055509392505050565b60008282111561304f576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008061306f83670de0b6b3a764000087600201546143d9565b9050808460000154101561308a57835460008555915061309e565b8354909150819061309b9082612ff8565b84555b60028401546130ad9084612f48565b600285015584546130be9083612ff8565b9094559392505050565b600081613107856040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250506143ef565b101561313f576040805162461bcd60e51b8152602060048201526002602482015261042360f41b604482015290519081900360640190fd5b61315682670de0b6b3a764000086600301546143d9565b60018401549091506131689082612f48565b60018085019190915584015461317e9082612f48565b84600101819055509392505050565b6000806131a783670de0b6b3a764000087600301546143d9565b905080846001015410156131c757600184018054600090915591506131e7565b8091506131e1818560010154612ff890919063ffffffff16565b60018501555b60018501546131f69083612ff8565b60018601556003850154613214908390670de0b6b3a76400006143d9565b95945050505050565b60008282604051602001613232929190615772565b60405160208183030381529060405280519060200120905092915050565b60008061326f866132608761440a565b6132698761440a565b8661473c565b915091505b94509492505050565b60008060008060006040518060c001604052808b81526020018a81526020018981526020018881526020018781526020014281525090508a606001516001600160a01b031663219f5d17826040518263ffffffff1660e01b81526004016132e4919061590b565b606060405180830381600087803b1580156132fe57600080fd5b505af1158015613312573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333691906154ba565b9b9d919c509a9950975050505050505050565b60008060008060006040518061016001604052808d600001516001600160a01b031681526020018d602001516001600160a01b031681526020018d6040015162ffffff1681526020018c60020b81526020018b60020b81526020018a8152602001898152602001888152602001878152602001306001600160a01b031681526020014281525090508b606001516001600160a01b03166388316456826040518263ffffffff1660e01b8152600401613401919061594f565b608060405180830381600087803b15801561341b57600080fd5b505af115801561342f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613453919061559e565b929f919e509c50909a5098505050505050505050565b91835560018301805462ffffff1916600292830b62ffffff9081169190911765ffffff000000191663010000009490930b169290920217905542600690910155565b60005b60048501548110156135a157828560040182815481106134ca57fe5b90600052602060002090600602016001015414801561350857508460040181815481106134f357fe5b600091825260209091206006909102015460ff165b156135995761354f61246b836001600160801b031687600401848154811061352c57fe5b60009182526020909120600260069092020101546001600160801b031690612f48565b85600401828154811061355e57fe5b906000526020600020906006020160020160006101000a8154816001600160801b0302191690836001600160801b03160217905550506136bf565b6001016134ae565b50836004016040518060c00160405280600115158152602001848152602001836001600160801b0316815260200185600086815260200190815260200160002060030154815260200185600086815260200190815260200160002060040154815260200185600086815260200190815260200160002060050154815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548160ff0219169083151502179055506020820151816001015560408201518160020160006101000a8154816001600160801b0302191690836001600160801b03160217905550606082015181600301556080820151816004015560a0820151816005015550505b50505050565b6040805160a081018252855481526001600160801b038516602082015280820184905260608082018490524260808301528701519151630624e65f60e11b81526000928392916001600160a01b0390911690630c49ccbe9061372b9084906004016158b9565b6040805180830381600087803b15801561374457600080fd5b505af1158015613758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377c91906155db565b909350915061379d888861378f86613b94565b61379886613b94565b6147d7565b509550959350505050565b60005b60048401548110156136bf57828460040182815481106137c757fe5b90600052602060002090600602016001015414801561380557508360040181815481106137f057fe5b600091825260209091206006909102015460ff165b156139c65761384c61246b836001600160801b031686600401848154811061382957fe5b60009182526020909120600260069092020101546001600160801b031690612ff8565b84600401828154811061385b57fe5b906000526020600020906006020160020160006101000a8154816001600160801b0302191690836001600160801b0316021790555083600401818154811061389f57fe5b60009182526020909120600260069092020101546001600160801b03166139c05760048401805460001981019081106138d457fe5b90600052602060002090600602018460040182815481106138f157fe5b600091825260209091208254600690920201805460ff909216151560ff199092169190911781556001808301549082015560028083015490820180546001600160801b0319166001600160801b0390921691909117905560038083015490820155600480830154818301556005928301549290910191909155840180548061397557fe5b600082815260208120600660001990930192830201805460ff19168155600181018290556002810180546001600160801b031916905560038101829055600481018290556005015590555b506139ce565b6001016137ab565b505050565b60005b6004850154811015613a5d57828560040182815481106139f257fe5b906000526020600020906006020160010154148015613a315750846004018181548110613a1b57fe5b600091825260209091206006909102015460ff16155b15613a555761354f61246b836001600160801b031687600401848154811061352c57fe5b6001016139d6565b506040805160c081018252600080825260208083018681526001600160801b03958616848601908152968352968152928120600290810154606084019081526080840183815260a0850184815260049a8b018054600180820183559187529790952095516006909702909501805460ff1916961515969096178655975192850192909255945194830180546001600160801b03191695909416949094179092559151600383015591519281019290925551600590910155565b60008061326f86613b268761440a565b613b2f8761440a565b866148c0565b600080821215613b8c576040805162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015290519081900360640190fd5b50805b919050565b6000600160801b8210613b8c5760405162461bcd60e51b8152600401808060200182810382526027815260200180615aea6027913960400191505060405180910390fd5b60005b60048401548110156136bf5782846004018281548110613bf757fe5b906000526020600020906006020160010154148015613c365750836004018181548110613c2057fe5b600091825260209091206006909102015460ff16155b15613c5a5761384c61246b836001600160801b031686600401848154811061382957fe5b600101613bdb565b60008060005b846080015151811015613d8b5784608001518181518110613c8557fe5b602002602001015160000151613c9a57613d83565b600085608001518281518110613cac57fe5b6020026020010151602001519050613d33613d0087608001518481518110613cd057fe5b60200260200101516080015187600085815260200190815260200160002060040154612ff890919063ffffffff16565b87608001518481518110613d1057fe5b6020026020010151604001516001600160801b0316670de0b6b3a76400006143d9565b84019350613d7d613d0087608001518481518110613d4d57fe5b602002602001015160a0015187600085815260200190815260200160002060050154612ff890919063ffffffff16565b83019250505b600101613c68565b509250929050565b6000805b836080015151811015613ed757600084608001518281518110613db657fe5b6020908102919091018101518101516000818152868352604090819020815161012081018352815481526001820154600281810b810b810b9683019690965263010000008104860b860b860b93820193909352600160301b9092046001600160801b0316606083015292830154608080830191909152600384015460a0830152600484015460c0830152600584015460e08301526006909301546101008201529187015180519193509084908110613e6a57fe5b60200260200101516000015115613ecd57613eca613ec3613eb388608001518681518110613e9457fe5b6020026020010151606001518460a00151612ff890919063ffffffff16565b88608001518681518110613d1057fe5b8590612f48565b93505b5050600101613d97565b5092915050565b6000805b836080015151811015613ed757600084608001518281518110613f0157fe5b6020908102919091018101518101516000818152868352604090819020815161012081018352815481526001820154600281810b810b810b9683019690965263010000008104860b860b860b93820193909352600160301b9092046001600160801b0316606083015292830154608080830191909152600384015460a0830152600484015460c0830152600584015460e08301526006909301546101008201529187015180519193509084908110613fb557fe5b60200260200101516000015161400057613ffd613ec3613eb388608001518681518110613fde57fe5b6020026020010151606001518460800151612ff890919063ffffffff16565b93505b5050600101613ee2565b60608360c001515167ffffffffffffffff8111801561402857600080fd5b5060405190808252806020026020018201604052801561406257816020015b61404f614ed4565b8152602001906001900390816140475790505b50905060005b8460c001515181101561419d5761417e818560008860c00151858151811061408c57fe5b602002602001015181526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156141705760008481526020908190206040805160c08101825260068602909201805460ff16151583526001808201548486015260028201546001600160801b03169284019290925260038101546060840152600481015460808401526005015460a083015290835290920191016140fa565b505050508152505085614942565b82828151811061418a57fe5b6020908102919091010152600101614068565b509392505050565b6141ad614ed4565b6000805b83518110156141e4578381815181106141c657fe5b602002602001015160a00151518201915080806001019150506141b1565b5060008167ffffffffffffffff811180156141fe57600080fd5b5060405190808252806020026020018201604052801561423857816020015b614225614f0a565b81526020019060019003908161421d5790505b5090506040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001828152509250600080600090505b855181101561439a5785818151811061428c57fe5b6020026020010151602001518560200181815101915081815250508581815181106142b357fe5b6020026020010151604001518560400181815101915081815250508581815181106142da57fe5b60200260200101516060015185606001818151019150818152505085818151811061430157fe5b60200260200101516080015185608001818151019150818152505060005b86828151811061432b57fe5b602002602001015160a00151518110156143915786828151811061434b57fe5b602002602001015160a00151818151811061436257fe5b60200260200101518660a00151848151811061437a57fe5b60209081029190910101526001928301920161431f565b50600101614277565b50505050919050565b6000611f0182600001518460400151670de0b6b3a76400006143d9565b6000611f0182602001518460600151670de0b6b3a76400005b6000611e47826143e98686614b37565b90614b90565b60006143fa82614bf7565b61440383614c14565b0392915050565b60008060008360020b12614421578260020b614429565b8260020b6000035b9050620d89e8811115614467576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b60006001821661447b57600160801b61448d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156144c1576ffff97272373d413259a46990580e213a0260801c5b60048216156144e0576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156144ff576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561451e576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561453d576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561455c576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561457b576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561459b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156145bb576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156145db576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156145fb576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161561461b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b61200082161561463b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b61400082161561465b576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561467b576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561469c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156146bc576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156146db576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156146f8576b048a170391f7dc42444e8fa20260801c5b60008460020b131561471357806000198161470f57fe5b0490505b64010000000081061561472757600161472a565b60005b60ff16602082901c0192505050919050565b600080836001600160a01b0316856001600160a01b0316111561475d579293925b846001600160a01b0316866001600160a01b03161161478857614781858585614c31565b9150613274565b836001600160a01b0316866001600160a01b031610156147c1576147ad868585614c31565b91506147ba858785614c9a565b9050613274565b6147cc858585614c9a565b905094509492505050565b60408051608081018252845481523060208201526001600160801b03808516828401528316606080830191909152860151915163fc6f786560e01b8152909160009182916001600160a01b03169063fc6f786590614839908690600401615876565b6040805180830381600087803b15801561485257600080fd5b505af1158015614866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061488a91906155db565b9150915081856001600160801b03161480156148ae575080846001600160801b0316145b6148b757600080fd5b50505050505050565b600080836001600160a01b0316856001600160a01b031611156148e1579293925b846001600160a01b0316866001600160a01b03161161490557614781858585614cdd565b836001600160a01b0316866001600160a01b031610156149375761492a868585614cdd565b91506147ba858785614d62565b6147cc858585614d62565b61494a614ed4565b600083608001515167ffffffffffffffff8111801561496857600080fd5b506040519080825280602002602001820160405280156149a257816020015b61498f614f0a565b8152602001906001900390816149875790505b50905060005b846080015151811015614af8576000856080015182815181106149c757fe5b6020908102919091018101518101516000818152878352604090819020815161012081018352815481526001820154600281810b810b810b9683019690965263010000008104860b860b860b82850152600160301b90046001600160801b0316606082015293810154608080860191909152600382015460a0860152600482015460c0860152600582015460e086015260069091015461010085015281518082019092528901518051929450909182919086908110614a8257fe5b6020026020010151600001511515815260200188608001518581518110614aa557fe5b6020026020010151604001516001600160801b03168152602001826020015160020b8152602001826040015160020b815250848481518110614ae357fe5b602090810291909101015250506001016149a8565b506040805160c081018252958652845160208088019190915285015186820152840151606080870191909152909301516080850152505060a082015290565b600082614b4657506000611f04565b82820282848281614b5357fe5b0414611f015760405162461bcd60e51b8152600401808060200182810382526021815260200180615b326021913960400191505060405180910390fd5b6000808211614be6576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381614bef57fe5b049392505050565b6000611f0482602001518360600151670de0b6b3a76400006143d9565b6000611f0482600001518360400151670de0b6b3a76400006143d9565b6000826001600160a01b0316846001600160a01b03161115614c51579192915b836001600160a01b0316614c8a606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b0316614da5565b81614c9157fe5b04949350505050565b6000826001600160a01b0316846001600160a01b03161115614cba579192915b611e47826001600160801b03168585036001600160a01b0316600160601b614da5565b6000826001600160a01b0316846001600160a01b03161115614cfd579192915b6000614d20856001600160a01b0316856001600160a01b0316600160601b614da5565b90506000614d3e82600160601b8888036001600160a01b0316614da5565b9050614d58846001600160801b0316600160601b83614e54565b9695505050505050565b6000826001600160a01b0316846001600160a01b03161115614d82579192915b611e47826001600160801b03168585036001600160a01b0316600160601b614e54565b6000808060001985870986860292508281109083900303905080614ddb5760008411614dd057600080fd5b508290049050612a9c565b808411614de757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000614e61848484614da5565b905060008280614e6d57fe5b8486091115612a9c576000198110614e8457600080fd5b6001019392505050565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b8035613b8f81615a91565b8051613b8f81615a91565b600082601f830112614f57578081fd5b81356020614f6c614f6783615a73565b615a4f565b8281528181019085830183850287018401881015614f88578586fd5b855b85811015614fa657813584529284019290840190600101614f8a565b5090979650505050505050565b8035613b8f81615aa6565b8035600d8110613b8f57600080fd5b8035613b8f81615ab4565b8051613b8f81615ab4565b600060608284031215614ff4578081fd5b6040516060810181811067ffffffffffffffff8211171561501157fe5b80604052508091508235815260208301356020820152604083013560408201525092915050565b600060808284031215615049578081fd5b6040516080810181811067ffffffffffffffff8211171561506657fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600060c082840312156150a8578081fd5b60405160c0810181811067ffffffffffffffff821117156150c557fe5b60405290508082356150d681615aa6565b815260208301356150e681615aa6565b602082015260408301356150f981615aa6565b604082015261510a60608401614fb3565b60608201526080830135608082015260a083013560a08201525092915050565b6000610160828403121561513c578081fd5b61514660e0615a4f565b90508135815261515860208301614f31565b6020820152604082013560408201526060820135606082015261517e8360808401614fe3565b60808201526151908360e08401614fe3565b60a082015261014082013567ffffffffffffffff8111156151b057600080fd5b6151bc84828501614f47565b60c08301525092915050565b8035613b8f81615ac3565b8051613b8f81615ac3565b805161ffff81168114613b8f57600080fd5b8035613b8f81615ad8565b8051613b8f81615ad8565b600060208284031215615217578081fd5b8135611f0181615a91565b6000806000808486036102a0811215615239578384fd5b61024080821215615248578485fd5b610180915061525682615a4f565b61525f88614f31565b815261526d60208901614f31565b602082015261527e604089016151f0565b604082015261528f60608901614f31565b60608201526152a060808901614f31565b60808201526152b160a08901614f31565b60a08201526152c260c08901614fb3565b60c082015260e088013560e08201526101006152e08a828b01615038565b908201526152f089898501615038565b6101208201526102008801356101408201526102208801356101608201529550860135905067ffffffffffffffff811115615329578384fd5b6153358782880161512a565b9497949650505050610260830135926102800135919050565b6000806000806000806101608789031215615367578384fd5b86359550602087013594506040870135935060608701359250608087013567ffffffffffffffff8082111561539a578384fd5b818901915089601f8301126153ad578384fd5b81356153bb614f6782615a73565b80828252602082019150602085018d6020610100860288010111156153de578788fd5b8795505b8386101561549857610100818f0312156153fa578788fd5b6040516101008101818110878211171561541057fe5b60405261541c82614fbe565b81526020820135602082015261543460408301614fb3565b6040820152615445606083016151c8565b606082015261545660808301614fcd565b608082015261546760a08301614fcd565b60a082015260c0828101359082015260e08083013590820152835260019590950194602090920191610100016153e2565b5080965050505050506154ae8860a08901615097565b90509295509295509295565b6000806000606084860312156154ce578081fd5b83516154d981615ac3565b602085015160409095015190969495509392505050565b600080600080600080600060e0888a03121561550a578485fd5b875161551581615a91565b602089015190975061552681615ab4565b9550615534604089016151de565b9450615542606089016151de565b9350615550608089016151de565b925060a088015160ff81168114615565578182fd5b60c089015190925061557681615aa6565b8091505092959891949750929550565b600060208284031215615597578081fd5b5051919050565b600080600080608085870312156155b3578182fd5b8451935060208501516155c581615ac3565b6040860151606090960151949790965092505050565b600080604083850312156155ed578182fd5b505080516020909101519092909150565b6000806000806000806000806000806000806101808d8f031215615620578586fd5b8c516bffffffffffffffffffffffff8116811461563b578687fd5b9b5061564960208e01614f3c565b9a5061565760408e01614f3c565b995061566560608e01614f3c565b985061567360808e016151fb565b975061568160a08e01614fd8565b965061568f60c08e01614fd8565b955061569d60e08e016151d3565b94506101008d015193506101208d015192506156bc6101408e016151d3565b91506156cb6101608e016151d3565b90509295989b509295989b509295989b565b6001600160a01b03169052565b60020b9052565b80516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c0808301519084015260e09182015116910152565b62ffffff169052565b92151583526020830191909152604082015260600190565b600292830b8152910b602082015260400190565b918252602082015260400190565b6000602080835283518082850152825b818110156157c0578581018301518582016040015282016157a4565b818111156157d15783604083870101525b50601f01601f1916929092016040019392505050565b602080825260029082015261415360f01b604082015260600190565b602080825260039082015262282a9960e91b604082015260600190565b60208082526003908201526250553160e81b604082015260600190565b60208082526003908201526250553360e81b604082015260600190565b602080825260029082015261056360f41b604082015260600190565b815181526020808301516001600160a01b0316908201526040808301516001600160801b0390811691830191909152606092830151169181019190915260800190565b600060a082019050825182526001600160801b03602084015116602083015260408301516040830152606083015160608301526080830151608083015292915050565b6101008101611f0482846156f1565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6000610160820190506159638284516156dd565b602083015161597560208401826156dd565b5060408301516159886040840182615751565b50606083015161599b60608401826156ea565b5060808301516159ae60808401826156ea565b5060a083015160a083015260c083015160c083015260e083015160e0830152610100808401518184015250610120808401516159ec828501826156dd565b505061014092830151919092015290565b6001600160a01b0391909116815260200190565b90815260200190565b92835260208301919091526001600160801b0316604082015260600190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff81118282101715615a6b57fe5b604052919050565b600067ffffffffffffffff821115615a8757fe5b5060209081020190565b6001600160a01b0381168114611d6757600080fd5b8015158114611d6757600080fd5b8060020b8114611d6757600080fd5b6001600160801b0381168114611d6757600080fd5b62ffffff81168114611d6757600080fdfe53616665436173743a2076616c756520646f65736e27742066697420696e2031323820626974735369676e6564536166654d6174683a206164646974696f6e206f766572666c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212208aa4462289250023e78ab3d1f8863aef224eb562341aceec8937f2b975bc2f1364736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "updateFeeGrowth(DataType.Context,DataType.Vault,mapping(uint256 => DataType.SubVault) storage,mapping(bytes32 => DataType.PerpStatus) storage)": {
        "notice": "Collects trade fee and premium."
      },
      "updatePosition(DataType.Vault storage,mapping(uint256 => DataType.SubVault) storage,DataType.Context storage,mapping(bytes32 => DataType.PerpStatus) storage,DataType.PositionUpdate[],DataType.TradeOption)": {
        "notice": "update position and return required token amounts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
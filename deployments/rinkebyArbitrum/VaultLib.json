{
  "address": "0x199CffEf5CacaBAcBeDE9Cd4C66Bd5Bf5e344d47",
  "abi": [],
  "transactionHash": "0xfd94e01449d6d0555ccb25a883305c243e212a9d9a5288f7d8d58a7aef705f74",
  "receipt": {
    "to": null,
    "from": "0x1c745d31A084a14Ba30E7c9F4B14EA762d44f194",
    "contractAddress": "0x199CffEf5CacaBAcBeDE9Cd4C66Bd5Bf5e344d47",
    "transactionIndex": 1,
    "gasUsed": "388086",
    "logsBloom": "0x
    "blockHash": "0xea728173bc27d20f1443c3953e19dcb2a8a8b30b94feca34c5fe45d683e82d20",
    "transactionHash": "0xfd94e01449d6d0555ccb25a883305c243e212a9d9a5288f7d8d58a7aef705f74",
    "logs": [],
    "blockNumber": 13966696,
    "cumulativeGasUsed": "388086",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a5a594376544575ba648803f900edb2e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/VaultLib.sol\":\"VaultLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363539353037383633353937\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"src/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.7.6;\\n\\nabstract contract Constants {\\n    uint256 internal constant ONE = 1e18;\\n    uint24 internal constant FEE_TIER = 500;\\n}\\n\",\"keccak256\":\"0xb93c3ea91c32e9a23ef1ad1432eb355f7495d64feac7193ae7f2f7725fb1cdef\",\"license\":\"agpl-3.0\"},\"src/libraries/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\nlibrary VaultLib {\\n    using SafeMath for uint256;\\n\\n    struct PerpStatus {\\n        uint256 tokenId;\\n        int24 lower;\\n        int24 upper;\\n        uint128 borrowedLiquidity;\\n        uint256 cumulativeFee;\\n        uint256 cumulativeFeeForLP;\\n        uint256 cumFee0;\\n        uint256 cumFee1;\\n        uint256 lastTouchedTimestamp;\\n    }\\n    struct Vault {\\n        uint256 margin;\\n        uint256 collateralAmount0;\\n        uint256 collateralAmount1;\\n        bool[] isCollateral;\\n        bytes32[] lptIndex;\\n        uint128[] lptLiquidity;\\n        uint256[] lptFeeGrowth;\\n    }\\n\\n    function setMargin(Vault storage _vault, uint256 _margin) external {\\n        _vault.margin = _margin;\\n    }\\n\\n    function getMarginValue(Vault memory _vault, mapping(bytes32 => PerpStatus) storage ranges, uint256 _margin) external view returns(uint256 marginValue) {\\n        marginValue = _vault.margin;\\n\\n        for (uint256 i = 0; i < _vault.lptIndex.length; i++) {\\n            bytes32 rangeId = _vault.lptIndex[i];\\n            VaultLib.PerpStatus memory perpStatus = ranges[rangeId];\\n\\n            if (_vault.isCollateral[i]) {\\n                marginValue = marginValue.add(\\n                    ((perpStatus.cumulativeFeeForLP.sub(_vault.lptFeeGrowth[i])) * _vault.lptLiquidity[i]) / 1e18\\n                );\\n            } else {\\n                marginValue = marginValue.sub(\\n                    ((perpStatus.cumulativeFee.sub(_vault.lptFeeGrowth[i])) * _vault.lptLiquidity[i]) / 1e18\\n                );\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xb48669a0a0dff0151af4def4505d44026a5d8e74b29b7d6dac7b021024a8830f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x61060f610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806331442a67146100455780639ee6986514610067575b600080fd5b81801561005157600080fd5b5061006561006036600461056d565b610090565b005b61007a61007536600461046a565b610094565b604051610087919061058e565b60405180910390f35b9055565b825160005b846080015151811015610263576000856080015182815181106100b857fe5b6020908102919091018101516000818152878352604090819020815161012081018352815481526001820154600281810b810b810b9683019690965263010000008104860b860b860b9382019390935266010000000000009092046001600160801b0316606080840191909152938101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152918801518051919350908490811061016a57fe5b6020026020010151156101ea576101e3670de0b6b3a76400008860a00151858151811061019357fe5b60200260200101516001600160801b03166101d28a60c0015187815181106101b757fe5b60200260200101518560a0015161026b90919063ffffffff16565b02816101da57fe5b869190046102c8565b9350610259565b610256670de0b6b3a76400008860a00151858151811061020657fe5b60200260200101516001600160801b03166102458a60c00151878151811061022a57fe5b6020026020010151856080015161026b90919063ffffffff16565b028161024d57fe5b8691900461026b565b93505b5050600101610099565b509392505050565b6000828211156102c2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610322576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082601f830112610339578081fd5b8135602061034e610349836105bb565b610597565b828152818101908583018385028701840188101561036a578586fd5b855b858110156103955781358015158114610383578788fd5b8452928401929084019060010161036c565b5090979650505050505050565b600082601f8301126103b2578081fd5b813560206103c2610349836105bb565b82815281810190858301838502870184018810156103de578586fd5b855b85811015610395578135845292840192908401906001016103e0565b600082601f83011261040c578081fd5b8135602061041c610349836105bb565b8281528181019085830183850287018401881015610438578586fd5b855b858110156103955781356001600160801b0381168114610458578788fd5b8452928401929084019060010161043a565b60008060006060848603121561047e578283fd5b833567ffffffffffffffff80821115610495578485fd5b9085019060e082880312156104a8578485fd5b6104b260e0610597565b8235815260208301356020820152604083013560408201526060830135828111156104db578687fd5b6104e789828601610329565b6060830152506080830135828111156104fe578687fd5b61050a898286016103a2565b60808301525060a083013582811115610521578687fd5b61052d898286016103fc565b60a08301525060c083013582811115610544578687fd5b610550898286016103a2565b60c083015250976020870135975060409096013595945050505050565b6000806040838503121561057f578182fd5b50508035926020909101359150565b90815260200190565b60405181810167ffffffffffffffff811182821017156105b357fe5b604052919050565b600067ffffffffffffffff8211156105cf57fe5b506020908102019056fea2646970667358221220bf8cf2eb78aa05cdce237ca5ea4261c66e812e227a2c2e86e476a7eff669930d64736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806331442a67146100455780639ee6986514610067575b600080fd5b81801561005157600080fd5b5061006561006036600461056d565b610090565b005b61007a61007536600461046a565b610094565b604051610087919061058e565b60405180910390f35b9055565b825160005b846080015151811015610263576000856080015182815181106100b857fe5b6020908102919091018101516000818152878352604090819020815161012081018352815481526001820154600281810b810b810b9683019690965263010000008104860b860b860b9382019390935266010000000000009092046001600160801b0316606080840191909152938101546080830152600381015460a0830152600481015460c0830152600581015460e083015260060154610100820152918801518051919350908490811061016a57fe5b6020026020010151156101ea576101e3670de0b6b3a76400008860a00151858151811061019357fe5b60200260200101516001600160801b03166101d28a60c0015187815181106101b757fe5b60200260200101518560a0015161026b90919063ffffffff16565b02816101da57fe5b869190046102c8565b9350610259565b610256670de0b6b3a76400008860a00151858151811061020657fe5b60200260200101516001600160801b03166102458a60c00151878151811061022a57fe5b6020026020010151856080015161026b90919063ffffffff16565b028161024d57fe5b8691900461026b565b93505b5050600101610099565b509392505050565b6000828211156102c2576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610322576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082601f830112610339578081fd5b8135602061034e610349836105bb565b610597565b828152818101908583018385028701840188101561036a578586fd5b855b858110156103955781358015158114610383578788fd5b8452928401929084019060010161036c565b5090979650505050505050565b600082601f8301126103b2578081fd5b813560206103c2610349836105bb565b82815281810190858301838502870184018810156103de578586fd5b855b85811015610395578135845292840192908401906001016103e0565b600082601f83011261040c578081fd5b8135602061041c610349836105bb565b8281528181019085830183850287018401881015610438578586fd5b855b858110156103955781356001600160801b0381168114610458578788fd5b8452928401929084019060010161043a565b60008060006060848603121561047e578283fd5b833567ffffffffffffffff80821115610495578485fd5b9085019060e082880312156104a8578485fd5b6104b260e0610597565b8235815260208301356020820152604083013560408201526060830135828111156104db578687fd5b6104e789828601610329565b6060830152506080830135828111156104fe578687fd5b61050a898286016103a2565b60808301525060a083013582811115610521578687fd5b61052d898286016103fc565b60a08301525060c083013582811115610544578687fd5b610550898286016103a2565b60c083015250976020870135975060409096013595945050505050565b6000806040838503121561057f578182fd5b50508035926020909101359150565b90815260200190565b60405181810167ffffffffffffffff811182821017156105b357fe5b604052919050565b600067ffffffffffffffff8211156105cf57fe5b506020908102019056fea2646970667358221220bf8cf2eb78aa05cdce237ca5ea4261c66e812e227a2c2e86e476a7eff669930d64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
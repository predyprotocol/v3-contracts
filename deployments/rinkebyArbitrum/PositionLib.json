{
  "address": "0x05a8e395E2f08F95B2dA5c1c578781F0bf7a530A",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "lowerTick",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "upperTick",
                  "type": "int24"
                }
              ],
              "internalType": "struct DataType.LPT[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.Position[]",
          "name": "_positions",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_swapRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "_sqrtPrice",
          "type": "uint160"
        }
      ],
      "name": "getPositionUpdatesToClose",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DataType.PositionUpdateType",
              "name": "positionUpdateType",
              "type": "DataType.PositionUpdateType"
            },
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "zeroForOne",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "int24",
              "name": "lowerTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "upperTick",
              "type": "int24"
            },
            {
              "internalType": "uint256",
              "name": "param0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "param1",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.PositionUpdate[]",
          "name": "positionUpdates",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debt1",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isCollateral",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "lowerTick",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "upperTick",
                  "type": "int24"
                }
              ],
              "internalType": "struct DataType.LPT[]",
              "name": "lpts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DataType.Position",
          "name": "_position",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_isQuoteZero",
          "type": "bool"
        },
        {
          "internalType": "uint160",
          "name": "_sqrtPrice",
          "type": "uint160"
        }
      ],
      "name": "getPositionUpdatesToOpen",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DataType.PositionUpdateType",
              "name": "positionUpdateType",
              "type": "DataType.PositionUpdateType"
            },
            {
              "internalType": "uint256",
              "name": "subVaultIndex",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "zeroForOne",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "int24",
              "name": "lowerTick",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "upperTick",
              "type": "int24"
            },
            {
              "internalType": "uint256",
              "name": "param0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "param1",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataType.PositionUpdate[]",
          "name": "positionUpdates",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dcafc66fc42489c13c192bd4bef083e27beb28a36b0e5d8b96790bd302076db",
  "receipt": {
    "to": null,
    "from": "0x1c745d31A084a14Ba30E7c9F4B14EA762d44f194",
    "contractAddress": "0x05a8e395E2f08F95B2dA5c1c578781F0bf7a530A",
    "transactionIndex": 1,
    "gasUsed": "1448770",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x88b24b3d8e3070d91842b163c5e7112c755f847dda9b5c726ea9294804307989",
    "transactionHash": "0x3dcafc66fc42489c13c192bd4bef083e27beb28a36b0e5d8b96790bd302076db",
    "logs": [],
    "blockNumber": 15237247,
    "cumulativeGasUsed": "1448770",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d197fd8b597ec91ad876c7e6a3d23a22",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct DataType.LPT[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.Position[]\",\"name\":\"_positions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_swapRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPrice\",\"type\":\"uint160\"}],\"name\":\"getPositionUpdatesToClose\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DataType.PositionUpdateType\",\"name\":\"positionUpdateType\",\"type\":\"DataType.PositionUpdateType\"},{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"param0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.PositionUpdate[]\",\"name\":\"positionUpdates\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt1\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"}],\"internalType\":\"struct DataType.LPT[]\",\"name\":\"lpts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DataType.Position\",\"name\":\"_position\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isQuoteZero\",\"type\":\"bool\"},{\"internalType\":\"uint160\",\"name\":\"_sqrtPrice\",\"type\":\"uint160\"}],\"name\":\"getPositionUpdatesToOpen\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DataType.PositionUpdateType\",\"name\":\"positionUpdateType\",\"type\":\"DataType.PositionUpdateType\"},{\"internalType\":\"uint256\",\"name\":\"subVaultIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"lowerTick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"upperTick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"param0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"param1\",\"type\":\"uint256\"}],\"internalType\":\"struct DataType.PositionUpdate[]\",\"name\":\"positionUpdates\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/PositionLib.sol\":\"PositionLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632343837333238353237\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"lib/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf149581d28e1c81736dfe72be73ee1301d4945340cc6282fcdd63fe3c85abf24\",\"license\":\"GPL-2.0-or-later\"},\"src/libraries/BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"./PredyMath.sol\\\";\\n\\nlibrary BaseToken {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant ONE = 1e18;\\n\\n    struct TokenState {\\n        uint256 totalDeposited;\\n        uint256 totalBorrowed;\\n        uint256 collateralScaler;\\n        uint256 debtScaler;\\n    }\\n\\n    struct AccountState {\\n        uint256 collateralAmountNotInMarket;\\n        uint256 collateralAmount;\\n        uint256 debtAmount;\\n    }\\n\\n    function initialize(TokenState storage tokenState) internal {\\n        tokenState.collateralScaler = ONE;\\n        tokenState.debtScaler = ONE;\\n    }\\n\\n    function addCollateral(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount,\\n        bool _withEnteringMarket\\n    ) internal returns (uint256 mintAmount) {\\n        if (_withEnteringMarket) {\\n            mintAmount = PredyMath.mulDiv(_amount, ONE, tokenState.collateralScaler);\\n\\n            accountState.collateralAmount = accountState.collateralAmount.add(mintAmount);\\n            tokenState.totalDeposited = tokenState.totalDeposited.add(mintAmount);\\n        } else {\\n            accountState.collateralAmountNotInMarket = accountState.collateralAmountNotInMarket.add(_amount);\\n        }\\n    }\\n\\n    function addDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 mintAmount) {\\n        require(getAvailableCollateralValue(tokenState) >= _amount, \\\"B0\\\");\\n\\n        mintAmount = PredyMath.mulDiv(_amount, ONE, tokenState.debtScaler);\\n\\n        accountState.debtAmount = accountState.debtAmount.add(mintAmount);\\n        tokenState.totalBorrowed = tokenState.totalBorrowed.add(mintAmount);\\n    }\\n\\n    function removeCollateral(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount,\\n        bool _withEnteringMarket\\n    ) internal returns (uint256 finalBurnAmount) {\\n        if (_withEnteringMarket) {\\n            uint256 burnAmount = PredyMath.mulDiv(_amount, ONE, tokenState.collateralScaler);\\n\\n            if (accountState.collateralAmount < burnAmount) {\\n                finalBurnAmount = accountState.collateralAmount;\\n                accountState.collateralAmount = 0;\\n            } else {\\n                finalBurnAmount = burnAmount;\\n                accountState.collateralAmount = accountState.collateralAmount.sub(burnAmount);\\n            }\\n\\n            tokenState.totalDeposited = tokenState.totalDeposited.sub(finalBurnAmount);\\n        } else {\\n            if (accountState.collateralAmountNotInMarket < _amount) {\\n                finalBurnAmount = accountState.collateralAmountNotInMarket;\\n                accountState.collateralAmountNotInMarket = 0;\\n            } else {\\n                finalBurnAmount = _amount;\\n                accountState.collateralAmountNotInMarket = accountState.collateralAmountNotInMarket.sub(_amount);\\n            }\\n        }\\n    }\\n\\n    function removeDebt(\\n        TokenState storage tokenState,\\n        AccountState storage accountState,\\n        uint256 _amount\\n    ) internal returns (uint256 finalBurnAmount) {\\n        uint256 burnAmount = PredyMath.mulDiv(_amount, ONE, tokenState.debtScaler);\\n\\n        if (accountState.debtAmount < burnAmount) {\\n            finalBurnAmount = accountState.debtAmount;\\n            accountState.debtAmount = 0;\\n        } else {\\n            finalBurnAmount = burnAmount;\\n            accountState.debtAmount = accountState.debtAmount.sub(burnAmount);\\n        }\\n\\n        tokenState.totalBorrowed = tokenState.totalBorrowed.sub(finalBurnAmount);\\n\\n        // TODO: roundUp\\n        finalBurnAmount = PredyMath.mulDiv(finalBurnAmount, tokenState.debtScaler, ONE);\\n    }\\n\\n    // get collateral value\\n    function getCollateralValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            PredyMath.mulDiv(accountState.collateralAmount, tokenState.collateralScaler, ONE) +\\n            accountState.collateralAmountNotInMarket;\\n    }\\n\\n    // get debt value\\n    function getDebtValue(TokenState memory tokenState, AccountState memory accountState)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return PredyMath.mulDiv(accountState.debtAmount, tokenState.debtScaler, ONE);\\n    }\\n\\n    // update scaler;\\n    function updateScaler(TokenState storage tokenState, uint256 _interestAmount) internal {\\n        if (tokenState.totalDeposited == 0) {\\n            return;\\n        }\\n        tokenState.debtScaler = PredyMath.mulDiv(tokenState.debtScaler, (ONE + _interestAmount), ONE);\\n\\n        uint256 updateCollateralScaler = ONE +\\n            PredyMath.mulDiv(_interestAmount, tokenState.totalBorrowed, tokenState.totalDeposited);\\n\\n        tokenState.collateralScaler = PredyMath.mulDiv(tokenState.collateralScaler, updateCollateralScaler, ONE);\\n    }\\n\\n    function getTotalCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return PredyMath.mulDiv(tokenState.totalDeposited, tokenState.collateralScaler, ONE);\\n    }\\n\\n    function getTotalDebtValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return PredyMath.mulDiv(tokenState.totalBorrowed, tokenState.debtScaler, ONE);\\n    }\\n\\n    function getAvailableCollateralValue(TokenState memory tokenState) internal pure returns (uint256) {\\n        return getTotalCollateralValue(tokenState) - getTotalDebtValue(tokenState);\\n    }\\n\\n    function getUtilizationRatio(TokenState memory tokenState) internal pure returns (uint256) {\\n        if (tokenState.totalDeposited == 0) {\\n            return ONE;\\n        }\\n\\n        return PredyMath.mulDiv(getTotalDebtValue(tokenState), ONE, getTotalCollateralValue(tokenState));\\n    }\\n}\\n\",\"keccak256\":\"0x931bfdeb043f1438a35dfd0df30c7f209398192c18f96a989169e725b66e0a81\",\"license\":\"UNLICENSED\"},\"src/libraries/DataType.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.6;\\n\\nimport \\\"./PredyMath.sol\\\";\\nimport \\\"./BaseToken.sol\\\";\\n\\nlibrary DataType {\\n    // Storage Data Type\\n    struct PerpStatus {\\n        uint256 tokenId;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint128 borrowedLiquidity;\\n        uint256 premiumGrowthForBorrower;\\n        uint256 premiumGrowthForLender;\\n        uint256 fee0Growth;\\n        uint256 fee1Growth;\\n        uint256 lastTouchedTimestamp;\\n    }\\n\\n    struct LPTState {\\n        bool isCollateral;\\n        bytes32 rangeId;\\n        uint128 liquidityAmount;\\n        uint256 premiumGrowthLast;\\n        uint256 fee0Last;\\n        uint256 fee1Last;\\n    }\\n\\n    struct SubVault {\\n        BaseToken.AccountState balance0;\\n        BaseToken.AccountState balance1;\\n        LPTState[] lpts;\\n    }\\n\\n    struct Vault {\\n        uint256 vaultId;\\n        address owner;\\n        uint256 marginAmount0;\\n        uint256 marginAmount1;\\n        uint256[] subVaults;\\n    }\\n\\n    struct Context {\\n        address token0;\\n        address token1;\\n        uint24 feeTier;\\n        address positionManager;\\n        address swapRouter;\\n        address uniswapPool;\\n        bool isMarginZero;\\n        uint256 nextSubVaultId;\\n        BaseToken.TokenState tokenState0;\\n        BaseToken.TokenState tokenState1;\\n    }\\n\\n    // Parameters\\n\\n    struct InitializationParams {\\n        uint24 feeTier;\\n        address token0;\\n        address token1;\\n        bool isMarginZero;\\n    }\\n\\n    struct LPT {\\n        bool isCollateral;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n    }\\n\\n    struct Position {\\n        uint256 subVaultIndex;\\n        uint256 collateral0;\\n        uint256 collateral1;\\n        uint256 debt0;\\n        uint256 debt1;\\n        LPT[] lpts;\\n    }\\n\\n    enum PositionUpdateType {\\n        NOOP,\\n        DEPOSIT_TOKEN,\\n        WITHDRAW_TOKEN,\\n        BORROW_TOKEN,\\n        REPAY_TOKEN,\\n        DEPOSIT_LPT,\\n        WITHDRAW_LPT,\\n        BORROW_LPT,\\n        REPAY_LPT,\\n        SWAP_EXACT_IN,\\n        SWAP_EXACT_OUT,\\n        DEPOSIT_MARGIN,\\n        WITHDRAW_MARGIN\\n    }\\n\\n    struct PositionUpdate {\\n        PositionUpdateType positionUpdateType;\\n        uint256 subVaultIndex;\\n        bool zeroForOne;\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 param0;\\n        uint256 param1;\\n    }\\n\\n    struct MetaData {\\n        uint256 subVaultIndex;\\n        bytes metadata;\\n    }\\n\\n    struct TradeOption {\\n        bool reduceOnly;\\n        bool swapAnyway;\\n        bool quoterMode;\\n        bool isQuoteZero;\\n        int256 targetMarginAmount0;\\n        int256 targetMarginAmount1;\\n    }\\n\\n    struct OpenPositionOption {\\n        uint256 price;\\n        uint256 slippageTorelance;\\n        uint256 bufferAmount0;\\n        uint256 bufferAmount1;\\n        MetaData metadata;\\n    }\\n\\n    struct ClosePositionOption {\\n        uint256 price;\\n        uint256 slippageTorelance;\\n        uint256 swapRatio;\\n        MetaData metadata;\\n    }\\n\\n    struct LiquidationOption {\\n        uint256 price;\\n        uint256 slippageTorelance;\\n        uint256 swapRatio;\\n        bool swapAnyway;\\n    }\\n\\n    struct VaultStatusValue {\\n        uint256 collateralValue;\\n        uint256 debtValue;\\n        int256 premiumValue;\\n    }\\n\\n    struct VaultStatusAmount {\\n        uint256 collateralAmount0;\\n        uint256 collateralAmount1;\\n        uint256 debtAmount0;\\n        uint256 debtAmount1;\\n        uint256 receivedTradeAmount0;\\n        uint256 receivedTradeAmount1;\\n        uint256 receivedPremium;\\n        uint256 paidpremium;\\n    }\\n\\n    struct SubVaultStatus {\\n        VaultStatusValue values;\\n        VaultStatusAmount amount;\\n    }\\n\\n    struct VaultStatus {\\n        uint256 marginValue;\\n        int256 minCollateral;\\n        SubVaultStatus[] subVaults;\\n    }\\n}\\n\",\"keccak256\":\"0x6fc2da10856bb79b0f588b058063afd9d4e7c5d76048c458db589f5de9c0ad7d\",\"license\":\"UNLICENSED\"},\"src/libraries/PositionLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"lib/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport \\\"lib/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./DataType.sol\\\";\\n\\nlibrary PositionLib {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    function getPositionUpdatesToOpen(\\n        DataType.Position memory _position,\\n        bool _isQuoteZero,\\n        uint160 _sqrtPrice\\n    ) external pure returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        uint256 swapIndex;\\n\\n        (positionUpdates, swapIndex) = calculatePositionUpdatesToOpen(_position);\\n\\n        (int256 requiredAmount0, int256 requiredAmount1) = getRequiredTokenAmountsToOpen(_position, _sqrtPrice);\\n\\n        if (_isQuoteZero) {\\n            if (requiredAmount1 > 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    true,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(requiredAmount1),\\n                    0\\n                );\\n            } else if (requiredAmount1 < 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(-requiredAmount1),\\n                    0\\n                );\\n            }\\n        } else {\\n            if (requiredAmount0 > 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_OUT,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(requiredAmount0),\\n                    0\\n                );\\n            } else if (requiredAmount0 < 0) {\\n                positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                    0,\\n                    true,\\n                    0,\\n                    0,\\n                    0,\\n                    uint256(-requiredAmount0),\\n                    0\\n                );\\n            }\\n        }\\n    }\\n\\n    function getPositionUpdatesToClose(\\n        DataType.Position[] memory _positions,\\n        uint256 _swapRatio,\\n        uint160 _sqrtPrice\\n    ) external pure returns (DataType.PositionUpdate[] memory positionUpdates) {\\n        uint256 swapIndex;\\n\\n        (positionUpdates, swapIndex) = calculatePositionUpdatesToClose(_positions);\\n\\n        (int256 requiredAmount0, int256 requiredAmount1) = getRequiredTokenAmountsToClose(_positions, _sqrtPrice);\\n\\n        if (requiredAmount0 < 0) {\\n            positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                0,\\n                true,\\n                0,\\n                0,\\n                0,\\n                (uint256(-requiredAmount0) * _swapRatio) / 100,\\n                0\\n            );\\n        } else if (requiredAmount1 < 0) {\\n            positionUpdates[swapIndex] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.SWAP_EXACT_IN,\\n                0,\\n                false,\\n                0,\\n                0,\\n                0,\\n                (uint256(-requiredAmount1) * _swapRatio) / 100,\\n                0\\n            );\\n        }\\n    }\\n\\n    function calculateMaxAmount0(\\n        uint256 _amount1,\\n        uint256 _price,\\n        uint256 _slippageTorelance,\\n        bool _isMarginZero\\n    ) internal pure returns (uint256) {\\n        if (_isMarginZero) {\\n            uint256 limitPrice = (_price * (1e4 + _slippageTorelance)) / 1e4;\\n            return (_amount1 * limitPrice) / 1e18;\\n        } else {\\n            uint256 limitPrice = (_price * (1e4 - _slippageTorelance)) / 1e4;\\n            return (_amount1 * 1e18) / limitPrice;\\n        }\\n    }\\n\\n    function calculateMinAmount0(\\n        uint256 _amount1,\\n        uint256 _price,\\n        uint256 _slippageTorelance,\\n        bool _isMarginZero\\n    ) internal pure returns (uint256) {\\n        if (_isMarginZero) {\\n            uint256 limitPrice = (_price * (1e4 - _slippageTorelance)) / 1e4;\\n            return (_amount1 * limitPrice) / 1e18;\\n        } else {\\n            uint256 limitPrice = (_price * (1e4 + _slippageTorelance)) / 1e4;\\n            return (_amount1 * 1e18) / limitPrice;\\n        }\\n    }\\n\\n    function calculateMaxAmount1(\\n        uint256 _amount0,\\n        uint256 _price,\\n        uint256 _slippageTorelance,\\n        bool _isMarginZero\\n    ) internal pure returns (uint256) {\\n        if (_isMarginZero) {\\n            uint256 limitPrice = (_price * (1e4 - _slippageTorelance)) / 1e4;\\n            return (_amount0 * 1e18) / limitPrice;\\n        } else {\\n            uint256 limitPrice = (_price * (1e4 + _slippageTorelance)) / 1e4;\\n            return (_amount0 * limitPrice) / 1e18;\\n        }\\n    }\\n\\n    function calculateMinAmount1(\\n        uint256 _amount0,\\n        uint256 _price,\\n        uint256 _slippageTorelance,\\n        bool _isMarginZero\\n    ) internal pure returns (uint256) {\\n        if (_isMarginZero) {\\n            uint256 limitPrice = (_price * (1e4 + _slippageTorelance)) / 1e4;\\n            return (_amount0 * 1e18) / limitPrice;\\n        } else {\\n            uint256 limitPrice = (_price * (1e4 - _slippageTorelance)) / 1e4;\\n            return (_amount0 * limitPrice) / 1e18;\\n        }\\n    }\\n\\n    function concat(DataType.Position[] memory _positions, DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (DataType.Position memory)\\n    {\\n        DataType.Position[] memory positions = new DataType.Position[](_positions.length + 1);\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            positions[i] = _positions[i];\\n        }\\n\\n        positions[_positions.length] = _position;\\n\\n        return concat(positions);\\n    }\\n\\n    function concat(DataType.Position[] memory _positions) internal pure returns (DataType.Position memory _position) {\\n        uint256 numLPTs;\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            numLPTs += _positions[i].lpts.length;\\n        }\\n\\n        DataType.LPT[] memory lpts = new DataType.LPT[](numLPTs);\\n\\n        _position = DataType.Position(0, 0, 0, 0, 0, lpts);\\n\\n        uint256 k;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            _position.collateral0 += _positions[i].collateral0;\\n            _position.collateral1 += _positions[i].collateral1;\\n            _position.debt0 += _positions[i].debt0;\\n            _position.debt1 += _positions[i].debt1;\\n\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                _position.lpts[k] = _positions[i].lpts[j];\\n                k++;\\n            }\\n        }\\n    }\\n\\n    function emptyPosition() internal pure returns (DataType.Position memory) {\\n        DataType.LPT[] memory lpts = new DataType.LPT[](0);\\n        return DataType.Position(0, 0, 0, 0, 0, lpts);\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to open position.\\n     * @param _destPosition position to open\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmountsToOpen(DataType.Position memory _destPosition, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256, int256)\\n    {\\n        return getRequiredTokenAmounts(emptyPosition(), _destPosition, _sqrtPrice);\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to close position.\\n     * @param _srcPosition position to close\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmountsToClose(DataType.Position memory _srcPosition, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256, int256)\\n    {\\n        return getRequiredTokenAmounts(_srcPosition, emptyPosition(), _sqrtPrice);\\n    }\\n\\n    function getRequiredTokenAmountsToClose(DataType.Position[] memory _srcPositions, uint160 _sqrtPrice)\\n        internal\\n        pure\\n        returns (int256 requiredAmount0, int256 requiredAmount1)\\n    {\\n        for (uint256 i = 0; i < _srcPositions.length; i++) {\\n            (int256 a0, int256 a1) = getRequiredTokenAmounts(_srcPositions[i], emptyPosition(), _sqrtPrice);\\n            requiredAmount0 += a0;\\n            requiredAmount1 += a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates required token amounts to update position.\\n     * @param _srcPosition position to update\\n     * @param _destPosition desired position\\n     * @param _sqrtPrice square root price to calculate\\n     */\\n    function getRequiredTokenAmounts(\\n        DataType.Position memory _srcPosition,\\n        DataType.Position memory _destPosition,\\n        uint160 _sqrtPrice\\n    ) internal pure returns (int256 requiredAmount0, int256 requiredAmount1) {\\n        requiredAmount0 = requiredAmount0.sub(int256(_srcPosition.collateral0));\\n        requiredAmount1 = requiredAmount1.sub(int256(_srcPosition.collateral1));\\n        requiredAmount0 = requiredAmount0.add(int256(_srcPosition.debt0));\\n        requiredAmount1 = requiredAmount1.add(int256(_srcPosition.debt1));\\n\\n        requiredAmount0 = requiredAmount0.add(int256(_destPosition.collateral0));\\n        requiredAmount1 = requiredAmount1.add(int256(_destPosition.collateral1));\\n        requiredAmount0 = requiredAmount0.sub(int256(_destPosition.debt0));\\n        requiredAmount1 = requiredAmount1.sub(int256(_destPosition.debt1));\\n\\n        for (uint256 i = 0; i < _srcPosition.lpts.length; i++) {\\n            DataType.LPT memory lpt = _srcPosition.lpts[i];\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(lpt.lowerTick),\\n                TickMath.getSqrtRatioAtTick(lpt.upperTick),\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            } else {\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _destPosition.lpts.length; i++) {\\n            DataType.LPT memory lpt = _destPosition.lpts[i];\\n\\n            (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtPrice,\\n                TickMath.getSqrtRatioAtTick(lpt.lowerTick),\\n                TickMath.getSqrtRatioAtTick(lpt.upperTick),\\n                lpt.liquidity\\n            );\\n\\n            if (lpt.isCollateral) {\\n                requiredAmount0 = requiredAmount0.add(int256(amount0));\\n                requiredAmount1 = requiredAmount1.add(int256(amount1));\\n            } else {\\n                requiredAmount0 = requiredAmount0.sub(int256(amount0));\\n                requiredAmount1 = requiredAmount1.sub(int256(amount1));\\n            }\\n        }\\n    }\\n\\n    function calculateLengthOfPositionUpdates(DataType.Position[] memory _positions)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            length += calculateLengthOfPositionUpdates(_positions[i]);\\n        }\\n    }\\n\\n    function calculateLengthOfPositionUpdates(DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (uint256 length)\\n    {\\n        length = _position.lpts.length;\\n\\n        if (_position.collateral0 > 0 || _position.collateral1 > 0) {\\n            length += 1;\\n        }\\n\\n        if (_position.debt0 > 0 || _position.debt1 > 0) {\\n            length += 1;\\n        }\\n    }\\n\\n    function calculatePositionUpdatesToOpen(DataType.Position memory _position)\\n        internal\\n        pure\\n        returns (DataType.PositionUpdate[] memory positionUpdates, uint256 swapIndex)\\n    {\\n        positionUpdates = new DataType.PositionUpdate[](calculateLengthOfPositionUpdates(_position) + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n            if (!lpt.isCollateral) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.BORROW_LPT,\\n                    _position.subVaultIndex,\\n                    false,\\n                    lpt.liquidity,\\n                    lpt.lowerTick,\\n                    lpt.upperTick,\\n                    0,\\n                    0\\n                );\\n                index++;\\n            }\\n        }\\n\\n        if (_position.collateral0 > 0 || _position.collateral1 > 0) {\\n            positionUpdates[index] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.DEPOSIT_TOKEN,\\n                _position.subVaultIndex,\\n                false,\\n                0,\\n                0,\\n                0,\\n                _position.collateral0,\\n                _position.collateral1\\n            );\\n            index++;\\n        }\\n\\n        if (_position.debt0 > 0 || _position.debt1 > 0) {\\n            positionUpdates[index] = DataType.PositionUpdate(\\n                DataType.PositionUpdateType.BORROW_TOKEN,\\n                _position.subVaultIndex,\\n                false,\\n                0,\\n                0,\\n                0,\\n                _position.debt0,\\n                _position.debt1\\n            );\\n            index++;\\n        }\\n\\n        swapIndex = index;\\n        index++;\\n\\n        for (uint256 i; i < _position.lpts.length; i++) {\\n            DataType.LPT memory lpt = _position.lpts[i];\\n            if (lpt.isCollateral) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.DEPOSIT_LPT,\\n                    _position.subVaultIndex,\\n                    false,\\n                    lpt.liquidity,\\n                    lpt.lowerTick,\\n                    lpt.upperTick,\\n                    0,\\n                    0\\n                );\\n                index++;\\n            }\\n        }\\n    }\\n\\n    function calculatePositionUpdatesToClose(DataType.Position[] memory _positions)\\n        internal\\n        pure\\n        returns (DataType.PositionUpdate[] memory positionUpdates, uint256 swapIndex)\\n    {\\n        positionUpdates = new DataType.PositionUpdate[](calculateLengthOfPositionUpdates(_positions) + 1);\\n\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                DataType.LPT memory lpt = _positions[i].lpts[j];\\n                if (lpt.isCollateral) {\\n                    positionUpdates[index] = DataType.PositionUpdate(\\n                        DataType.PositionUpdateType.WITHDRAW_LPT,\\n                        _positions[i].subVaultIndex,\\n                        false,\\n                        lpt.liquidity,\\n                        lpt.lowerTick,\\n                        lpt.upperTick,\\n                        0,\\n                        0\\n                    );\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        swapIndex = index;\\n        index++;\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            for (uint256 j = 0; j < _positions[i].lpts.length; j++) {\\n                DataType.LPT memory lpt = _positions[i].lpts[j];\\n                if (!lpt.isCollateral) {\\n                    positionUpdates[index] = DataType.PositionUpdate(\\n                        DataType.PositionUpdateType.REPAY_LPT,\\n                        _positions[i].subVaultIndex,\\n                        false,\\n                        lpt.liquidity,\\n                        lpt.lowerTick,\\n                        lpt.upperTick,\\n                        0,\\n                        0\\n                    );\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            if (_positions[i].collateral0 > 0 || _positions[i].collateral1 > 0) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.WITHDRAW_TOKEN,\\n                    _positions[i].subVaultIndex,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    (_positions[i].collateral0 * 12) / 10,\\n                    (_positions[i].collateral1 * 12) / 10\\n                );\\n                index++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < _positions.length; i++) {\\n            if (_positions[i].debt0 > 0 || _positions[i].debt1 > 0) {\\n                positionUpdates[index] = DataType.PositionUpdate(\\n                    DataType.PositionUpdateType.REPAY_TOKEN,\\n                    _positions[i].subVaultIndex,\\n                    false,\\n                    0,\\n                    0,\\n                    0,\\n                    (_positions[i].debt0 * 12) / 10,\\n                    (_positions[i].debt1 * 12) / 10\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce27aa398c32ff6ab8230d2a9e6af9cb4e8225abeb6d2d67563d3198bd64abe4\",\"license\":\"UNLICENSED\"},\"src/libraries/PredyMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\\\";\\n\\nlibrary PredyMath {\\n    using SafeMath for uint256;\\n\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        return a.mul(b).div(denominator);\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function subReward(uint256 a, uint256 b) internal pure returns (uint256, uint256) {\\n        if (a >= b) {\\n            return (a - b, b);\\n        } else {\\n            return (0, a);\\n        }\\n    }\\n\\n    function addDelta(uint256 x, int256 y) internal pure returns (uint256 z) {\\n        if (y < 0) {\\n            require((z = x - uint256(-y)) < x, \\\"LS\\\");\\n        } else {\\n            require((z = x + uint256(y)) >= x, \\\"LA\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce9747dc10e2a55d08b58a5bf6af4f7abb38dec2e7ec67e565d7330b6ecd4003\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611941610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063b5b49eb214610045578063ffc4b1ad1461006e575b600080fd5b610058610053366004611766565b610081565b60405161006591906117cd565b60405180910390f35b61005861007c3660046116c4565b610259565b6060600061008e85610352565b90925090506000806100a0878661063c565b9150915085156101805760008113156101145760408051610100810190915280600a815260006020820181905260016040830152606082018190526080820181905260a0820181905260c0820184905260e090910152845185908590811061010457fe5b602002602001018190525061017b565b600081121561017b57604080516101008101909152806009815260006020820181905260408201819052606082018190526080820181905260a0820181905283810360c083015260e090910152845185908590811061016f57fe5b60200260200101819052505b61024f565b60008213156101e85760408051610100810190915280600a81526020016000815260200160001515815260200160006001600160801b03168152602001600060020b8152602001600060020b8152602001838152602001600081525084848151811061016f57fe5b600082121561024f57604080516101008101909152806009815260006020820181905260016040830152606082018190526080820181905260a0820181905284810360c083015260e090910152845185908590811061024357fe5b60200260200101819052505b5050509392505050565b606060006102668561065c565b90925090506000806102788786610b20565b9150915060008212156102f35760408051610100810190915280600981526020016000815260200160011515815260200160006001600160801b03168152602001600060020b8152602001600060020b81526020016064888560000302816102dc57fe5b048152602001600081525084848151811061016f57fe5b600081121561024f57604080516101008101825260098152600060208201819052918101829052606081018290526080810182905260a08101829052606483830389020460c082015260e0810191909152845185908590811061024357fe5b6060600061035f83610b71565b60010167ffffffffffffffff8111801561037857600080fd5b506040519080825280602002602001820160405280156103b257816020015b61039f611472565b8152602001906001900390816103975790505b5091506000805b8460a00151518110156104725760008560a0015182815181106103d857fe5b6020026020010151905080600001516104695760408051610100810190915280600781526020018760000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b815260200160008152602001600081525085848151811061045757fe5b60209081029190910101526001909201915b506001016103b9565b5060008460200151118061048a575060008460400151115b156104f25760408051610100810182526001815285516020808301919091526000828401819052606083018190526080830181905260a083015286015160c08201529085015160e082015283518490839081106104e357fe5b60209081029190910101526001015b600084606001511180610509575060008460800151115b15610572576040805161010081018252600381528551602082015260009181018290526060808201839052608080830184905260a083019390935286015160c08201529085015160e0820152835184908390811061056357fe5b60209081029190910101526001015b90506001810160005b8460a00151518110156106355760008560a00151828151811061059a57fe5b6020026020010151905080600001511561062c5760408051610100810190915280600581526020018760000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b815260200160008152602001600081525085848151811061061a57fe5b60209081029190910101526001909201915b5060010161057b565b5050915091565b60008061065161064a610bbb565b8585610c2f565b915091509250929050565b6060600061066983610e35565b60010167ffffffffffffffff8111801561068257600080fd5b506040519080825280602002602001820160405280156106bc57816020015b6106a9611472565b8152602001906001900390816106a15790505b5091506000805b84518110156107cb5760005b8582815181106106db57fe5b602002602001015160a00151518110156107c25760008683815181106106fd57fe5b602002602001015160a00151828151811061071457fe5b602002602001015190508060000151156107b957604080516101008101909152806006815260200188858151811061074857fe5b602002602001015160000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b81526020016000815260200160008152508685815181106107a757fe5b60209081029190910101526001909301925b506001016106cf565b506001016106c3565b5090506001810160005b84518110156108dc5760005b8582815181106107ed57fe5b602002602001015160a00151518110156108d357600086838151811061080f57fe5b602002602001015160a00151828151811061082657fe5b6020026020010151905080600001516108ca57604080516101008101909152806008815260200188858151811061085957fe5b602002602001015160000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b81526020016000815260200160008152508685815181106108b857fe5b60209081029190910101526001909301925b506001016107e1565b506001016107d5565b5060005b8451811015610a015760008582815181106108f757fe5b60200260200101516020015111806109265750600085828151811061091857fe5b602002602001015160400151115b156109f957604080516101008101909152806002815260200186838151811061094b57fe5b602002602001015160000151815260200160001515815260200160006001600160801b03168152602001600060020b8152602001600060020b8152602001600a87848151811061099757fe5b602002602001015160200151600c02816109ad57fe5b048152602001600a8784815181106109c157fe5b602002602001015160400151600c02816109d757fe5b048152508483815181106109e757fe5b60209081029190910101526001909101905b6001016108e0565b5060005b8451811015610635576000858281518110610a1c57fe5b6020026020010151606001511180610a4b57506000858281518110610a3d57fe5b602002602001015160800151115b15610b18576040805161010081019091528060048152602001868381518110610a7057fe5b602002602001015160000151815260200160001515815260200160006001600160801b03168152602001600060020b8152602001600060020b8152602001600a878481518110610abc57fe5b602002602001015160600151600c0281610ad257fe5b048152602001600a878481518110610ae657fe5b602002602001015160800151600c0281610afc57fe5b04815250848381518110610b0c57fe5b60200260200101819052505b600101610a05565b60008060005b8451811015610b6957600080610b57878481518110610b4157fe5b6020026020010151610b51610bbb565b88610c2f565b95019493909301925050600101610b26565b509250929050565b60a0810151516020820151151580610b8d575060008260400151115b15610b96576001015b600082606001511180610bad575060008260800151115b15610bb6576001015b919050565b610bc36114b8565b6040805160008082526020820190925281610bf4565b610be16114ee565b815260200190600190039081610bd95790505b5090506040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020018281525091505090565b600080610c49856020015183610e7090919063ffffffff16565b9150610c62856040015182610e7090919063ffffffff16565b9050610c7b856060015183610edc90919063ffffffff16565b9150610c94856080015182610edc90919063ffffffff16565b9050610cad846020015183610edc90919063ffffffff16565b9150610cc6846040015182610edc90919063ffffffff16565b9050610cdf846060015183610e7090919063ffffffff16565b9150610cf8846080015182610e7090919063ffffffff16565b905060005b8560a0015151811015610d9e5760008660a001518281518110610d1c57fe5b60200260200101519050600080610d5187610d3a8560400151610f41565b610d478660600151610f41565b8660200151611273565b8451919350915015610d7a57610d678683610e70565b9550610d738582610e70565b9450610d93565b610d848683610edc565b9550610d908582610edc565b94505b505050600101610cfd565b5060005b8460a0015151811015610e2c5760008560a001518281518110610dc157fe5b60200260200101519050600080610ddf87610d3a8560400151610f41565b8451919350915015610e0857610df58683610edc565b9550610e018582610edc565b9450610e21565b610e128683610e70565b9550610e1e8582610e70565b94505b505050600101610da2565b50935093915050565b6000805b8251811015610e6a57610e5e838281518110610e5157fe5b6020026020010151610b71565b90910190600101610e39565b50919050565b6000818303818312801590610e855750838113155b80610e9a5750600083128015610e9a57508381135b610ed55760405162461bcd60e51b81526004018080602001828103825260248152602001806118e86024913960400191505060405180910390fd5b9392505050565b6000828201818312801590610ef15750838112155b80610f065750600083128015610f0657508381125b610ed55760405162461bcd60e51b81526004018080602001828103825260218152602001806118c76021913960400191505060405180910390fd5b60008060008360020b12610f58578260020b610f60565b8260020b6000035b9050620d89e8811115610f9e576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610fb257600160801b610fc4565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610ff8576ffff97272373d413259a46990580e213a0260801c5b6004821615611017576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611036576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611055576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611074576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611093576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156110b2576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156110d2576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156110f2576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611112576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611132576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611152576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611172576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611192576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156111b2576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156111d3576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156111f3576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611212576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561122f576b048a170391f7dc42444e8fa20260801c5b60008460020b131561124a57806000198161124657fe5b0490505b64010000000081061561125e576001611261565b60005b60ff16602082901c0192505050919050565b600080836001600160a01b0316856001600160a01b03161115611294579293925b846001600160a01b0316866001600160a01b0316116112bf576112b885858561130f565b9150611306565b836001600160a01b0316866001600160a01b031610156112f8576112e486858561130f565b91506112f1858785611378565b9050611306565b611303858585611378565b90505b94509492505050565b6000826001600160a01b0316846001600160a01b0316111561132f579192915b836001600160a01b0316611368606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b03166113c3565b8161136f57fe5b04949350505050565b6000826001600160a01b0316846001600160a01b03161115611398579192915b6113bb826001600160801b03168585036001600160a01b0316600160601b6113c3565b949350505050565b60008080600019858709868602925082811090839003039050806113f957600084116113ee57600080fd5b508290049050610ed5565b80841161140557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b600082601f830112611525578081fd5b8135602061153a611535836118a8565b611884565b82815281810190858301608080860288018501891015611558578687fd5b865b868110156115ed5781838b031215611570578788fd5b6040805183810181811067ffffffffffffffff8211171561158d57fe5b8252611598856115fb565b8152878501356001600160801b03811681146115b2578a8bfd5b818901526115c185830161160b565b82820152606091506115d482860161160b565b918101919091528552938501939181019160010161155a565b509198975050505050505050565b80358015158114610bb657600080fd5b8035600281900b8114610bb657600080fd5b600060c0828403121561162e578081fd5b60405160c0810167ffffffffffffffff828210818311171561164c57fe5b81604052829350843583526020850135602084015260408501356040840152606085013560608401526080850135608084015260a085013591508082111561169357600080fd5b506116a085828601611515565b60a0830152505092915050565b80356001600160a01b0381168114610bb657600080fd5b6000806000606084860312156116d8578283fd5b833567ffffffffffffffff8111156116ee578384fd5b8401601f810186136116fe578384fd5b8035602061170e611535836118a8565b82815281810190848301885b85811015611743576117318c8684358a010161161d565b8452928401929084019060010161171a565b509097505050860135935061175d915050604085016116ad565b90509250925092565b60008060006060848603121561177a578283fd5b833567ffffffffffffffff811115611790578384fd5b61179c8682870161161d565b9350506117ab602085016115fb565b915061175d604085016116ad565b60020b9052565b6001600160801b03169052565b602080825282518282018190526000919060409081850190868401855b828110156118775781518051600d811061180057fe5b8552808701518786015285810151151586860152606080820151611826828801826117c0565b505060808082015161183a828801826117b9565b505060a08082015161184e828801826117b9565b505060c0818101519086015260e0908101519085015261010090930192908501906001016117ea565b5091979650505050505050565b60405181810167ffffffffffffffff811182821017156118a057fe5b604052919050565b600067ffffffffffffffff8211156118bc57fe5b506020908102019056fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212200f294806ee0c6dbc7b864b1f9009ac810d7c7cd07ec7ab62f8f73f18a5bc7b1464736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063b5b49eb214610045578063ffc4b1ad1461006e575b600080fd5b610058610053366004611766565b610081565b60405161006591906117cd565b60405180910390f35b61005861007c3660046116c4565b610259565b6060600061008e85610352565b90925090506000806100a0878661063c565b9150915085156101805760008113156101145760408051610100810190915280600a815260006020820181905260016040830152606082018190526080820181905260a0820181905260c0820184905260e090910152845185908590811061010457fe5b602002602001018190525061017b565b600081121561017b57604080516101008101909152806009815260006020820181905260408201819052606082018190526080820181905260a0820181905283810360c083015260e090910152845185908590811061016f57fe5b60200260200101819052505b61024f565b60008213156101e85760408051610100810190915280600a81526020016000815260200160001515815260200160006001600160801b03168152602001600060020b8152602001600060020b8152602001838152602001600081525084848151811061016f57fe5b600082121561024f57604080516101008101909152806009815260006020820181905260016040830152606082018190526080820181905260a0820181905284810360c083015260e090910152845185908590811061024357fe5b60200260200101819052505b5050509392505050565b606060006102668561065c565b90925090506000806102788786610b20565b9150915060008212156102f35760408051610100810190915280600981526020016000815260200160011515815260200160006001600160801b03168152602001600060020b8152602001600060020b81526020016064888560000302816102dc57fe5b048152602001600081525084848151811061016f57fe5b600081121561024f57604080516101008101825260098152600060208201819052918101829052606081018290526080810182905260a08101829052606483830389020460c082015260e0810191909152845185908590811061024357fe5b6060600061035f83610b71565b60010167ffffffffffffffff8111801561037857600080fd5b506040519080825280602002602001820160405280156103b257816020015b61039f611472565b8152602001906001900390816103975790505b5091506000805b8460a00151518110156104725760008560a0015182815181106103d857fe5b6020026020010151905080600001516104695760408051610100810190915280600781526020018760000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b815260200160008152602001600081525085848151811061045757fe5b60209081029190910101526001909201915b506001016103b9565b5060008460200151118061048a575060008460400151115b156104f25760408051610100810182526001815285516020808301919091526000828401819052606083018190526080830181905260a083015286015160c08201529085015160e082015283518490839081106104e357fe5b60209081029190910101526001015b600084606001511180610509575060008460800151115b15610572576040805161010081018252600381528551602082015260009181018290526060808201839052608080830184905260a083019390935286015160c08201529085015160e0820152835184908390811061056357fe5b60209081029190910101526001015b90506001810160005b8460a00151518110156106355760008560a00151828151811061059a57fe5b6020026020010151905080600001511561062c5760408051610100810190915280600581526020018760000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b815260200160008152602001600081525085848151811061061a57fe5b60209081029190910101526001909201915b5060010161057b565b5050915091565b60008061065161064a610bbb565b8585610c2f565b915091509250929050565b6060600061066983610e35565b60010167ffffffffffffffff8111801561068257600080fd5b506040519080825280602002602001820160405280156106bc57816020015b6106a9611472565b8152602001906001900390816106a15790505b5091506000805b84518110156107cb5760005b8582815181106106db57fe5b602002602001015160a00151518110156107c25760008683815181106106fd57fe5b602002602001015160a00151828151811061071457fe5b602002602001015190508060000151156107b957604080516101008101909152806006815260200188858151811061074857fe5b602002602001015160000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b81526020016000815260200160008152508685815181106107a757fe5b60209081029190910101526001909301925b506001016106cf565b506001016106c3565b5090506001810160005b84518110156108dc5760005b8582815181106107ed57fe5b602002602001015160a00151518110156108d357600086838151811061080f57fe5b602002602001015160a00151828151811061082657fe5b6020026020010151905080600001516108ca57604080516101008101909152806008815260200188858151811061085957fe5b602002602001015160000151815260200160001515815260200182602001516001600160801b03168152602001826040015160020b8152602001826060015160020b81526020016000815260200160008152508685815181106108b857fe5b60209081029190910101526001909301925b506001016107e1565b506001016107d5565b5060005b8451811015610a015760008582815181106108f757fe5b60200260200101516020015111806109265750600085828151811061091857fe5b602002602001015160400151115b156109f957604080516101008101909152806002815260200186838151811061094b57fe5b602002602001015160000151815260200160001515815260200160006001600160801b03168152602001600060020b8152602001600060020b8152602001600a87848151811061099757fe5b602002602001015160200151600c02816109ad57fe5b048152602001600a8784815181106109c157fe5b602002602001015160400151600c02816109d757fe5b048152508483815181106109e757fe5b60209081029190910101526001909101905b6001016108e0565b5060005b8451811015610635576000858281518110610a1c57fe5b6020026020010151606001511180610a4b57506000858281518110610a3d57fe5b602002602001015160800151115b15610b18576040805161010081019091528060048152602001868381518110610a7057fe5b602002602001015160000151815260200160001515815260200160006001600160801b03168152602001600060020b8152602001600060020b8152602001600a878481518110610abc57fe5b602002602001015160600151600c0281610ad257fe5b048152602001600a878481518110610ae657fe5b602002602001015160800151600c0281610afc57fe5b04815250848381518110610b0c57fe5b60200260200101819052505b600101610a05565b60008060005b8451811015610b6957600080610b57878481518110610b4157fe5b6020026020010151610b51610bbb565b88610c2f565b95019493909301925050600101610b26565b509250929050565b60a0810151516020820151151580610b8d575060008260400151115b15610b96576001015b600082606001511180610bad575060008260800151115b15610bb6576001015b919050565b610bc36114b8565b6040805160008082526020820190925281610bf4565b610be16114ee565b815260200190600190039081610bd95790505b5090506040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020018281525091505090565b600080610c49856020015183610e7090919063ffffffff16565b9150610c62856040015182610e7090919063ffffffff16565b9050610c7b856060015183610edc90919063ffffffff16565b9150610c94856080015182610edc90919063ffffffff16565b9050610cad846020015183610edc90919063ffffffff16565b9150610cc6846040015182610edc90919063ffffffff16565b9050610cdf846060015183610e7090919063ffffffff16565b9150610cf8846080015182610e7090919063ffffffff16565b905060005b8560a0015151811015610d9e5760008660a001518281518110610d1c57fe5b60200260200101519050600080610d5187610d3a8560400151610f41565b610d478660600151610f41565b8660200151611273565b8451919350915015610d7a57610d678683610e70565b9550610d738582610e70565b9450610d93565b610d848683610edc565b9550610d908582610edc565b94505b505050600101610cfd565b5060005b8460a0015151811015610e2c5760008560a001518281518110610dc157fe5b60200260200101519050600080610ddf87610d3a8560400151610f41565b8451919350915015610e0857610df58683610edc565b9550610e018582610edc565b9450610e21565b610e128683610e70565b9550610e1e8582610e70565b94505b505050600101610da2565b50935093915050565b6000805b8251811015610e6a57610e5e838281518110610e5157fe5b6020026020010151610b71565b90910190600101610e39565b50919050565b6000818303818312801590610e855750838113155b80610e9a5750600083128015610e9a57508381135b610ed55760405162461bcd60e51b81526004018080602001828103825260248152602001806118e86024913960400191505060405180910390fd5b9392505050565b6000828201818312801590610ef15750838112155b80610f065750600083128015610f0657508381125b610ed55760405162461bcd60e51b81526004018080602001828103825260218152602001806118c76021913960400191505060405180910390fd5b60008060008360020b12610f58578260020b610f60565b8260020b6000035b9050620d89e8811115610f9e576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610fb257600160801b610fc4565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610ff8576ffff97272373d413259a46990580e213a0260801c5b6004821615611017576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611036576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611055576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611074576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611093576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156110b2576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156110d2576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156110f2576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611112576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611132576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611152576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611172576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611192576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156111b2576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156111d3576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156111f3576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611212576d2216e584f5fa1ea926041bedfe980260801c5b6208000082161561122f576b048a170391f7dc42444e8fa20260801c5b60008460020b131561124a57806000198161124657fe5b0490505b64010000000081061561125e576001611261565b60005b60ff16602082901c0192505050919050565b600080836001600160a01b0316856001600160a01b03161115611294579293925b846001600160a01b0316866001600160a01b0316116112bf576112b885858561130f565b9150611306565b836001600160a01b0316866001600160a01b031610156112f8576112e486858561130f565b91506112f1858785611378565b9050611306565b611303858585611378565b90505b94509492505050565b6000826001600160a01b0316846001600160a01b0316111561132f579192915b836001600160a01b0316611368606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b03166113c3565b8161136f57fe5b04949350505050565b6000826001600160a01b0316846001600160a01b03161115611398579192915b6113bb826001600160801b03168585036001600160a01b0316600160601b6113c3565b949350505050565b60008080600019858709868602925082811090839003039050806113f957600084116113ee57600080fd5b508290049050610ed5565b80841161140557600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080516101008101909152806000815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b600082601f830112611525578081fd5b8135602061153a611535836118a8565b611884565b82815281810190858301608080860288018501891015611558578687fd5b865b868110156115ed5781838b031215611570578788fd5b6040805183810181811067ffffffffffffffff8211171561158d57fe5b8252611598856115fb565b8152878501356001600160801b03811681146115b2578a8bfd5b818901526115c185830161160b565b82820152606091506115d482860161160b565b918101919091528552938501939181019160010161155a565b509198975050505050505050565b80358015158114610bb657600080fd5b8035600281900b8114610bb657600080fd5b600060c0828403121561162e578081fd5b60405160c0810167ffffffffffffffff828210818311171561164c57fe5b81604052829350843583526020850135602084015260408501356040840152606085013560608401526080850135608084015260a085013591508082111561169357600080fd5b506116a085828601611515565b60a0830152505092915050565b80356001600160a01b0381168114610bb657600080fd5b6000806000606084860312156116d8578283fd5b833567ffffffffffffffff8111156116ee578384fd5b8401601f810186136116fe578384fd5b8035602061170e611535836118a8565b82815281810190848301885b85811015611743576117318c8684358a010161161d565b8452928401929084019060010161171a565b509097505050860135935061175d915050604085016116ad565b90509250925092565b60008060006060848603121561177a578283fd5b833567ffffffffffffffff811115611790578384fd5b61179c8682870161161d565b9350506117ab602085016115fb565b915061175d604085016116ad565b60020b9052565b6001600160801b03169052565b602080825282518282018190526000919060409081850190868401855b828110156118775781518051600d811061180057fe5b8552808701518786015285810151151586860152606080820151611826828801826117c0565b505060808082015161183a828801826117b9565b505060a08082015161184e828801826117b9565b505060c0818101519086015260e0908101519085015261010090930192908501906001016117ea565b5091979650505050505050565b60405181810167ffffffffffffffff811182821017156118a057fe5b604052919050565b600067ffffffffffffffff8211156118bc57fe5b506020908102019056fe5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212200f294806ee0c6dbc7b864b1f9009ac810d7c7cd07ec7ab62f8f73f18a5bc7b1464736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}